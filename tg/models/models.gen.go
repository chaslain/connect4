// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AuthorizationStateAuthorizationState.
const (
	Ready            AuthorizationStateAuthorizationState = "ready"
	Unknown          AuthorizationStateAuthorizationState = "unknown"
	WaitCode         AuthorizationStateAuthorizationState = "wait_code"
	WaitPassword     AuthorizationStateAuthorizationState = "wait_password"
	WaitRegistration AuthorizationStateAuthorizationState = "wait_registration"
)

// Defines values for ChatType.
const (
	ChatTypeChannel    ChatType = "channel"
	ChatTypeGroup      ChatType = "group"
	ChatTypePrivate    ChatType = "private"
	ChatTypeSupergroup ChatType = "supergroup"
)

// Defines values for ChatMemberStatus.
const (
	ChatMemberStatusAdministrator ChatMemberStatus = "administrator"
	ChatMemberStatusCreator       ChatMemberStatus = "creator"
	ChatMemberStatusKicked        ChatMemberStatus = "kicked"
	ChatMemberStatusLeft          ChatMemberStatus = "left"
	ChatMemberStatusMember        ChatMemberStatus = "member"
	ChatMemberStatusRestricted    ChatMemberStatus = "restricted"
)

// Defines values for EncryptedPassportElementType.
const (
	EncryptedPassportElementTypeAddress               EncryptedPassportElementType = "address"
	EncryptedPassportElementTypeBankStatement         EncryptedPassportElementType = "bank_statement"
	EncryptedPassportElementTypeDriverLicense         EncryptedPassportElementType = "driver_license"
	EncryptedPassportElementTypeEmail                 EncryptedPassportElementType = "email"
	EncryptedPassportElementTypeIdentityCard          EncryptedPassportElementType = "identity_card"
	EncryptedPassportElementTypeInternalPassport      EncryptedPassportElementType = "internal_passport"
	EncryptedPassportElementTypePassport              EncryptedPassportElementType = "passport"
	EncryptedPassportElementTypePassportRegistration  EncryptedPassportElementType = "passport_registration"
	EncryptedPassportElementTypePersonalDetails       EncryptedPassportElementType = "personal_details"
	EncryptedPassportElementTypePhoneNumber           EncryptedPassportElementType = "phone_number"
	EncryptedPassportElementTypeRentalAgreement       EncryptedPassportElementType = "rental_agreement"
	EncryptedPassportElementTypeTemporaryRegistration EncryptedPassportElementType = "temporary_registration"
	EncryptedPassportElementTypeUtilityBill           EncryptedPassportElementType = "utility_bill"
)

// Defines values for InlineQueryResultDocumentMimeType.
const (
	Applicationpdf InlineQueryResultDocumentMimeType = "application/pdf"
	Applicationzip InlineQueryResultDocumentMimeType = "application/zip"
)

// Defines values for InlineQueryResultGifThumbMimeType.
const (
	InlineQueryResultGifThumbMimeTypeImagegif  InlineQueryResultGifThumbMimeType = "image/gif"
	InlineQueryResultGifThumbMimeTypeImagejpeg InlineQueryResultGifThumbMimeType = "image/jpeg"
	InlineQueryResultGifThumbMimeTypeVideomp4  InlineQueryResultGifThumbMimeType = "video/mp4"
)

// Defines values for InlineQueryResultMpeg4GifThumbMimeType.
const (
	InlineQueryResultMpeg4GifThumbMimeTypeImagegif  InlineQueryResultMpeg4GifThumbMimeType = "image/gif"
	InlineQueryResultMpeg4GifThumbMimeTypeImagejpeg InlineQueryResultMpeg4GifThumbMimeType = "image/jpeg"
	InlineQueryResultMpeg4GifThumbMimeTypeVideomp4  InlineQueryResultMpeg4GifThumbMimeType = "video/mp4"
)

// Defines values for MaskPositionPoint.
const (
	Chin     MaskPositionPoint = "chin"
	Eyes     MaskPositionPoint = "eyes"
	Forehead MaskPositionPoint = "forehead"
	Mouth    MaskPositionPoint = "mouth"
)

// Defines values for MessageEntityType.
const (
	MessageEntityTypeBold          MessageEntityType = "bold"
	MessageEntityTypeBotCommand    MessageEntityType = "bot_command"
	MessageEntityTypeCashtag       MessageEntityType = "cashtag"
	MessageEntityTypeCode          MessageEntityType = "code"
	MessageEntityTypeEmail         MessageEntityType = "email"
	MessageEntityTypeHashtag       MessageEntityType = "hashtag"
	MessageEntityTypeItalic        MessageEntityType = "italic"
	MessageEntityTypeMention       MessageEntityType = "mention"
	MessageEntityTypePhoneNumber   MessageEntityType = "phone_number"
	MessageEntityTypePre           MessageEntityType = "pre"
	MessageEntityTypeStrikethrough MessageEntityType = "strikethrough"
	MessageEntityTypeTextLink      MessageEntityType = "text_link"
	MessageEntityTypeTextMention   MessageEntityType = "text_mention"
	MessageEntityTypeUnderline     MessageEntityType = "underline"
	MessageEntityTypeUrl           MessageEntityType = "url"
)

// Defines values for PassportElementErrorDataFieldType.
const (
	PassportElementErrorDataFieldTypeAddress          PassportElementErrorDataFieldType = "address"
	PassportElementErrorDataFieldTypeDriverLicense    PassportElementErrorDataFieldType = "driver_license"
	PassportElementErrorDataFieldTypeIdentityCard     PassportElementErrorDataFieldType = "identity_card"
	PassportElementErrorDataFieldTypeInternalPassport PassportElementErrorDataFieldType = "internal_passport"
	PassportElementErrorDataFieldTypePassport         PassportElementErrorDataFieldType = "passport"
	PassportElementErrorDataFieldTypePersonalDetails  PassportElementErrorDataFieldType = "personal_details"
)

// Defines values for PassportElementErrorFileType.
const (
	PassportElementErrorFileTypeBankStatement         PassportElementErrorFileType = "bank_statement"
	PassportElementErrorFileTypePassportRegistration  PassportElementErrorFileType = "passport_registration"
	PassportElementErrorFileTypeRentalAgreement       PassportElementErrorFileType = "rental_agreement"
	PassportElementErrorFileTypeTemporaryRegistration PassportElementErrorFileType = "temporary_registration"
	PassportElementErrorFileTypeUtilityBill           PassportElementErrorFileType = "utility_bill"
)

// Defines values for PassportElementErrorFilesType.
const (
	PassportElementErrorFilesTypeBankStatement         PassportElementErrorFilesType = "bank_statement"
	PassportElementErrorFilesTypePassportRegistration  PassportElementErrorFilesType = "passport_registration"
	PassportElementErrorFilesTypeRentalAgreement       PassportElementErrorFilesType = "rental_agreement"
	PassportElementErrorFilesTypeTemporaryRegistration PassportElementErrorFilesType = "temporary_registration"
	PassportElementErrorFilesTypeUtilityBill           PassportElementErrorFilesType = "utility_bill"
)

// Defines values for PassportElementErrorFrontSideType.
const (
	PassportElementErrorFrontSideTypeDriverLicense    PassportElementErrorFrontSideType = "driver_license"
	PassportElementErrorFrontSideTypeIdentityCard     PassportElementErrorFrontSideType = "identity_card"
	PassportElementErrorFrontSideTypeInternalPassport PassportElementErrorFrontSideType = "internal_passport"
	PassportElementErrorFrontSideTypePassport         PassportElementErrorFrontSideType = "passport"
)

// Defines values for PassportElementErrorReverseSideType.
const (
	PassportElementErrorReverseSideTypeDriverLicense PassportElementErrorReverseSideType = "driver_license"
	PassportElementErrorReverseSideTypeIdentityCard  PassportElementErrorReverseSideType = "identity_card"
)

// Defines values for PassportElementErrorSelfieType.
const (
	PassportElementErrorSelfieTypeDriverLicense    PassportElementErrorSelfieType = "driver_license"
	PassportElementErrorSelfieTypeIdentityCard     PassportElementErrorSelfieType = "identity_card"
	PassportElementErrorSelfieTypeInternalPassport PassportElementErrorSelfieType = "internal_passport"
	PassportElementErrorSelfieTypePassport         PassportElementErrorSelfieType = "passport"
)

// Defines values for PassportElementErrorTranslationFileType.
const (
	PassportElementErrorTranslationFileTypeBankStatement         PassportElementErrorTranslationFileType = "bank_statement"
	PassportElementErrorTranslationFileTypeDriverLicense         PassportElementErrorTranslationFileType = "driver_license"
	PassportElementErrorTranslationFileTypeIdentityCard          PassportElementErrorTranslationFileType = "identity_card"
	PassportElementErrorTranslationFileTypeInternalPassport      PassportElementErrorTranslationFileType = "internal_passport"
	PassportElementErrorTranslationFileTypePassport              PassportElementErrorTranslationFileType = "passport"
	PassportElementErrorTranslationFileTypePassportRegistration  PassportElementErrorTranslationFileType = "passport_registration"
	PassportElementErrorTranslationFileTypeRentalAgreement       PassportElementErrorTranslationFileType = "rental_agreement"
	PassportElementErrorTranslationFileTypeTemporaryRegistration PassportElementErrorTranslationFileType = "temporary_registration"
	PassportElementErrorTranslationFileTypeUtilityBill           PassportElementErrorTranslationFileType = "utility_bill"
)

// Defines values for PassportElementErrorTranslationFilesType.
const (
	PassportElementErrorTranslationFilesTypeBankStatement         PassportElementErrorTranslationFilesType = "bank_statement"
	PassportElementErrorTranslationFilesTypeDriverLicense         PassportElementErrorTranslationFilesType = "driver_license"
	PassportElementErrorTranslationFilesTypeIdentityCard          PassportElementErrorTranslationFilesType = "identity_card"
	PassportElementErrorTranslationFilesTypeInternalPassport      PassportElementErrorTranslationFilesType = "internal_passport"
	PassportElementErrorTranslationFilesTypePassport              PassportElementErrorTranslationFilesType = "passport"
	PassportElementErrorTranslationFilesTypePassportRegistration  PassportElementErrorTranslationFilesType = "passport_registration"
	PassportElementErrorTranslationFilesTypeRentalAgreement       PassportElementErrorTranslationFilesType = "rental_agreement"
	PassportElementErrorTranslationFilesTypeTemporaryRegistration PassportElementErrorTranslationFilesType = "temporary_registration"
	PassportElementErrorTranslationFilesTypeUtilityBill           PassportElementErrorTranslationFilesType = "utility_bill"
)

// Defines values for PostCreateChatJSONBodyType.
const (
	PostCreateChatJSONBodyTypeChannel    PostCreateChatJSONBodyType = "channel"
	PostCreateChatJSONBodyTypeGroup      PostCreateChatJSONBodyType = "group"
	PostCreateChatJSONBodyTypeSupergroup PostCreateChatJSONBodyType = "supergroup"
)

// Defines values for PostCreateChatFormdataBodyType.
const (
	PostCreateChatFormdataBodyTypeChannel    PostCreateChatFormdataBodyType = "channel"
	PostCreateChatFormdataBodyTypeGroup      PostCreateChatFormdataBodyType = "group"
	PostCreateChatFormdataBodyTypeSupergroup PostCreateChatFormdataBodyType = "supergroup"
)

// Defines values for PostCreateChatMultipartBodyType.
const (
	PostCreateChatMultipartBodyTypeChannel    PostCreateChatMultipartBodyType = "channel"
	PostCreateChatMultipartBodyTypeGroup      PostCreateChatMultipartBodyType = "group"
	PostCreateChatMultipartBodyTypeSupergroup PostCreateChatMultipartBodyType = "supergroup"
)

// Defines values for PostGetChatMembersJSONBodyFilter.
const (
	PostGetChatMembersJSONBodyFilterAdmins     PostGetChatMembersJSONBodyFilter = "admins"
	PostGetChatMembersJSONBodyFilterBanned     PostGetChatMembersJSONBodyFilter = "banned"
	PostGetChatMembersJSONBodyFilterBots       PostGetChatMembersJSONBodyFilter = "bots"
	PostGetChatMembersJSONBodyFilterMembers    PostGetChatMembersJSONBodyFilter = "members"
	PostGetChatMembersJSONBodyFilterRestricted PostGetChatMembersJSONBodyFilter = "restricted"
)

// Defines values for PostGetChatMembersFormdataBodyFilter.
const (
	PostGetChatMembersFormdataBodyFilterAdmins     PostGetChatMembersFormdataBodyFilter = "admins"
	PostGetChatMembersFormdataBodyFilterBanned     PostGetChatMembersFormdataBodyFilter = "banned"
	PostGetChatMembersFormdataBodyFilterBots       PostGetChatMembersFormdataBodyFilter = "bots"
	PostGetChatMembersFormdataBodyFilterMembers    PostGetChatMembersFormdataBodyFilter = "members"
	PostGetChatMembersFormdataBodyFilterRestricted PostGetChatMembersFormdataBodyFilter = "restricted"
)

// Defines values for PostGetChatMembersMultipartBodyFilter.
const (
	PostGetChatMembersMultipartBodyFilterAdmins     PostGetChatMembersMultipartBodyFilter = "admins"
	PostGetChatMembersMultipartBodyFilterBanned     PostGetChatMembersMultipartBodyFilter = "banned"
	PostGetChatMembersMultipartBodyFilterBots       PostGetChatMembersMultipartBodyFilter = "bots"
	PostGetChatMembersMultipartBodyFilterMembers    PostGetChatMembersMultipartBodyFilter = "members"
	PostGetChatMembersMultipartBodyFilterRestricted PostGetChatMembersMultipartBodyFilter = "restricted"
)

// Defines values for PostSearchChatMessagesJSONBodyFilter.
const (
	PostSearchChatMessagesJSONBodyFilterAnimation           PostSearchChatMessagesJSONBodyFilter = "animation"
	PostSearchChatMessagesJSONBodyFilterAudio               PostSearchChatMessagesJSONBodyFilter = "audio"
	PostSearchChatMessagesJSONBodyFilterCall                PostSearchChatMessagesJSONBodyFilter = "call"
	PostSearchChatMessagesJSONBodyFilterChatPhoto           PostSearchChatMessagesJSONBodyFilter = "chat_photo"
	PostSearchChatMessagesJSONBodyFilterDocument            PostSearchChatMessagesJSONBodyFilter = "document"
	PostSearchChatMessagesJSONBodyFilterFailedToSend        PostSearchChatMessagesJSONBodyFilter = "failed_to_send"
	PostSearchChatMessagesJSONBodyFilterMention             PostSearchChatMessagesJSONBodyFilter = "mention"
	PostSearchChatMessagesJSONBodyFilterMissedCall          PostSearchChatMessagesJSONBodyFilter = "missed_call"
	PostSearchChatMessagesJSONBodyFilterPhoto               PostSearchChatMessagesJSONBodyFilter = "photo"
	PostSearchChatMessagesJSONBodyFilterPhotoAndVideo       PostSearchChatMessagesJSONBodyFilter = "photo_and_video"
	PostSearchChatMessagesJSONBodyFilterPinnedunreadMention PostSearchChatMessagesJSONBodyFilter = "pinnedunread_mention"
	PostSearchChatMessagesJSONBodyFilterUrl                 PostSearchChatMessagesJSONBodyFilter = "url"
	PostSearchChatMessagesJSONBodyFilterVideo               PostSearchChatMessagesJSONBodyFilter = "video"
	PostSearchChatMessagesJSONBodyFilterVideoNote           PostSearchChatMessagesJSONBodyFilter = "video_note"
	PostSearchChatMessagesJSONBodyFilterVoiceAndVideoNote   PostSearchChatMessagesJSONBodyFilter = "voice_and_video_note"
	PostSearchChatMessagesJSONBodyFilterVoiceNote           PostSearchChatMessagesJSONBodyFilter = "voice_note"
)

// Defines values for PostSearchChatMessagesFormdataBodyFilter.
const (
	PostSearchChatMessagesFormdataBodyFilterAnimation           PostSearchChatMessagesFormdataBodyFilter = "animation"
	PostSearchChatMessagesFormdataBodyFilterAudio               PostSearchChatMessagesFormdataBodyFilter = "audio"
	PostSearchChatMessagesFormdataBodyFilterCall                PostSearchChatMessagesFormdataBodyFilter = "call"
	PostSearchChatMessagesFormdataBodyFilterChatPhoto           PostSearchChatMessagesFormdataBodyFilter = "chat_photo"
	PostSearchChatMessagesFormdataBodyFilterDocument            PostSearchChatMessagesFormdataBodyFilter = "document"
	PostSearchChatMessagesFormdataBodyFilterFailedToSend        PostSearchChatMessagesFormdataBodyFilter = "failed_to_send"
	PostSearchChatMessagesFormdataBodyFilterMention             PostSearchChatMessagesFormdataBodyFilter = "mention"
	PostSearchChatMessagesFormdataBodyFilterMissedCall          PostSearchChatMessagesFormdataBodyFilter = "missed_call"
	PostSearchChatMessagesFormdataBodyFilterPhoto               PostSearchChatMessagesFormdataBodyFilter = "photo"
	PostSearchChatMessagesFormdataBodyFilterPhotoAndVideo       PostSearchChatMessagesFormdataBodyFilter = "photo_and_video"
	PostSearchChatMessagesFormdataBodyFilterPinnedunreadMention PostSearchChatMessagesFormdataBodyFilter = "pinnedunread_mention"
	PostSearchChatMessagesFormdataBodyFilterUrl                 PostSearchChatMessagesFormdataBodyFilter = "url"
	PostSearchChatMessagesFormdataBodyFilterVideo               PostSearchChatMessagesFormdataBodyFilter = "video"
	PostSearchChatMessagesFormdataBodyFilterVideoNote           PostSearchChatMessagesFormdataBodyFilter = "video_note"
	PostSearchChatMessagesFormdataBodyFilterVoiceAndVideoNote   PostSearchChatMessagesFormdataBodyFilter = "voice_and_video_note"
	PostSearchChatMessagesFormdataBodyFilterVoiceNote           PostSearchChatMessagesFormdataBodyFilter = "voice_note"
)

// Defines values for PostSearchChatMessagesMultipartBodyFilter.
const (
	PostSearchChatMessagesMultipartBodyFilterAnimation           PostSearchChatMessagesMultipartBodyFilter = "animation"
	PostSearchChatMessagesMultipartBodyFilterAudio               PostSearchChatMessagesMultipartBodyFilter = "audio"
	PostSearchChatMessagesMultipartBodyFilterCall                PostSearchChatMessagesMultipartBodyFilter = "call"
	PostSearchChatMessagesMultipartBodyFilterChatPhoto           PostSearchChatMessagesMultipartBodyFilter = "chat_photo"
	PostSearchChatMessagesMultipartBodyFilterDocument            PostSearchChatMessagesMultipartBodyFilter = "document"
	PostSearchChatMessagesMultipartBodyFilterFailedToSend        PostSearchChatMessagesMultipartBodyFilter = "failed_to_send"
	PostSearchChatMessagesMultipartBodyFilterMention             PostSearchChatMessagesMultipartBodyFilter = "mention"
	PostSearchChatMessagesMultipartBodyFilterMissedCall          PostSearchChatMessagesMultipartBodyFilter = "missed_call"
	PostSearchChatMessagesMultipartBodyFilterPhoto               PostSearchChatMessagesMultipartBodyFilter = "photo"
	PostSearchChatMessagesMultipartBodyFilterPhotoAndVideo       PostSearchChatMessagesMultipartBodyFilter = "photo_and_video"
	PostSearchChatMessagesMultipartBodyFilterPinnedunreadMention PostSearchChatMessagesMultipartBodyFilter = "pinnedunread_mention"
	PostSearchChatMessagesMultipartBodyFilterUrl                 PostSearchChatMessagesMultipartBodyFilter = "url"
	PostSearchChatMessagesMultipartBodyFilterVideo               PostSearchChatMessagesMultipartBodyFilter = "video"
	PostSearchChatMessagesMultipartBodyFilterVideoNote           PostSearchChatMessagesMultipartBodyFilter = "video_note"
	PostSearchChatMessagesMultipartBodyFilterVoiceAndVideoNote   PostSearchChatMessagesMultipartBodyFilter = "voice_and_video_note"
	PostSearchChatMessagesMultipartBodyFilterVoiceNote           PostSearchChatMessagesMultipartBodyFilter = "voice_note"
)

// Defines values for PostSearchMessagesJSONBodyFilter.
const (
	PostSearchMessagesJSONBodyFilterAnimation         PostSearchMessagesJSONBodyFilter = "animation"
	PostSearchMessagesJSONBodyFilterAudio             PostSearchMessagesJSONBodyFilter = "audio"
	PostSearchMessagesJSONBodyFilterChatPhoto         PostSearchMessagesJSONBodyFilter = "chat_photo"
	PostSearchMessagesJSONBodyFilterDocument          PostSearchMessagesJSONBodyFilter = "document"
	PostSearchMessagesJSONBodyFilterPhoto             PostSearchMessagesJSONBodyFilter = "photo"
	PostSearchMessagesJSONBodyFilterPhotoAndVideo     PostSearchMessagesJSONBodyFilter = "photo_and_video"
	PostSearchMessagesJSONBodyFilterUrl               PostSearchMessagesJSONBodyFilter = "url"
	PostSearchMessagesJSONBodyFilterVideo             PostSearchMessagesJSONBodyFilter = "video"
	PostSearchMessagesJSONBodyFilterVideoNote         PostSearchMessagesJSONBodyFilter = "video_note"
	PostSearchMessagesJSONBodyFilterVoiceAndVideoNote PostSearchMessagesJSONBodyFilter = "voice_and_video_note"
	PostSearchMessagesJSONBodyFilterVoiceNote         PostSearchMessagesJSONBodyFilter = "voice_note"
)

// Defines values for PostSearchMessagesFormdataBodyFilter.
const (
	PostSearchMessagesFormdataBodyFilterAnimation         PostSearchMessagesFormdataBodyFilter = "animation"
	PostSearchMessagesFormdataBodyFilterAudio             PostSearchMessagesFormdataBodyFilter = "audio"
	PostSearchMessagesFormdataBodyFilterChatPhoto         PostSearchMessagesFormdataBodyFilter = "chat_photo"
	PostSearchMessagesFormdataBodyFilterDocument          PostSearchMessagesFormdataBodyFilter = "document"
	PostSearchMessagesFormdataBodyFilterPhoto             PostSearchMessagesFormdataBodyFilter = "photo"
	PostSearchMessagesFormdataBodyFilterPhotoAndVideo     PostSearchMessagesFormdataBodyFilter = "photo_and_video"
	PostSearchMessagesFormdataBodyFilterUrl               PostSearchMessagesFormdataBodyFilter = "url"
	PostSearchMessagesFormdataBodyFilterVideo             PostSearchMessagesFormdataBodyFilter = "video"
	PostSearchMessagesFormdataBodyFilterVideoNote         PostSearchMessagesFormdataBodyFilter = "video_note"
	PostSearchMessagesFormdataBodyFilterVoiceAndVideoNote PostSearchMessagesFormdataBodyFilter = "voice_and_video_note"
	PostSearchMessagesFormdataBodyFilterVoiceNote         PostSearchMessagesFormdataBodyFilter = "voice_note"
)

// Defines values for PostSearchMessagesMultipartBodyFilter.
const (
	PostSearchMessagesMultipartBodyFilterAnimation         PostSearchMessagesMultipartBodyFilter = "animation"
	PostSearchMessagesMultipartBodyFilterAudio             PostSearchMessagesMultipartBodyFilter = "audio"
	PostSearchMessagesMultipartBodyFilterChatPhoto         PostSearchMessagesMultipartBodyFilter = "chat_photo"
	PostSearchMessagesMultipartBodyFilterDocument          PostSearchMessagesMultipartBodyFilter = "document"
	PostSearchMessagesMultipartBodyFilterPhoto             PostSearchMessagesMultipartBodyFilter = "photo"
	PostSearchMessagesMultipartBodyFilterPhotoAndVideo     PostSearchMessagesMultipartBodyFilter = "photo_and_video"
	PostSearchMessagesMultipartBodyFilterUrl               PostSearchMessagesMultipartBodyFilter = "url"
	PostSearchMessagesMultipartBodyFilterVideo             PostSearchMessagesMultipartBodyFilter = "video"
	PostSearchMessagesMultipartBodyFilterVideoNote         PostSearchMessagesMultipartBodyFilter = "video_note"
	PostSearchMessagesMultipartBodyFilterVoiceAndVideoNote PostSearchMessagesMultipartBodyFilter = "voice_and_video_note"
	PostSearchMessagesMultipartBodyFilterVoiceNote         PostSearchMessagesMultipartBodyFilter = "voice_note"
)

// Defines values for PostSendDiceJSONBodyEmoji.
const (
	PostSendDiceJSONBodyEmojiEmpty PostSendDiceJSONBodyEmoji = "🎲"
	PostSendDiceJSONBodyEmojiN1    PostSendDiceJSONBodyEmoji = "🎯"
	PostSendDiceJSONBodyEmojiN2    PostSendDiceJSONBodyEmoji = "🏀"
	PostSendDiceJSONBodyEmojiN3    PostSendDiceJSONBodyEmoji = "⚽"
	PostSendDiceJSONBodyEmojiN4    PostSendDiceJSONBodyEmoji = "🎰"
)

// Defines values for PostSendDiceFormdataBodyEmoji.
const (
	PostSendDiceFormdataBodyEmojiEmpty PostSendDiceFormdataBodyEmoji = "🎲"
	PostSendDiceFormdataBodyEmojiN1    PostSendDiceFormdataBodyEmoji = "🎯"
	PostSendDiceFormdataBodyEmojiN2    PostSendDiceFormdataBodyEmoji = "🏀"
	PostSendDiceFormdataBodyEmojiN3    PostSendDiceFormdataBodyEmoji = "⚽"
	PostSendDiceFormdataBodyEmojiN4    PostSendDiceFormdataBodyEmoji = "🎰"
)

// Defines values for PostSendDiceMultipartBodyEmoji.
const (
	Empty PostSendDiceMultipartBodyEmoji = "🎲"
	N1    PostSendDiceMultipartBodyEmoji = "🎯"
	N2    PostSendDiceMultipartBodyEmoji = "🏀"
	N3    PostSendDiceMultipartBodyEmoji = "⚽"
	N4    PostSendDiceMultipartBodyEmoji = "🎰"
)

// Animation This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
type Animation struct {
	// Duration Duration of the video in seconds as defined by sender
	Duration int `json:"duration"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileName *Optional*. Original animation filename as defined by sender
	FileName *string `json:"file_name,omitempty"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// Height Video height as defined by sender
	Height int `json:"height"`

	// MimeType *Optional*. MIME type of the file as defined by sender
	MimeType *string `json:"mime_type,omitempty"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Width Video width as defined by sender
	Width int `json:"width"`
}

// Audio This object represents an audio file to be treated as music by the Telegram clients.
type Audio struct {
	// Duration Duration of the audio in seconds as defined by sender
	Duration int `json:"duration"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileName *Optional*. Original filename as defined by sender
	FileName *string `json:"file_name,omitempty"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// MimeType *Optional*. MIME type of the file as defined by sender
	MimeType *string `json:"mime_type,omitempty"`

	// Performer *Optional*. Performer of the audio as defined by sender or by audio tags
	Performer *string `json:"performer,omitempty"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Title *Optional*. Title of the audio as defined by sender or by audio tags
	Title *string `json:"title,omitempty"`
}

// AuthorizationState Used in the User Authorization process, used to return the current state of the authorization and the token.
type AuthorizationState struct {
	// AuthorizationState Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
	AuthorizationState AuthorizationStateAuthorizationState `json:"authorization_state"`

	// HasRecoveryEmailAddress Optional. True, if a recovery email address has been set up.
	HasRecoveryEmailAddress *bool `json:"has_recovery_email_address,omitempty"`

	// PasswordHint Optional. The password hint for your 2fa password. May be empty even if you set a hint.
	PasswordHint *string `json:"password_hint,omitempty"`

	// Timeout Optional. Timeout for entering the authorization code.
	Timeout *int `json:"timeout,omitempty"`

	// Token Optional. Token to be used for calling methods at the bot api. Only returned once after the `userlogin` method.
	Token *string `json:"token,omitempty"`
}

// AuthorizationStateAuthorizationState Returns the current state of the authorization process. Is one of `wait_code`, `wait_password`, `wait_registration`, `ready` or `unknown`
type AuthorizationStateAuthorizationState string

// BotCommand This object represents a bot command.
type BotCommand struct {
	// Command Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
	Command string `json:"command"`

	// Description Description of the command, 3-256 characters.
	Description string `json:"description"`
}

// CallbackGame A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
type CallbackGame = interface{}

// CallbackQuery This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
type CallbackQuery struct {
	// ChatInstance Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
	ChatInstance string `json:"chat_instance"`

	// Data *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
	Data *string `json:"data,omitempty"`

	// From This object represents a Telegram user or bot.
	From User `json:"from"`

	// GameShortName *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
	GameShortName *string `json:"game_short_name,omitempty"`

	// Id Unique identifier for this query
	Id string `json:"id"`

	// InlineMessageId *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// Message This object represents a message.
	Message *Message `json:"message,omitempty"`
}

// CallbackQueryAnswer Contains a bot's answer to a callback query.
type CallbackQueryAnswer struct {
	// ShowAlert True, if an alert should be shown to the user instead of a toast notification.
	ShowAlert *bool `json:"show_alert,omitempty"`

	// Text Text of the answer
	Text string `json:"text"`

	// Url URL to be opened.
	Url *string `json:"url,omitempty"`
}

// Chat This object represents a chat.
type Chat struct {
	// Bio *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	Bio *string `json:"bio,omitempty"`

	// CanSetStickerSet *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	CanSetStickerSet *bool `json:"can_set_sticker_set,omitempty"`

	// Description *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	Description *string `json:"description,omitempty"`

	// Distance *Optional*. Distance to the chat location in meters. Returned only in `getChatsNearby`.
	Distance *int `json:"distance,omitempty"`

	// FirstName *Optional*. First name of the other party in a private chat
	FirstName *string `json:"first_name,omitempty"`

	// Id Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	Id int `json:"id"`

	// InviteLink *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	InviteLink *string `json:"invite_link,omitempty"`

	// IsScam *Optional*. Is the chat reported for scam, clients show a warning to the user.
	IsScam *bool `json:"is_scam,omitempty"`

	// IsVerified *Optional*. Is the chat verified by Telegram, clients show a verified batch.
	IsVerified *bool `json:"is_verified,omitempty"`

	// LastName *Optional*. Last name of the other party in a private chat
	LastName *string `json:"last_name,omitempty"`

	// LinkedChatId *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	LinkedChatId *int `json:"linked_chat_id,omitempty"`

	// Location Represents a location to which a chat is connected.
	Location *ChatLocation `json:"location,omitempty"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions *ChatPermissions `json:"permissions,omitempty"`

	// Photo This object represents a chat photo.
	Photo *ChatPhoto `json:"photo,omitempty"`

	// PinnedMessage This object represents a message.
	PinnedMessage *Message `json:"pinned_message,omitempty"`

	// SlowModeDelay *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	SlowModeDelay *int `json:"slow_mode_delay,omitempty"`

	// StickerSetName *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
	StickerSetName *string `json:"sticker_set_name,omitempty"`

	// Title *Optional*. Title, for supergroups, channels and group chats
	Title *string `json:"title,omitempty"`

	// Type Type of chat, can be either “private”, “group”, “supergroup” or “channel”
	Type ChatType `json:"type"`

	// Username *Optional*. Username, for private chats, supergroups and channels if available
	Username *string `json:"username,omitempty"`
}

// ChatType Type of chat, can be either “private”, “group”, “supergroup” or “channel”
type ChatType string

// ChatLocation Represents a location to which a chat is connected.
type ChatLocation struct {
	// Address Location address; 1-64 characters, as defined by the chat owner
	Address string `json:"address"`

	// Location This object represents a point on the map.
	Location Location `json:"location"`
}

// ChatMember This object contains information about one member of a chat.
type ChatMember struct {
	// CanAddWebPagePreviews *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
	CanAddWebPagePreviews *bool `json:"can_add_web_page_previews,omitempty"`

	// CanBeEdited *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
	CanBeEdited *bool `json:"can_be_edited,omitempty"`

	// CanChangeInfo *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
	CanChangeInfo *bool `json:"can_change_info,omitempty"`

	// CanDeleteMessages *Optional*. Administrators only. True, if the administrator can delete messages of other users
	CanDeleteMessages *bool `json:"can_delete_messages,omitempty"`

	// CanEditMessages *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
	CanEditMessages *bool `json:"can_edit_messages,omitempty"`

	// CanInviteUsers *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
	CanInviteUsers *bool `json:"can_invite_users,omitempty"`

	// CanPinMessages *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
	CanPinMessages *bool `json:"can_pin_messages,omitempty"`

	// CanPostMessages *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
	CanPostMessages *bool `json:"can_post_messages,omitempty"`

	// CanPromoteMembers *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
	CanPromoteMembers *bool `json:"can_promote_members,omitempty"`

	// CanRestrictMembers *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers *bool `json:"can_restrict_members,omitempty"`

	// CanSendMediaMessages *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
	CanSendMediaMessages *bool `json:"can_send_media_messages,omitempty"`

	// CanSendMessages *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
	CanSendMessages *bool `json:"can_send_messages,omitempty"`

	// CanSendOtherMessages *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
	CanSendOtherMessages *bool `json:"can_send_other_messages,omitempty"`

	// CanSendPolls *Optional*. Restricted only. True, if the user is allowed to send polls
	CanSendPolls *bool `json:"can_send_polls,omitempty"`

	// CustomTitle *Optional*. Owner and administrators only. Custom title for this user
	CustomTitle *string `json:"custom_title,omitempty"`

	// Inviter This object represents a Telegram user or bot.
	Inviter *User `json:"inviter,omitempty"`

	// IsAnonymous *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
	IsAnonymous *bool `json:"is_anonymous,omitempty"`

	// IsMember *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
	IsMember *bool `json:"is_member,omitempty"`

	// JoinedDate *Optional*. Time when the user joined the group. unix time
	JoinedDate *int `json:"joined_date,omitempty"`

	// Status The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
	Status ChatMemberStatus `json:"status"`

	// UntilDate *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
	UntilDate *int `json:"until_date,omitempty"`

	// User This object represents a Telegram user or bot.
	User User `json:"user"`
}

// ChatMemberStatus The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
type ChatMemberStatus string

// ChatPermissions Describes actions that a non-administrator user is allowed to take in a chat.
type ChatPermissions struct {
	// CanAddWebPagePreviews *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
	CanAddWebPagePreviews *bool `json:"can_add_web_page_previews,omitempty"`

	// CanChangeInfo *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
	CanChangeInfo *bool `json:"can_change_info,omitempty"`

	// CanInviteUsers *Optional*. True, if the user is allowed to invite new users to the chat
	CanInviteUsers *bool `json:"can_invite_users,omitempty"`

	// CanPinMessages *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
	CanPinMessages *bool `json:"can_pin_messages,omitempty"`

	// CanSendMediaMessages *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
	CanSendMediaMessages *bool `json:"can_send_media_messages,omitempty"`

	// CanSendMessages *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
	CanSendMessages *bool `json:"can_send_messages,omitempty"`

	// CanSendOtherMessages *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
	CanSendOtherMessages *bool `json:"can_send_other_messages,omitempty"`

	// CanSendPolls *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
	CanSendPolls *bool `json:"can_send_polls,omitempty"`
}

// ChatPhoto This object represents a chat photo.
type ChatPhoto struct {
	// BigFileId File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
	BigFileId string `json:"big_file_id"`

	// BigFileUniqueId Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	BigFileUniqueId string `json:"big_file_unique_id"`

	// SmallFileId File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
	SmallFileId string `json:"small_file_id"`

	// SmallFileUniqueId Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	SmallFileUniqueId string `json:"small_file_unique_id"`
}

// ChosenInlineResult Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
type ChosenInlineResult struct {
	// From This object represents a Telegram user or bot.
	From User `json:"from"`

	// InlineMessageId *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// Location This object represents a point on the map.
	Location *Location `json:"location,omitempty"`

	// Query The query that was used to obtain the result
	Query string `json:"query"`

	// ResultId The unique identifier for the result that was chosen
	ResultId string `json:"result_id"`
}

// Contact This object represents a phone contact.
type Contact struct {
	// FirstName Contact's first name
	FirstName string `json:"first_name"`

	// LastName *Optional*. Contact's last name
	LastName *string `json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `json:"phone_number"`

	// UserId *Optional*. Contact's user identifier in Telegram
	UserId *int `json:"user_id,omitempty"`

	// Vcard *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
	Vcard *string `json:"vcard,omitempty"`
}

// Dice This object represents an animated emoji that displays a random value.
type Dice struct {
	// Emoji Emoji on which the dice throw animation is based
	Emoji string `json:"emoji"`

	// Value Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
	Value int `json:"value"`
}

// Document This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
type Document struct {
	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileName *Optional*. Original filename as defined by sender
	FileName *string `json:"file_name,omitempty"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// MimeType *Optional*. MIME type of the file as defined by sender
	MimeType *string `json:"mime_type,omitempty"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`
}

// EncryptedCredentials Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
type EncryptedCredentials struct {
	// Data Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
	Data string `json:"data"`

	// Hash Base64-encoded data hash for data authentication
	Hash string `json:"hash"`

	// Secret Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
	Secret string `json:"secret"`
}

// EncryptedPassportElement Contains information about documents or other Telegram Passport elements shared with the bot by the user.
type EncryptedPassportElement struct {
	// Data *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
	Data *string `json:"data,omitempty"`

	// Email *Optional*. User's verified email address, available only for “email” type
	Email *string `json:"email,omitempty"`

	// Files *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
	Files *[]PassportFile `json:"files,omitempty"`

	// FrontSide This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
	FrontSide *PassportFile `json:"front_side,omitempty"`

	// Hash Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
	Hash string `json:"hash"`

	// PhoneNumber *Optional*. User's verified phone number, available only for “phone\_number” type
	PhoneNumber *string `json:"phone_number,omitempty"`

	// ReverseSide This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
	ReverseSide *PassportFile `json:"reverse_side,omitempty"`

	// Selfie This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
	Selfie *PassportFile `json:"selfie,omitempty"`

	// Translation *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
	Translation *[]PassportFile `json:"translation,omitempty"`

	// Type Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
	Type EncryptedPassportElementType `json:"type"`
}

// EncryptedPassportElementType Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
type EncryptedPassportElementType string

// Error defines model for Error.
type Error struct {
	Description string `json:"description"`
	ErrorCode   int    `json:"error_code"`
	Ok          bool   `json:"ok"`

	// Parameters Contains information about why a request was unsuccessful.
	Parameters *ResponseParameters `json:"parameters,omitempty"`
}

// File This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
//
// Maximum file size to download is 20 MB
type File struct {
	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FilePath *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
	FilePath *string `json:"file_path,omitempty"`

	// FileSize *Optional*. File size, if known
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
}

// ForceReply Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
type ForceReply struct {
	// ForceReply Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
	ForceReply bool `json:"force_reply"`

	// Selective *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
	Selective *bool `json:"selective,omitempty"`
}

// Game This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
type Game struct {
	// Animation This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
	Animation *Animation `json:"animation,omitempty"`

	// Description Description of the game
	Description string `json:"description"`

	// Photo Photo that will be displayed in the game message in chats.
	Photo []PhotoSize `json:"photo"`

	// Text *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
	Text *string `json:"text,omitempty"`

	// TextEntities *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
	TextEntities *[]MessageEntity `json:"text_entities,omitempty"`

	// Title Title of the game
	Title string `json:"title"`
}

// GameHighScore This object represents one row of the high scores table for a game.
type GameHighScore struct {
	// Position Position in high score table for the game
	Position int `json:"position"`

	// Score Score
	Score int `json:"score"`

	// User This object represents a Telegram user or bot.
	User User `json:"user"`
}

// InlineKeyboardButton This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
type InlineKeyboardButton struct {
	// CallbackData *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
	CallbackData *string `json:"callback_data,omitempty"`

	// CallbackGame A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
	CallbackGame *CallbackGame `json:"callback_game,omitempty"`

	// LoginUrl This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
	//
	// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
	//
	// Sample bot: [@discussbot](https://t.me/discussbot)
	LoginUrl *LoginUrl `json:"login_url,omitempty"`

	// Pay *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).
	//
	// **NOTE:** This type of button **must** always be the first button in the first row.
	Pay *bool `json:"pay,omitempty"`

	// SwitchInlineQuery *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.
	//
	// **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
	SwitchInlineQuery *string `json:"switch_inline_query,omitempty"`

	// SwitchInlineQueryCurrentChat *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.
	//
	// This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
	SwitchInlineQueryCurrentChat *string `json:"switch_inline_query_current_chat,omitempty"`

	// Text Label text on the button
	Text string `json:"text"`

	// Url *Optional*. HTTP or tg:// url to be opened when button is pressed
	Url *string `json:"url,omitempty"`
}

// InlineKeyboardMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
type InlineKeyboardMarkup struct {
	// InlineKeyboard Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard"`
}

// InlineQuery This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
type InlineQuery struct {
	// From This object represents a Telegram user or bot.
	From User `json:"from"`

	// Id Unique identifier for this query
	Id string `json:"id"`

	// Location This object represents a point on the map.
	Location *Location `json:"location,omitempty"`

	// Offset Offset of the results to be returned, can be controlled by the bot
	Offset string `json:"offset"`

	// Query Text of the query (up to 256 characters)
	Query string `json:"query"`
}

// InlineQueryResult This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
type InlineQueryResult struct {
	union json.RawMessage
}

// InlineQueryResultArticle Represents a link to an article or web page.
type InlineQueryResultArticle struct {
	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// HideUrl *Optional*. Pass *True*, if you don't want the URL to be shown in the message
	HideUrl *bool `json:"hide_url,omitempty"`

	// Id Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent InputMessageContent `json:"input_message_content"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbHeight *Optional*. Thumbnail height
	ThumbHeight *int `json:"thumb_height,omitempty"`

	// ThumbUrl *Optional*. Url of the thumbnail for the result
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// ThumbWidth *Optional*. Thumbnail width
	ThumbWidth *int `json:"thumb_width,omitempty"`

	// Title Title of the result
	Title string `json:"title"`

	// Type Type of the result, must be *article*
	Type string `json:"type"`

	// Url *Optional*. URL of the result
	Url *string `json:"url,omitempty"`
}

// InlineQueryResultAudio Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
type InlineQueryResultAudio struct {
	// AudioDuration *Optional*. Audio duration in seconds
	AudioDuration *int `json:"audio_duration,omitempty"`

	// AudioUrl A valid URL for the audio file
	AudioUrl string `json:"audio_url"`

	// Caption *Optional*. Caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Performer *Optional*. Performer
	Performer *string `json:"performer,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title Title
	Title string `json:"title"`

	// Type Type of the result, must be *audio*
	Type string `json:"type"`
}

// InlineQueryResultCachedAudio Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
type InlineQueryResultCachedAudio struct {
	// AudioFileId A valid file identifier for the audio file
	AudioFileId string `json:"audio_file_id"`

	// Caption *Optional*. Caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Type Type of the result, must be *audio*
	Type string `json:"type"`
}

// InlineQueryResultCachedDocument Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
type InlineQueryResultCachedDocument struct {
	// Caption *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// DocumentFileId A valid file identifier for the file
	DocumentFileId string `json:"document_file_id"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title Title for the result
	Title string `json:"title"`

	// Type Type of the result, must be *document*
	Type string `json:"type"`
}

// InlineQueryResultCachedGif Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
type InlineQueryResultCachedGif struct {
	// Caption *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// GifFileId A valid file identifier for the GIF file
	GifFileId string `json:"gif_file_id"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *gif*
	Type string `json:"type"`
}

// InlineQueryResultCachedMpeg4Gif Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
type InlineQueryResultCachedMpeg4Gif struct {
	// Caption *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// Mpeg4FileId A valid file identifier for the MP4 file
	Mpeg4FileId string `json:"mpeg4_file_id"`

	// ParseMode *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *mpeg4\_gif*
	Type string `json:"type"`
}

// InlineQueryResultCachedPhoto Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
type InlineQueryResultCachedPhoto struct {
	// Caption *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// PhotoFileId A valid file identifier of the photo
	PhotoFileId string `json:"photo_file_id"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *photo*
	Type string `json:"type"`
}

// InlineQueryResultCachedSticker Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
type InlineQueryResultCachedSticker struct {
	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// StickerFileId A valid file identifier of the sticker
	StickerFileId string `json:"sticker_file_id"`

	// Type Type of the result, must be *sticker*
	Type string `json:"type"`
}

// InlineQueryResultCachedVideo Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
type InlineQueryResultCachedVideo struct {
	// Caption *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title Title for the result
	Title string `json:"title"`

	// Type Type of the result, must be *video*
	Type string `json:"type"`

	// VideoFileId A valid file identifier for the video file
	VideoFileId string `json:"video_file_id"`
}

// InlineQueryResultCachedVoice Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
type InlineQueryResultCachedVoice struct {
	// Caption *Optional*. Caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title Voice message title
	Title string `json:"title"`

	// Type Type of the result, must be *voice*
	Type string `json:"type"`

	// VoiceFileId A valid file identifier for the voice message
	VoiceFileId string `json:"voice_file_id"`
}

// InlineQueryResultContact Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
type InlineQueryResultContact struct {
	// FirstName Contact's first name
	FirstName string `json:"first_name"`

	// Id Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// LastName *Optional*. Contact's last name
	LastName *string `json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `json:"phone_number"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbHeight *Optional*. Thumbnail height
	ThumbHeight *int `json:"thumb_height,omitempty"`

	// ThumbUrl *Optional*. Url of the thumbnail for the result
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// ThumbWidth *Optional*. Thumbnail width
	ThumbWidth *int `json:"thumb_width,omitempty"`

	// Type Type of the result, must be *contact*
	Type string `json:"type"`

	// Vcard *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
	Vcard *string `json:"vcard,omitempty"`
}

// InlineQueryResultDocument Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
type InlineQueryResultDocument struct {
	// Caption *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// DocumentUrl A valid URL for the file
	DocumentUrl string `json:"document_url"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// MimeType Mime type of the content of the file, either “application/pdf” or “application/zip”
	MimeType InlineQueryResultDocumentMimeType `json:"mime_type"`

	// ParseMode *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbHeight *Optional*. Thumbnail height
	ThumbHeight *int `json:"thumb_height,omitempty"`

	// ThumbUrl *Optional*. URL of the thumbnail (jpeg only) for the file
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// ThumbWidth *Optional*. Thumbnail width
	ThumbWidth *int `json:"thumb_width,omitempty"`

	// Title Title for the result
	Title string `json:"title"`

	// Type Type of the result, must be *document*
	Type string `json:"type"`
}

// InlineQueryResultDocumentMimeType Mime type of the content of the file, either “application/pdf” or “application/zip”
type InlineQueryResultDocumentMimeType string

// InlineQueryResultGame Represents a [Game](https://core.telegram.org/bots/api/#games).
type InlineQueryResultGame struct {
	// GameShortName Short name of the game
	GameShortName string `json:"game_short_name"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Type Type of the result, must be *game*
	Type string `json:"type"`
}

// InlineQueryResultGif Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
type InlineQueryResultGif struct {
	// Caption *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// GifDuration *Optional*. Duration of the GIF
	GifDuration *int `json:"gif_duration,omitempty"`

	// GifHeight *Optional*. Height of the GIF
	GifHeight *int `json:"gif_height,omitempty"`

	// GifUrl A valid URL for the GIF file. File size must not exceed 1MB
	GifUrl string `json:"gif_url"`

	// GifWidth *Optional*. Width of the GIF
	GifWidth *int `json:"gif_width,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbMimeType *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
	ThumbMimeType *InlineQueryResultGifThumbMimeType `json:"thumb_mime_type,omitempty"`

	// ThumbUrl URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbUrl string `json:"thumb_url"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *gif*
	Type string `json:"type"`
}

// InlineQueryResultGifThumbMimeType *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
type InlineQueryResultGifThumbMimeType string

// InlineQueryResultLocation Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
type InlineQueryResultLocation struct {
	// Heading *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Id Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// Latitude Location latitude in degrees
	Latitude float32 `json:"latitude"`

	// LivePeriod *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod *int `json:"live_period,omitempty"`

	// Longitude Location longitude in degrees
	Longitude float32 `json:"longitude"`

	// ProximityAlertRadius *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbHeight *Optional*. Thumbnail height
	ThumbHeight *int `json:"thumb_height,omitempty"`

	// ThumbUrl *Optional*. Url of the thumbnail for the result
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// ThumbWidth *Optional*. Thumbnail width
	ThumbWidth *int `json:"thumb_width,omitempty"`

	// Title Location title
	Title string `json:"title"`

	// Type Type of the result, must be *location*
	Type string `json:"type"`
}

// InlineQueryResultMpeg4Gif Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
type InlineQueryResultMpeg4Gif struct {
	// Caption *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// Mpeg4Duration *Optional*. Video duration
	Mpeg4Duration *int `json:"mpeg4_duration,omitempty"`

	// Mpeg4Height *Optional*. Video height
	Mpeg4Height *int `json:"mpeg4_height,omitempty"`

	// Mpeg4Url A valid URL for the MP4 file. File size must not exceed 1MB
	Mpeg4Url string `json:"mpeg4_url"`

	// Mpeg4Width *Optional*. Video width
	Mpeg4Width *int `json:"mpeg4_width,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbMimeType *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
	ThumbMimeType *InlineQueryResultMpeg4GifThumbMimeType `json:"thumb_mime_type,omitempty"`

	// ThumbUrl URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbUrl string `json:"thumb_url"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *mpeg4\_gif*
	Type string `json:"type"`
}

// InlineQueryResultMpeg4GifThumbMimeType *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
type InlineQueryResultMpeg4GifThumbMimeType string

// InlineQueryResultPhoto Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
type InlineQueryResultPhoto struct {
	// Caption *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// PhotoHeight *Optional*. Height of the photo
	PhotoHeight *int `json:"photo_height,omitempty"`

	// PhotoUrl A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
	PhotoUrl string `json:"photo_url"`

	// PhotoWidth *Optional*. Width of the photo
	PhotoWidth *int `json:"photo_width,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbUrl URL of the thumbnail for the photo
	ThumbUrl string `json:"thumb_url"`

	// Title *Optional*. Title for the result
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *photo*
	Type string `json:"type"`
}

// InlineQueryResultVenue Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
type InlineQueryResultVenue struct {
	// Address Address of the venue
	Address string `json:"address"`

	// FoursquareId *Optional*. Foursquare identifier of the venue if known
	FoursquareId *string `json:"foursquare_id,omitempty"`

	// FoursquareType *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `json:"foursquare_type,omitempty"`

	// GooglePlaceId *Optional*. Google Places identifier of the venue
	GooglePlaceId *string `json:"google_place_id,omitempty"`

	// GooglePlaceType *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `json:"google_place_type,omitempty"`

	// Id Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// Latitude Latitude of the venue location in degrees
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the venue location in degrees
	Longitude float32 `json:"longitude"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbHeight *Optional*. Thumbnail height
	ThumbHeight *int `json:"thumb_height,omitempty"`

	// ThumbUrl *Optional*. Url of the thumbnail for the result
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// ThumbWidth *Optional*. Thumbnail width
	ThumbWidth *int `json:"thumb_width,omitempty"`

	// Title Title of the venue
	Title string `json:"title"`

	// Type Type of the result, must be *venue*
	Type string `json:"type"`
}

// InlineQueryResultVideo Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
//
// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
type InlineQueryResultVideo struct {
	// Caption *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Description *Optional*. Short description of the result
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// MimeType Mime type of the content of video url, “text/html” or “video/mp4”
	MimeType string `json:"mime_type"`

	// ParseMode *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ThumbUrl URL of the thumbnail (jpeg only) for the video
	ThumbUrl string `json:"thumb_url"`

	// Title Title for the result
	Title string `json:"title"`

	// Type Type of the result, must be *video*
	Type string `json:"type"`

	// VideoDuration *Optional*. Video duration in seconds
	VideoDuration *int `json:"video_duration,omitempty"`

	// VideoHeight *Optional*. Video height
	VideoHeight *int `json:"video_height,omitempty"`

	// VideoUrl A valid URL for the embedded video player or video file
	VideoUrl string `json:"video_url"`

	// VideoWidth *Optional*. Video width
	VideoWidth *int `json:"video_width,omitempty"`
}

// InlineQueryResultVoice Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
type InlineQueryResultVoice struct {
	// Caption *Optional*. Caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Id Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`

	// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`

	// ParseMode *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Title Recording title
	Title string `json:"title"`

	// Type Type of the result, must be *voice*
	Type string `json:"type"`

	// VoiceDuration *Optional*. Recording duration in seconds
	VoiceDuration *int `json:"voice_duration,omitempty"`

	// VoiceUrl A valid URL for the voice recording
	VoiceUrl string `json:"voice_url"`
}

// InputContactMessageContent Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
type InputContactMessageContent struct {
	// FirstName Contact's first name
	FirstName string `json:"first_name"`

	// LastName *Optional*. Contact's last name
	LastName *string `json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `json:"phone_number"`

	// Vcard *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
	Vcard *string `json:"vcard,omitempty"`
}

// InputFile This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
type InputFile = interface{}

// InputLocationMessageContent Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
type InputLocationMessageContent struct {
	// Heading *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location in degrees
	Latitude float32 `json:"latitude"`

	// LivePeriod *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod *int `json:"live_period,omitempty"`

	// Longitude Longitude of the location in degrees
	Longitude float32 `json:"longitude"`

	// ProximityAlertRadius *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`
}

// InputMedia This object represents the content of a media message to be sent. It should be one of
type InputMedia struct {
	union json.RawMessage
}

// InputMediaAnimation Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
type InputMediaAnimation struct {
	// Caption *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Duration *Optional*. Animation duration
	Duration *int `json:"duration,omitempty"`

	// Height *Optional*. Animation height
	Height *int `json:"height,omitempty"`

	// Media File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Media string `json:"media"`

	// ParseMode *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *InputMediaAnimation_Thumb `json:"thumb,omitempty"`

	// Type Type of the result, must be *animation*
	Type string `json:"type"`

	// Width *Optional*. Animation width
	Width *int `json:"width,omitempty"`
}

// InputMediaAnimationThumb1 defines model for .
type InputMediaAnimationThumb1 = string

// InputMediaAnimation_Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
type InputMediaAnimation_Thumb struct {
	union json.RawMessage
}

// InputMediaAudio Represents an audio file to be treated as music to be sent.
type InputMediaAudio struct {
	// Caption *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Duration *Optional*. Duration of the audio in seconds
	Duration *int `json:"duration,omitempty"`

	// Media File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Media string `json:"media"`

	// ParseMode *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Performer *Optional*. Performer of the audio
	Performer *string `json:"performer,omitempty"`

	// Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *InputMediaAudio_Thumb `json:"thumb,omitempty"`

	// Title *Optional*. Title of the audio
	Title *string `json:"title,omitempty"`

	// Type Type of the result, must be *audio*
	Type string `json:"type"`
}

// InputMediaAudioThumb1 defines model for .
type InputMediaAudioThumb1 = string

// InputMediaAudio_Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
type InputMediaAudio_Thumb struct {
	union json.RawMessage
}

// InputMediaDocument Represents a general file to be sent.
type InputMediaDocument struct {
	// Caption *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// DisableContentTypeDetection *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
	DisableContentTypeDetection *bool `json:"disable_content_type_detection,omitempty"`

	// Media File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Media string `json:"media"`

	// ParseMode *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *InputMediaDocument_Thumb `json:"thumb,omitempty"`

	// Type Type of the result, must be *document*
	Type string `json:"type"`
}

// InputMediaDocumentThumb1 defines model for .
type InputMediaDocumentThumb1 = string

// InputMediaDocument_Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
type InputMediaDocument_Thumb struct {
	union json.RawMessage
}

// InputMediaPhoto Represents a photo to be sent.
type InputMediaPhoto struct {
	// Caption *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Media File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Media string `json:"media"`

	// ParseMode *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Type Type of the result, must be *photo*
	Type string `json:"type"`
}

// InputMediaVideo Represents a video to be sent.
type InputMediaVideo struct {
	// Caption *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// Duration *Optional*. Video duration
	Duration *int `json:"duration,omitempty"`

	// Height *Optional*. Video height
	Height *int `json:"height,omitempty"`

	// Media File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Media string `json:"media"`

	// ParseMode *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// SupportsStreaming *Optional*. Pass *True*, if the uploaded video is suitable for streaming
	SupportsStreaming *bool `json:"supports_streaming,omitempty"`

	// Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *InputMediaVideo_Thumb `json:"thumb,omitempty"`

	// Type Type of the result, must be *video*
	Type string `json:"type"`

	// Width *Optional*. Video width
	Width *int `json:"width,omitempty"`
}

// InputMediaVideoThumb1 defines model for .
type InputMediaVideoThumb1 = string

// InputMediaVideo_Thumb *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
type InputMediaVideo_Thumb struct {
	union json.RawMessage
}

// InputMessageContent This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
type InputMessageContent struct {
	union json.RawMessage
}

// InputTextMessageContent Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
type InputTextMessageContent struct {
	// DisableWebPagePreview *Optional*. Disables link previews for links in the sent message
	DisableWebPagePreview *bool `json:"disable_web_page_preview,omitempty"`

	// Entities *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// MessageText Text of the message to be sent, 1-4096 characters
	MessageText string `json:"message_text"`

	// ParseMode *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`
}

// InputVenueMessageContent Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
type InputVenueMessageContent struct {
	// Address Address of the venue
	Address string `json:"address"`

	// FoursquareId *Optional*. Foursquare identifier of the venue, if known
	FoursquareId *string `json:"foursquare_id,omitempty"`

	// FoursquareType *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `json:"foursquare_type,omitempty"`

	// GooglePlaceId *Optional*. Google Places identifier of the venue
	GooglePlaceId *string `json:"google_place_id,omitempty"`

	// GooglePlaceType *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `json:"google_place_type,omitempty"`

	// Latitude Latitude of the venue in degrees
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the venue in degrees
	Longitude float32 `json:"longitude"`

	// Title Name of the venue
	Title string `json:"title"`
}

// Invoice This object contains basic information about an invoice.
type Invoice struct {
	// Currency Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
	Currency string `json:"currency"`

	// Description Product description
	Description string `json:"description"`

	// StartParameter Unique bot deep-linking parameter that can be used to generate this invoice
	StartParameter string `json:"start_parameter"`

	// Title Product name
	Title string `json:"title"`

	// TotalAmount Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
}

// KeyboardButton This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
type KeyboardButton struct {
	// RequestContact *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
	RequestContact *bool `json:"request_contact,omitempty"`

	// RequestLocation *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
	RequestLocation *bool `json:"request_location,omitempty"`

	// RequestPoll This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
	RequestPoll *KeyboardButtonPollType `json:"request_poll,omitempty"`

	// Text Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
	Text string `json:"text"`
}

// KeyboardButtonPollType This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
type KeyboardButtonPollType struct {
	// Type *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
	Type *string `json:"type,omitempty"`
}

// LabeledPrice This object represents a portion of the price for goods or services.
type LabeledPrice struct {
	// Amount Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	Amount int `json:"amount"`

	// Label Portion label
	Label string `json:"label"`
}

// Location This object represents a point on the map.
type Location struct {
	// Heading *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude as defined by sender
	Latitude float32 `json:"latitude"`

	// LivePeriod *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
	LivePeriod *int `json:"live_period,omitempty"`

	// Longitude Longitude as defined by sender
	Longitude float32 `json:"longitude"`

	// ProximityAlertRadius *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`
}

// LoginUrl This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
//
// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
//
// Sample bot: [@discussbot](https://t.me/discussbot)
type LoginUrl struct {
	// BotUsername *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
	BotUsername *string `json:"bot_username,omitempty"`

	// ForwardText *Optional*. New text of the button in forwarded messages.
	ForwardText *string `json:"forward_text,omitempty"`

	// RequestWriteAccess *Optional*. Pass True to request the permission for your bot to send messages to the user.
	RequestWriteAccess *bool `json:"request_write_access,omitempty"`

	// Url An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
	//
	// **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
	Url string `json:"url"`
}

// MaskPosition This object describes the position on faces where a mask should be placed by default.
type MaskPosition struct {
	// Point The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
	Point MaskPositionPoint `json:"point"`

	// Scale Mask scaling coefficient. For example, 2.0 means double size.
	Scale float32 `json:"scale"`

	// XShift Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
	XShift float32 `json:"x_shift"`

	// YShift Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
	YShift float32 `json:"y_shift"`
}

// MaskPositionPoint The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
type MaskPositionPoint string

// Message This object represents a message.
type Message struct {
	// Animation This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
	Animation *Animation `json:"animation,omitempty"`

	// Audio This object represents an audio file to be treated as music by the Telegram clients.
	Audio *Audio `json:"audio,omitempty"`

	// AuthorSignature *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
	AuthorSignature *string `json:"author_signature,omitempty"`

	// Caption *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChannelChatCreated *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
	ChannelChatCreated *bool `json:"channel_chat_created,omitempty"`

	// Chat This object represents a chat.
	Chat Chat `json:"chat"`

	// ConnectedWebsite *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
	ConnectedWebsite *string `json:"connected_website,omitempty"`

	// Contact This object represents a phone contact.
	Contact *Contact `json:"contact,omitempty"`

	// Date Date the message was sent in Unix time
	Date int `json:"date"`

	// DeleteChatPhoto *Optional*. Service message: the chat photo was deleted
	DeleteChatPhoto *bool `json:"delete_chat_photo,omitempty"`

	// Dice This object represents an animated emoji that displays a random value.
	Dice *Dice `json:"dice,omitempty"`

	// Document This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
	Document *Document `json:"document,omitempty"`

	// EditDate *Optional*. Date the message was last edited in Unix time
	EditDate *int `json:"edit_date,omitempty"`

	// Entities *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// ForwardDate *Optional*. For forwarded messages, date the original message was sent in Unix time
	ForwardDate *int `json:"forward_date,omitempty"`

	// ForwardFrom This object represents a Telegram user or bot.
	ForwardFrom *User `json:"forward_from,omitempty"`

	// ForwardFromChat This object represents a chat.
	ForwardFromChat *Chat `json:"forward_from_chat,omitempty"`

	// ForwardFromMessageId *Optional*. For messages forwarded from channels, identifier of the original message in the channel
	ForwardFromMessageId *int `json:"forward_from_message_id,omitempty"`

	// ForwardSenderName *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
	ForwardSenderName *string `json:"forward_sender_name,omitempty"`

	// ForwardSignature *Optional*. For messages forwarded from channels, signature of the post author if present
	ForwardSignature *string `json:"forward_signature,omitempty"`

	// Forwards *Optional*. How many times the message has been forwarded
	Forwards *int `json:"forwards,omitempty"`

	// From This object represents a Telegram user or bot.
	From *User `json:"from,omitempty"`

	// Game This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
	Game *Game `json:"game,omitempty"`

	// GroupChatCreated *Optional*. Service message: the group has been created
	GroupChatCreated *bool `json:"group_chat_created,omitempty"`

	// Invoice This object contains basic information about an invoice.
	Invoice *Invoice `json:"invoice,omitempty"`

	// IsScheduled *Optional*. Is the message scheduled.
	IsScheduled *bool `json:"is_scheduled,omitempty"`

	// LeftChatMember This object represents a Telegram user or bot.
	LeftChatMember *User `json:"left_chat_member,omitempty"`

	// Location This object represents a point on the map.
	Location *Location `json:"location,omitempty"`

	// MediaGroupId *Optional*. The unique identifier of a media message group this message belongs to
	MediaGroupId *string `json:"media_group_id,omitempty"`

	// MessageId Unique message identifier inside this chat
	MessageId int `json:"message_id"`

	// MessageThreadId *Optional*. The unique identifier of a thread this message belongs to
	MessageThreadId *string `json:"message_thread_id,omitempty"`

	// MigrateFromChatId *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateFromChatId *int `json:"migrate_from_chat_id,omitempty"`

	// MigrateToChatId *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId *int `json:"migrate_to_chat_id,omitempty"`

	// NewChatMembers *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
	NewChatMembers *[]User `json:"new_chat_members,omitempty"`

	// NewChatPhoto *Optional*. A chat photo was change to this value
	NewChatPhoto *[]PhotoSize `json:"new_chat_photo,omitempty"`

	// NewChatTitle *Optional*. A chat title was changed to this value
	NewChatTitle *string `json:"new_chat_title,omitempty"`

	// PassportData Contains information about Telegram Passport data shared with the bot by the user.
	PassportData *PassportData `json:"passport_data,omitempty"`

	// Photo *Optional*. Message is a photo, available sizes of the photo
	Photo *[]PhotoSize `json:"photo,omitempty"`

	// PinnedMessage This object represents a message.
	PinnedMessage *Message `json:"pinned_message,omitempty"`

	// Poll This object contains information about a poll.
	Poll *Poll `json:"poll,omitempty"`

	// ProximityAlertTriggered This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
	ProximityAlertTriggered *ProximityAlertTriggered `json:"proximity_alert_triggered,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessage This object represents a message.
	ReplyToMessage *Message `json:"reply_to_message,omitempty"`

	// ScheduledAt *Optional*. Time the message will be sent.
	ScheduledAt *interface{} `json:"scheduled_at,omitempty"`

	// SenderChat This object represents a chat.
	SenderChat *Chat `json:"sender_chat,omitempty"`

	// Sticker This object represents a sticker.
	Sticker *Sticker `json:"sticker,omitempty"`

	// SuccessfulPayment This object contains basic information about a successful payment.
	SuccessfulPayment *SuccessfulPayment `json:"successful_payment,omitempty"`

	// SupergroupChatCreated *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
	SupergroupChatCreated *bool `json:"supergroup_chat_created,omitempty"`

	// Text *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
	Text *string `json:"text,omitempty"`

	// Venue This object represents a venue.
	Venue *Venue `json:"venue,omitempty"`

	// ViaBot This object represents a Telegram user or bot.
	ViaBot *User `json:"via_bot,omitempty"`

	// Video This object represents a video file.
	Video *Video `json:"video,omitempty"`

	// VideoNote This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
	VideoNote *VideoNote `json:"video_note,omitempty"`

	// Views *Optional*. Amount of views. Only for channel messages.
	Views *int `json:"views,omitempty"`

	// Voice This object represents a voice note.
	Voice *Voice `json:"voice,omitempty"`
}

// MessageEntity This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
type MessageEntity struct {
	// Language *Optional*. For “pre” only, the programming language of the entity text
	Language *string `json:"language,omitempty"`

	// Length Length of the entity in UTF-16 code units
	Length int `json:"length"`

	// Offset Offset in UTF-16 code units to the start of the entity
	Offset int `json:"offset"`

	// Type Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
	Type MessageEntityType `json:"type"`

	// Url *Optional*. For “text\_link” only, url that will be opened after user taps on the text
	Url *string `json:"url,omitempty"`

	// User This object represents a Telegram user or bot.
	User *User `json:"user,omitempty"`
}

// MessageEntityType Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
type MessageEntityType string

// MessageId This object represents a unique message identifier.
type MessageId struct {
	// MessageId Unique message identifier
	MessageId int `json:"message_id"`
}

// OrderInfo This object represents information about an order.
type OrderInfo struct {
	// Email *Optional*. User email
	Email *string `json:"email,omitempty"`

	// Name *Optional*. User name
	Name *string `json:"name,omitempty"`

	// PhoneNumber *Optional*. User's phone number
	PhoneNumber *string `json:"phone_number,omitempty"`

	// ShippingAddress This object represents a shipping address.
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

// PassportData Contains information about Telegram Passport data shared with the bot by the user.
type PassportData struct {
	// Credentials Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
	Credentials EncryptedCredentials `json:"credentials"`

	// Data Array with information about documents and other Telegram Passport elements that was shared with the bot
	Data []EncryptedPassportElement `json:"data"`
}

// PassportElementError This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
type PassportElementError struct {
	union json.RawMessage
}

// PassportElementErrorDataField Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
type PassportElementErrorDataField struct {
	// DataHash Base64-encoded data hash
	DataHash string `json:"data_hash"`

	// FieldName Name of the data field which has the error
	FieldName string `json:"field_name"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *data*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
	Type PassportElementErrorDataFieldType `json:"type"`
}

// PassportElementErrorDataFieldType The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
type PassportElementErrorDataFieldType string

// PassportElementErrorFile Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
type PassportElementErrorFile struct {
	// FileHash Base64-encoded file hash
	FileHash string `json:"file_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *file*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
	Type PassportElementErrorFileType `json:"type"`
}

// PassportElementErrorFileType The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
type PassportElementErrorFileType string

// PassportElementErrorFiles Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
type PassportElementErrorFiles struct {
	// FileHashes List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *files*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
	Type PassportElementErrorFilesType `json:"type"`
}

// PassportElementErrorFilesType The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
type PassportElementErrorFilesType string

// PassportElementErrorFrontSide Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
type PassportElementErrorFrontSide struct {
	// FileHash Base64-encoded hash of the file with the front side of the document
	FileHash string `json:"file_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *front\_side*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
	Type PassportElementErrorFrontSideType `json:"type"`
}

// PassportElementErrorFrontSideType The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
type PassportElementErrorFrontSideType string

// PassportElementErrorReverseSide Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
type PassportElementErrorReverseSide struct {
	// FileHash Base64-encoded hash of the file with the reverse side of the document
	FileHash string `json:"file_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *reverse\_side*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
	Type PassportElementErrorReverseSideType `json:"type"`
}

// PassportElementErrorReverseSideType The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
type PassportElementErrorReverseSideType string

// PassportElementErrorSelfie Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
type PassportElementErrorSelfie struct {
	// FileHash Base64-encoded hash of the file with the selfie
	FileHash string `json:"file_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *selfie*
	Source string `json:"source"`

	// Type The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
	Type PassportElementErrorSelfieType `json:"type"`
}

// PassportElementErrorSelfieType The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
type PassportElementErrorSelfieType string

// PassportElementErrorTranslationFile Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
type PassportElementErrorTranslationFile struct {
	// FileHash Base64-encoded file hash
	FileHash string `json:"file_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *translation\_file*
	Source string `json:"source"`

	// Type Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
	Type PassportElementErrorTranslationFileType `json:"type"`
}

// PassportElementErrorTranslationFileType Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
type PassportElementErrorTranslationFileType string

// PassportElementErrorTranslationFiles Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
type PassportElementErrorTranslationFiles struct {
	// FileHashes List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *translation\_files*
	Source string `json:"source"`

	// Type Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
	Type PassportElementErrorTranslationFilesType `json:"type"`
}

// PassportElementErrorTranslationFilesType Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
type PassportElementErrorTranslationFilesType string

// PassportElementErrorUnspecified Represents an issue in an unspecified place. The error is considered resolved when new data is added.
type PassportElementErrorUnspecified struct {
	// ElementHash Base64-encoded element hash
	ElementHash string `json:"element_hash"`

	// Message Error message
	Message string `json:"message"`

	// Source Error source, must be *unspecified*
	Source string `json:"source"`

	// Type Type of element of the user's Telegram Passport which has the issue
	Type string `json:"type"`
}

// PassportFile This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
type PassportFile struct {
	// FileDate Unix time when the file was uploaded
	FileDate int `json:"file_date"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileSize File size
	FileSize int `json:"file_size"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
}

// PhotoSize This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
type PhotoSize struct {
	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// Height Photo height
	Height int `json:"height"`

	// Width Photo width
	Width int `json:"width"`
}

// Poll This object contains information about a poll.
type Poll struct {
	// AllowsMultipleAnswers True, if the poll allows multiple answers
	AllowsMultipleAnswers bool `json:"allows_multiple_answers"`

	// CloseDate *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
	CloseDate *int `json:"close_date,omitempty"`

	// CorrectOptionId *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	CorrectOptionId *int `json:"correct_option_id,omitempty"`

	// Explanation *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
	Explanation *string `json:"explanation,omitempty"`

	// ExplanationEntities *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
	ExplanationEntities *[]MessageEntity `json:"explanation_entities,omitempty"`

	// Id Unique poll identifier
	Id string `json:"id"`

	// IsAnonymous True, if the poll is anonymous
	IsAnonymous bool `json:"is_anonymous"`

	// IsClosed True, if the poll is closed
	IsClosed bool `json:"is_closed"`

	// OpenPeriod *Optional*. Amount of time in seconds the poll will be active after creation
	OpenPeriod *int `json:"open_period,omitempty"`

	// Options List of poll options
	Options []PollOption `json:"options"`

	// Question Poll question, 1-255 characters
	Question string `json:"question"`

	// TotalVoterCount Total number of users that voted in the poll
	TotalVoterCount int `json:"total_voter_count"`

	// Type Poll type, currently can be “regular” or “quiz”
	Type string `json:"type"`
}

// PollAnswer This object represents an answer of a user in a non-anonymous poll.
type PollAnswer struct {
	// OptionIds 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
	OptionIds []int `json:"option_ids"`

	// PollId Unique poll identifier
	PollId string `json:"poll_id"`

	// User This object represents a Telegram user or bot.
	User User `json:"user"`
}

// PollOption This object contains information about one answer option in a poll.
type PollOption struct {
	// Text Option text, 1-100 characters
	Text string `json:"text"`

	// VoterCount Number of users that voted for this option
	VoterCount int `json:"voter_count"`
}

// PreCheckoutQuery This object contains information about an incoming pre-checkout query.
type PreCheckoutQuery struct {
	// Currency Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
	Currency string `json:"currency"`

	// From This object represents a Telegram user or bot.
	From User `json:"from"`

	// Id Unique query identifier
	Id string `json:"id"`

	// InvoicePayload Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload"`

	// OrderInfo This object represents information about an order.
	OrderInfo *OrderInfo `json:"order_info,omitempty"`

	// ShippingOptionId *Optional*. Identifier of the shipping option chosen by the user
	ShippingOptionId *string `json:"shipping_option_id,omitempty"`

	// TotalAmount Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
}

// ProximityAlertTriggered This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
type ProximityAlertTriggered struct {
	// Distance The distance between the users
	Distance int `json:"distance"`

	// Traveler This object represents a Telegram user or bot.
	Traveler User `json:"traveler"`

	// Watcher This object represents a Telegram user or bot.
	Watcher User `json:"watcher"`
}

// Proxy Contains a proxy definition.
type Proxy struct {
	// HttpOnly Whether an Http proxy can only use Http requests (and does not support HTTP CONNECT method).
	HttpOnly *bool `json:"http_only,omitempty"`

	// Id Unique ID of the proxy
	Id int `json:"id"`

	// IsEnabled Whether the bot is being used at the moment.
	IsEnabled bool `json:"is_enabled"`

	// LastUsedDate Unix timestamp indicating when the proxy was used for the last time.
	LastUsedDate int `json:"last_used_date"`

	// Password Password to authenticate to the proxy server.
	Password *string `json:"password,omitempty"`

	// Port TCP port where the proxy server listens.
	Port int `json:"port"`

	// Secret Secret to authenticate to the proxy server.
	Secret *string `json:"secret,omitempty"`

	// Server Hostname or IP of the proxy server.
	Server string `json:"server"`

	// Type Type of proxy server, either socks5, mtproto or http.
	Type string `json:"type"`

	// Username Username to authenticate to the proxy server.
	Username *string `json:"username,omitempty"`
}

// ReplyKeyboardMarkup This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
type ReplyKeyboardMarkup struct {
	// Keyboard Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
	Keyboard [][]KeyboardButton `json:"keyboard"`

	// OneTimeKeyboard *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
	OneTimeKeyboard *bool `json:"one_time_keyboard,omitempty"`

	// ResizeKeyboard *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
	ResizeKeyboard *bool `json:"resize_keyboard,omitempty"`

	// Selective *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
	//
	// *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
	Selective *bool `json:"selective,omitempty"`
}

// ReplyKeyboardRemove Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
type ReplyKeyboardRemove struct {
	// RemoveKeyboard Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
	RemoveKeyboard bool `json:"remove_keyboard"`

	// Selective *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
	//
	// *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
	Selective *bool `json:"selective,omitempty"`
}

// ResponseParameters Contains information about why a request was unsuccessful.
type ResponseParameters struct {
	// MigrateToChatId *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId *int `json:"migrate_to_chat_id,omitempty"`

	// RetryAfter *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
	RetryAfter *int `json:"retry_after,omitempty"`
}

// ShippingAddress This object represents a shipping address.
type ShippingAddress struct {
	// City City
	City string `json:"city"`

	// CountryCode ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`

	// PostCode Address post code
	PostCode string `json:"post_code"`

	// State State, if applicable
	State string `json:"state"`

	// StreetLine1 First line for the address
	StreetLine1 string `json:"street_line1"`

	// StreetLine2 Second line for the address
	StreetLine2 string `json:"street_line2"`
}

// ShippingOption This object represents one shipping option.
type ShippingOption struct {
	// Id Shipping option identifier
	Id string `json:"id"`

	// Prices List of price portions
	Prices []LabeledPrice `json:"prices"`

	// Title Option title
	Title string `json:"title"`
}

// ShippingQuery This object contains information about an incoming shipping query.
type ShippingQuery struct {
	// From This object represents a Telegram user or bot.
	From User `json:"from"`

	// Id Unique query identifier
	Id string `json:"id"`

	// InvoicePayload Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload"`

	// ShippingAddress This object represents a shipping address.
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// Sticker This object represents a sticker.
type Sticker struct {
	// Emoji *Optional*. Emoji associated with the sticker
	Emoji *string `json:"emoji,omitempty"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// Height Sticker height
	Height int `json:"height"`

	// IsAnimated *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
	IsAnimated bool `json:"is_animated"`

	// MaskPosition This object describes the position on faces where a mask should be placed by default.
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`

	// SetName *Optional*. Name of the sticker set to which the sticker belongs
	SetName *string `json:"set_name,omitempty"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Width Sticker width
	Width int `json:"width"`
}

// StickerSet This object represents a sticker set.
type StickerSet struct {
	// ContainsMasks *True*, if the sticker set contains masks
	ContainsMasks bool `json:"contains_masks"`

	// IsAnimated *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
	IsAnimated bool `json:"is_animated"`

	// Name Sticker set name
	Name string `json:"name"`

	// Stickers List of all set stickers
	Stickers []Sticker `json:"stickers"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Title Sticker set title
	Title string `json:"title"`
}

// SuccessfulPayment This object contains basic information about a successful payment.
type SuccessfulPayment struct {
	// Currency Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
	Currency string `json:"currency"`

	// InvoicePayload Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload"`

	// OrderInfo This object represents information about an order.
	OrderInfo *OrderInfo `json:"order_info,omitempty"`

	// ProviderPaymentChargeId Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id"`

	// ShippingOptionId *Optional*. Identifier of the shipping option chosen by the user
	ShippingOptionId *string `json:"shipping_option_id,omitempty"`

	// TelegramPaymentChargeId Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`

	// TotalAmount Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
}

// Update This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.
// At most **one** of the optional parameters can be present in any given update.
type Update struct {
	// CallbackQuery This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`

	// ChannelPost This object represents a message.
	ChannelPost *Message `json:"channel_post,omitempty"`

	// ChosenInlineResult Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
	ChosenInlineResult *ChosenInlineResult `json:"chosen_inline_result,omitempty"`

	// EditedChannelPost This object represents a message.
	EditedChannelPost *Message `json:"edited_channel_post,omitempty"`

	// EditedMessage This object represents a message.
	EditedMessage *Message `json:"edited_message,omitempty"`

	// InlineQuery This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
	InlineQuery *InlineQuery `json:"inline_query,omitempty"`

	// Message This object represents a message.
	Message *Message `json:"message,omitempty"`

	// Poll This object contains information about a poll.
	Poll *Poll `json:"poll,omitempty"`

	// PollAnswer This object represents an answer of a user in a non-anonymous poll.
	PollAnswer *PollAnswer `json:"poll_answer,omitempty"`

	// PreCheckoutQuery This object contains information about an incoming pre-checkout query.
	PreCheckoutQuery *PreCheckoutQuery `json:"pre_checkout_query,omitempty"`

	// ShippingQuery This object contains information about an incoming shipping query.
	ShippingQuery *ShippingQuery `json:"shipping_query,omitempty"`

	// UpdateId The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
	UpdateId int `json:"update_id"`
}

// User This object represents a Telegram user or bot.
type User struct {
	// CanJoinGroups *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
	CanJoinGroups *bool `json:"can_join_groups,omitempty"`

	// CanReadAllGroupMessages *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
	CanReadAllGroupMessages *bool `json:"can_read_all_group_messages,omitempty"`

	// FirstName User's or bot's first name
	FirstName string `json:"first_name"`

	// Id Unique identifier for this user or bot
	Id int `json:"id"`

	// IsBot True, if this user is a bot
	IsBot bool `json:"is_bot"`

	// IsScam *Optional*. Is the user reported for scam, clients show a warning to the user.
	IsScam *bool `json:"is_scam,omitempty"`

	// IsVerified *Optional*. Is the user verified by Telegram, clients show a verified batch.
	IsVerified *bool `json:"is_verified,omitempty"`

	// LanguageCode *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
	LanguageCode *string `json:"language_code,omitempty"`

	// LastName *Optional*. User's or bot's last name
	LastName *string `json:"last_name,omitempty"`

	// SupportsInlineQueries *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
	SupportsInlineQueries *bool `json:"supports_inline_queries,omitempty"`

	// Username *Optional*. User's or bot's username
	Username *string `json:"username,omitempty"`
}

// UserProfilePhotos This object represent a user's profile pictures.
type UserProfilePhotos struct {
	// Photos Requested profile pictures (in up to 4 sizes each)
	Photos [][]PhotoSize `json:"photos"`

	// TotalCount Total number of profile pictures the target user has
	TotalCount int `json:"total_count"`
}

// Venue This object represents a venue.
type Venue struct {
	// Address Address of the venue
	Address string `json:"address"`

	// FoursquareId *Optional*. Foursquare identifier of the venue
	FoursquareId *string `json:"foursquare_id,omitempty"`

	// FoursquareType *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `json:"foursquare_type,omitempty"`

	// GooglePlaceId *Optional*. Google Places identifier of the venue
	GooglePlaceId *string `json:"google_place_id,omitempty"`

	// GooglePlaceType *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `json:"google_place_type,omitempty"`

	// Location This object represents a point on the map.
	Location Location `json:"location"`

	// Title Name of the venue
	Title string `json:"title"`
}

// Video This object represents a video file.
type Video struct {
	// Duration Duration of the video in seconds as defined by sender
	Duration int `json:"duration"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileName *Optional*. Original filename as defined by sender
	FileName *string `json:"file_name,omitempty"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// Height Video height as defined by sender
	Height int `json:"height"`

	// MimeType *Optional*. Mime type of a file as defined by sender
	MimeType *string `json:"mime_type,omitempty"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`

	// Width Video width as defined by sender
	Width int `json:"width"`
}

// VideoNote This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
type VideoNote struct {
	// Duration Duration of the video in seconds as defined by sender
	Duration int `json:"duration"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// Length Video width and height (diameter of the video message) as defined by sender
	Length int `json:"length"`

	// Thumb This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
	Thumb *PhotoSize `json:"thumb,omitempty"`
}

// Voice This object represents a voice note.
type Voice struct {
	// Duration Duration of the audio in seconds as defined by sender
	Duration int `json:"duration"`

	// FileId Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`

	// FileSize *Optional*. File size
	FileSize *int `json:"file_size,omitempty"`

	// FileUniqueId Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`

	// MimeType *Optional*. MIME type of the file as defined by sender
	MimeType *string `json:"mime_type,omitempty"`
}

// WebhookInfo Contains information about the current status of a webhook.
type WebhookInfo struct {
	// AllowedUpdates *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
	AllowedUpdates *[]string `json:"allowed_updates,omitempty"`

	// HasCustomCertificate True, if a custom certificate was provided for webhook certificate checks
	HasCustomCertificate bool `json:"has_custom_certificate"`

	// IpAddress *Optional*. Currently used webhook IP address
	IpAddress *string `json:"ip_address,omitempty"`

	// LastErrorDate *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
	LastErrorDate *int `json:"last_error_date,omitempty"`

	// LastErrorMessage *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
	LastErrorMessage *string `json:"last_error_message,omitempty"`

	// MaxConnections *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
	MaxConnections *int `json:"max_connections,omitempty"`

	// PendingUpdateCount Number of updates awaiting delivery
	PendingUpdateCount int `json:"pending_update_count"`

	// Url Webhook URL, may be empty if webhook is not set up
	Url string `json:"url"`
}

// PostAddChatMemberJSONBody defines parameters for PostAddChatMember.
type PostAddChatMemberJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostAddChatMemberJSONBody_ChatId `json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostAddChatMemberFormdataBody defines parameters for PostAddChatMember.
type PostAddChatMemberFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostAddChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostAddChatMemberMultipartBody defines parameters for PostAddChatMember.
type PostAddChatMemberMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostAddChatMemberMultipartBody_ChatId `json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostAddChatMemberJSONBodyChatId0 defines parameters for PostAddChatMember.
type PostAddChatMemberJSONBodyChatId0 = int

// PostAddChatMemberJSONBodyChatId1 defines parameters for PostAddChatMember.
type PostAddChatMemberJSONBodyChatId1 = string

// PostAddChatMemberJSONBody_ChatId defines parameters for PostAddChatMember.
type PostAddChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostAddChatMemberFormdataBodyChatId0 defines parameters for PostAddChatMember.
type PostAddChatMemberFormdataBodyChatId0 = int

// PostAddChatMemberFormdataBodyChatId1 defines parameters for PostAddChatMember.
type PostAddChatMemberFormdataBodyChatId1 = string

// PostAddChatMemberFormdataBody_ChatId defines parameters for PostAddChatMember.
type PostAddChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostAddChatMemberMultipartBodyChatId0 defines parameters for PostAddChatMember.
type PostAddChatMemberMultipartBodyChatId0 = int

// PostAddChatMemberMultipartBodyChatId1 defines parameters for PostAddChatMember.
type PostAddChatMemberMultipartBodyChatId1 = string

// PostAddChatMemberMultipartBody_ChatId defines parameters for PostAddChatMember.
type PostAddChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostAddProxyJSONBody defines parameters for PostAddProxy.
type PostAddProxyJSONBody struct {
	// HttpOnly Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
	HttpOnly *bool `json:"http_only,omitempty"`

	// Password Password used to authenticate against a Socks5/Http proxy.
	Password *string `json:"password,omitempty"`

	// Port TCP port where the server is listening for incomming connections.
	Port int `json:"port"`

	// Secret Secret used to authenticate against an MTProto proxy.
	Secret *string `json:"secret,omitempty"`

	// Server Server hostname or IP address to reach the proxy server.
	Server string `json:"server"`

	// Type Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
	Type string `json:"type"`

	// Username Username used to authenticate against a Socks5/Http proxy.
	Username *string `json:"username,omitempty"`
}

// PostAddProxyFormdataBody defines parameters for PostAddProxy.
type PostAddProxyFormdataBody struct {
	// HttpOnly Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
	HttpOnly *bool `form:"http_only,omitempty" json:"http_only,omitempty"`

	// Password Password used to authenticate against a Socks5/Http proxy.
	Password *string `form:"password,omitempty" json:"password,omitempty"`

	// Port TCP port where the server is listening for incomming connections.
	Port int `form:"port" json:"port"`

	// Secret Secret used to authenticate against an MTProto proxy.
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Server Server hostname or IP address to reach the proxy server.
	Server string `form:"server" json:"server"`

	// Type Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
	Type string `form:"type" json:"type"`

	// Username Username used to authenticate against a Socks5/Http proxy.
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// PostAddProxyMultipartBody defines parameters for PostAddProxy.
type PostAddProxyMultipartBody struct {
	// HttpOnly Set to true if the proxy only supports HTTP requests (as opposed to transparent TCP connections via HTTP CONNECT).
	HttpOnly *bool `json:"http_only,omitempty"`

	// Password Password used to authenticate against a Socks5/Http proxy.
	Password *string `json:"password,omitempty"`

	// Port TCP port where the server is listening for incomming connections.
	Port int `json:"port"`

	// Secret Secret used to authenticate against an MTProto proxy.
	Secret *string `json:"secret,omitempty"`

	// Server Server hostname or IP address to reach the proxy server.
	Server string `json:"server"`

	// Type Type of proxy to be added. Must be either `mtproto`, `socks5` or `http`. MTProto proxies must provide a `secret` and Socks5/Http proxies can a `username` and `password`.
	Type string `json:"type"`

	// Username Username used to authenticate against a Socks5/Http proxy.
	Username *string `json:"username,omitempty"`
}

// PostAddStickerToSetMultipartBody defines parameters for PostAddStickerToSet.
type PostAddStickerToSetMultipartBody struct {
	// Emojis One or more emoji corresponding to the sticker
	Emojis string `json:"emojis"`

	// MaskPosition This object describes the position on faces where a mask should be placed by default.
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`

	// Name Sticker set name
	Name string `json:"name"`

	// PngSticker **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	PngSticker *PostAddStickerToSetMultipartBody_PngSticker `json:"png_sticker,omitempty"`

	// TgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
	TgsSticker *InputFile `json:"tgs_sticker,omitempty"`

	// UserId User identifier of sticker set owner
	UserId int `json:"user_id"`
}

// PostAddStickerToSetMultipartBodyPngSticker1 defines parameters for PostAddStickerToSet.
type PostAddStickerToSetMultipartBodyPngSticker1 = string

// PostAddStickerToSetMultipartBody_PngSticker defines parameters for PostAddStickerToSet.
type PostAddStickerToSetMultipartBody_PngSticker struct {
	union json.RawMessage
}

// PostAnswerCallbackQueryJSONBody defines parameters for PostAnswerCallbackQuery.
type PostAnswerCallbackQueryJSONBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime *int `json:"cache_time,omitempty"`

	// CallbackQueryId Unique identifier for the query to be answered
	CallbackQueryId string `json:"callback_query_id"`

	// ShowAlert If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
	ShowAlert *bool `json:"show_alert,omitempty"`

	// Text Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
	Text *string `json:"text,omitempty"`

	// Url URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.
	//
	// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
	Url *string `json:"url,omitempty"`
}

// PostAnswerCallbackQueryFormdataBody defines parameters for PostAnswerCallbackQuery.
type PostAnswerCallbackQueryFormdataBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime *int `form:"cache_time,omitempty" json:"cache_time,omitempty"`

	// CallbackQueryId Unique identifier for the query to be answered
	CallbackQueryId string `form:"callback_query_id" json:"callback_query_id"`

	// ShowAlert If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
	ShowAlert *bool `form:"show_alert,omitempty" json:"show_alert,omitempty"`

	// Text Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
	Text *string `form:"text,omitempty" json:"text,omitempty"`

	// Url URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.
	//
	// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
	Url *string `form:"url,omitempty" json:"url,omitempty"`
}

// PostAnswerCallbackQueryMultipartBody defines parameters for PostAnswerCallbackQuery.
type PostAnswerCallbackQueryMultipartBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime *int `json:"cache_time,omitempty"`

	// CallbackQueryId Unique identifier for the query to be answered
	CallbackQueryId string `json:"callback_query_id"`

	// ShowAlert If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
	ShowAlert *bool `json:"show_alert,omitempty"`

	// Text Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
	Text *string `json:"text,omitempty"`

	// Url URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.
	//
	// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
	Url *string `json:"url,omitempty"`
}

// PostAnswerInlineQueryJSONBody defines parameters for PostAnswerInlineQuery.
type PostAnswerInlineQueryJSONBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
	CacheTime *int `json:"cache_time,omitempty"`

	// InlineQueryId Unique identifier for the answered query
	InlineQueryId string `json:"inline_query_id"`

	// IsPersonal Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
	IsPersonal *bool `json:"is_personal,omitempty"`

	// NextOffset Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
	NextOffset *string `json:"next_offset,omitempty"`

	// Results A JSON-serialized array of results for the inline query
	Results []InlineQueryResult `json:"results"`

	// SwitchPmParameter [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.
	//
	// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
	SwitchPmParameter *string `json:"switch_pm_parameter,omitempty"`

	// SwitchPmText If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
	SwitchPmText *string `json:"switch_pm_text,omitempty"`
}

// PostAnswerInlineQueryFormdataBody defines parameters for PostAnswerInlineQuery.
type PostAnswerInlineQueryFormdataBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
	CacheTime *int `form:"cache_time,omitempty" json:"cache_time,omitempty"`

	// InlineQueryId Unique identifier for the answered query
	InlineQueryId string `form:"inline_query_id" json:"inline_query_id"`

	// IsPersonal Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
	IsPersonal *bool `form:"is_personal,omitempty" json:"is_personal,omitempty"`

	// NextOffset Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
	NextOffset *string `form:"next_offset,omitempty" json:"next_offset,omitempty"`

	// Results A JSON-serialized array of results for the inline query
	Results []InlineQueryResult `form:"results" json:"results"`

	// SwitchPmParameter [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.
	//
	// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
	SwitchPmParameter *string `form:"switch_pm_parameter,omitempty" json:"switch_pm_parameter,omitempty"`

	// SwitchPmText If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
	SwitchPmText *string `form:"switch_pm_text,omitempty" json:"switch_pm_text,omitempty"`
}

// PostAnswerInlineQueryMultipartBody defines parameters for PostAnswerInlineQuery.
type PostAnswerInlineQueryMultipartBody struct {
	// CacheTime The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
	CacheTime *int `json:"cache_time,omitempty"`

	// InlineQueryId Unique identifier for the answered query
	InlineQueryId string `json:"inline_query_id"`

	// IsPersonal Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
	IsPersonal *bool `json:"is_personal,omitempty"`

	// NextOffset Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
	NextOffset *string `json:"next_offset,omitempty"`

	// Results A JSON-serialized array of results for the inline query
	Results []InlineQueryResult `json:"results"`

	// SwitchPmParameter [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.
	//
	// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
	SwitchPmParameter *string `json:"switch_pm_parameter,omitempty"`

	// SwitchPmText If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
	SwitchPmText *string `json:"switch_pm_text,omitempty"`
}

// PostAnswerPreCheckoutQueryJSONBody defines parameters for PostAnswerPreCheckoutQuery.
type PostAnswerPreCheckoutQueryJSONBody struct {
	// ErrorMessage Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
	ErrorMessage *string `json:"error_message,omitempty"`

	// Ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
	Ok bool `json:"ok"`

	// PreCheckoutQueryId Unique identifier for the query to be answered
	PreCheckoutQueryId string `json:"pre_checkout_query_id"`
}

// PostAnswerPreCheckoutQueryFormdataBody defines parameters for PostAnswerPreCheckoutQuery.
type PostAnswerPreCheckoutQueryFormdataBody struct {
	// ErrorMessage Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
	ErrorMessage *string `form:"error_message,omitempty" json:"error_message,omitempty"`

	// Ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
	Ok bool `form:"ok" json:"ok"`

	// PreCheckoutQueryId Unique identifier for the query to be answered
	PreCheckoutQueryId string `form:"pre_checkout_query_id" json:"pre_checkout_query_id"`
}

// PostAnswerPreCheckoutQueryMultipartBody defines parameters for PostAnswerPreCheckoutQuery.
type PostAnswerPreCheckoutQueryMultipartBody struct {
	// ErrorMessage Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
	ErrorMessage *string `json:"error_message,omitempty"`

	// Ok Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
	Ok bool `json:"ok"`

	// PreCheckoutQueryId Unique identifier for the query to be answered
	PreCheckoutQueryId string `json:"pre_checkout_query_id"`
}

// PostAnswerShippingQueryJSONBody defines parameters for PostAnswerShippingQuery.
type PostAnswerShippingQueryJSONBody struct {
	// ErrorMessage Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
	ErrorMessage *string `json:"error_message,omitempty"`

	// Ok Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
	Ok bool `json:"ok"`

	// ShippingOptions Required if *ok* is True. A JSON-serialized array of available shipping options.
	ShippingOptions *[]ShippingOption `json:"shipping_options,omitempty"`

	// ShippingQueryId Unique identifier for the query to be answered
	ShippingQueryId string `json:"shipping_query_id"`
}

// PostAnswerShippingQueryFormdataBody defines parameters for PostAnswerShippingQuery.
type PostAnswerShippingQueryFormdataBody struct {
	// ErrorMessage Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
	ErrorMessage *string `form:"error_message,omitempty" json:"error_message,omitempty"`

	// Ok Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
	Ok bool `form:"ok" json:"ok"`

	// ShippingOptions Required if *ok* is True. A JSON-serialized array of available shipping options.
	ShippingOptions *[]ShippingOption `form:"shipping_options,omitempty" json:"shipping_options,omitempty"`

	// ShippingQueryId Unique identifier for the query to be answered
	ShippingQueryId string `form:"shipping_query_id" json:"shipping_query_id"`
}

// PostAnswerShippingQueryMultipartBody defines parameters for PostAnswerShippingQuery.
type PostAnswerShippingQueryMultipartBody struct {
	// ErrorMessage Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
	ErrorMessage *string `json:"error_message,omitempty"`

	// Ok Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
	Ok bool `json:"ok"`

	// ShippingOptions Required if *ok* is True. A JSON-serialized array of available shipping options.
	ShippingOptions *[]ShippingOption `json:"shipping_options,omitempty"`

	// ShippingQueryId Unique identifier for the query to be answered
	ShippingQueryId string `json:"shipping_query_id"`
}

// PostAuthCodeJSONBody defines parameters for PostAuthCode.
type PostAuthCodeJSONBody struct {
	// Code The verification code received via SMS, Telegram message, phone call, or flash call.
	Code int `json:"code"`
}

// PostAuthCodeFormdataBody defines parameters for PostAuthCode.
type PostAuthCodeFormdataBody struct {
	// Code The verification code received via SMS, Telegram message, phone call, or flash call.
	Code int `form:"code" json:"code"`
}

// PostAuthCodeMultipartBody defines parameters for PostAuthCode.
type PostAuthCodeMultipartBody struct {
	// Code The verification code received via SMS, Telegram message, phone call, or flash call.
	Code int `json:"code"`
}

// PostAuthPasswordJSONBody defines parameters for PostAuthPassword.
type PostAuthPasswordJSONBody struct {
	// Password The password to check.
	Password string `json:"password"`
}

// PostAuthPasswordFormdataBody defines parameters for PostAuthPassword.
type PostAuthPasswordFormdataBody struct {
	// Password The password to check.
	Password string `form:"password" json:"password"`
}

// PostAuthPasswordMultipartBody defines parameters for PostAuthPassword.
type PostAuthPasswordMultipartBody struct {
	// Password The password to check.
	Password string `json:"password"`
}

// PostCopyMessageJSONBody defines parameters for PostCopyMessage.
type PostCopyMessageJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostCopyMessageJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostCopyMessageJSONBody_FromChatId `json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// ParseMode Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostCopyMessageJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostCopyMessageJSONBody_SendAt `json:"send_at,omitempty"`
}

// PostCopyMessageFormdataBody defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// Caption New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
	Caption *string `form:"caption,omitempty" json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `form:"caption_entities,omitempty" json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostCopyMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostCopyMessageFormdataBody_FromChatId `form:"from_chat_id" json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `form:"message_id" json:"message_id"`

	// ParseMode Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `form:"parse_mode,omitempty" json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostCopyMessageFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostCopyMessageFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`
}

// PostCopyMessageMultipartBody defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostCopyMessageMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostCopyMessageMultipartBody_FromChatId `json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// ParseMode Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostCopyMessageMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostCopyMessageMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostCopyMessageJSONBodyChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodyChatId0 = int

// PostCopyMessageJSONBodyChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodyChatId1 = string

// PostCopyMessageJSONBody_ChatId defines parameters for PostCopyMessage.
type PostCopyMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostCopyMessageJSONBodyFromChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodyFromChatId0 = int

// PostCopyMessageJSONBodyFromChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodyFromChatId1 = string

// PostCopyMessageJSONBody_FromChatId defines parameters for PostCopyMessage.
type PostCopyMessageJSONBody_FromChatId struct {
	union json.RawMessage
}

// PostCopyMessageJSONBody_ReplyMarkup defines parameters for PostCopyMessage.
type PostCopyMessageJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostCopyMessageJSONBodySendAt0 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodySendAt0 = int

// PostCopyMessageJSONBodySendAt1 defines parameters for PostCopyMessage.
type PostCopyMessageJSONBodySendAt1 = string

// PostCopyMessageJSONBody_SendAt defines parameters for PostCopyMessage.
type PostCopyMessageJSONBody_SendAt struct {
	union json.RawMessage
}

// PostCopyMessageFormdataBodyChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodyChatId0 = int

// PostCopyMessageFormdataBodyChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodyChatId1 = string

// PostCopyMessageFormdataBody_ChatId defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostCopyMessageFormdataBodyFromChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodyFromChatId0 = int

// PostCopyMessageFormdataBodyFromChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodyFromChatId1 = string

// PostCopyMessageFormdataBody_FromChatId defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBody_FromChatId struct {
	union json.RawMessage
}

// PostCopyMessageFormdataBody_ReplyMarkup defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostCopyMessageFormdataBodySendAt0 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodySendAt0 = int

// PostCopyMessageFormdataBodySendAt1 defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBodySendAt1 = string

// PostCopyMessageFormdataBody_SendAt defines parameters for PostCopyMessage.
type PostCopyMessageFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostCopyMessageMultipartBodyChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodyChatId0 = int

// PostCopyMessageMultipartBodyChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodyChatId1 = string

// PostCopyMessageMultipartBody_ChatId defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostCopyMessageMultipartBodyFromChatId0 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodyFromChatId0 = int

// PostCopyMessageMultipartBodyFromChatId1 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodyFromChatId1 = string

// PostCopyMessageMultipartBody_FromChatId defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBody_FromChatId struct {
	union json.RawMessage
}

// PostCopyMessageMultipartBody_ReplyMarkup defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostCopyMessageMultipartBodySendAt0 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodySendAt0 = int

// PostCopyMessageMultipartBodySendAt1 defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBodySendAt1 = string

// PostCopyMessageMultipartBody_SendAt defines parameters for PostCopyMessage.
type PostCopyMessageMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostCreateChatJSONBody defines parameters for PostCreateChat.
type PostCreateChatJSONBody struct {
	// Description Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
	Description *string `json:"description,omitempty"`

	// Title Title of the new chat; 1-128 characters.
	Title string `json:"title"`

	// Type Type of the new chat, must be any of `group`, `supergroup` or `channel`
	Type PostCreateChatJSONBodyType `json:"type"`

	// UserIds Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
	UserIds *[]PostCreateChatJSONBody_UserIds_Item `json:"user_ids,omitempty"`
}

// PostCreateChatFormdataBody defines parameters for PostCreateChat.
type PostCreateChatFormdataBody struct {
	// Description Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Title Title of the new chat; 1-128 characters.
	Title string `form:"title" json:"title"`

	// Type Type of the new chat, must be any of `group`, `supergroup` or `channel`
	Type PostCreateChatFormdataBodyType `form:"type" json:"type"`

	// UserIds May only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
	UserIds *[]PostCreateChatFormdataBody_UserIds_Item `form:"user_ids,omitempty" json:"user_ids,omitempty"`
}

// PostCreateChatMultipartBody defines parameters for PostCreateChat.
type PostCreateChatMultipartBody struct {
	// Description Chat description; 0-255 characters. Only for types `supergroup` or `channel`.
	Description *string `json:"description,omitempty"`

	// Title Title of the new chat; 1-128 characters.
	Title string `json:"title"`

	// Type Type of the new chat, must be any of `group`, `supergroup` or `channel`
	Type PostCreateChatMultipartBodyType `json:"type"`

	// UserIds Must only be set for chats of type `group` and is required then. Identifiers of users to be added to the basic group. May not be empty.
	UserIds *[]PostCreateChatMultipartBody_UserIds_Item `json:"user_ids,omitempty"`
}

// PostCreateChatJSONBodyType defines parameters for PostCreateChat.
type PostCreateChatJSONBodyType string

// PostCreateChatJSONBodyUserIds0 defines parameters for PostCreateChat.
type PostCreateChatJSONBodyUserIds0 = int

// PostCreateChatJSONBody_UserIds_Item defines parameters for PostCreateChat.
type PostCreateChatJSONBody_UserIds_Item struct {
	union json.RawMessage
}

// PostCreateChatFormdataBodyType defines parameters for PostCreateChat.
type PostCreateChatFormdataBodyType string

// PostCreateChatFormdataBodyUserIds0 defines parameters for PostCreateChat.
type PostCreateChatFormdataBodyUserIds0 = int

// PostCreateChatFormdataBody_UserIds_Item defines parameters for PostCreateChat.
type PostCreateChatFormdataBody_UserIds_Item struct {
	union json.RawMessage
}

// PostCreateChatMultipartBodyType defines parameters for PostCreateChat.
type PostCreateChatMultipartBodyType string

// PostCreateChatMultipartBodyUserIds0 defines parameters for PostCreateChat.
type PostCreateChatMultipartBodyUserIds0 = int

// PostCreateChatMultipartBody_UserIds_Item defines parameters for PostCreateChat.
type PostCreateChatMultipartBody_UserIds_Item struct {
	union json.RawMessage
}

// PostCreateNewStickerSetMultipartBody defines parameters for PostCreateNewStickerSet.
type PostCreateNewStickerSetMultipartBody struct {
	// ContainsMasks Pass *True*, if a set of mask stickers should be created
	ContainsMasks *bool `json:"contains_masks,omitempty"`

	// Emojis One or more emoji corresponding to the sticker
	Emojis string `json:"emojis"`

	// MaskPosition This object describes the position on faces where a mask should be placed by default.
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`

	// Name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in *“\_by\_<bot username>”*. *<bot\_username>* is case insensitive. 1-64 characters.
	Name string `json:"name"`

	// PngSticker **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	PngSticker *PostCreateNewStickerSetMultipartBody_PngSticker `json:"png_sticker,omitempty"`

	// TgsSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
	TgsSticker *InputFile `json:"tgs_sticker,omitempty"`

	// Title Sticker set title, 1-64 characters
	Title string `json:"title"`

	// UserId User identifier of created sticker set owner
	UserId int `json:"user_id"`
}

// PostCreateNewStickerSetMultipartBodyPngSticker1 defines parameters for PostCreateNewStickerSet.
type PostCreateNewStickerSetMultipartBodyPngSticker1 = string

// PostCreateNewStickerSetMultipartBody_PngSticker defines parameters for PostCreateNewStickerSet.
type PostCreateNewStickerSetMultipartBody_PngSticker struct {
	union json.RawMessage
}

// PostDeleteChatHistoryJSONBody defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatHistoryJSONBody_ChatId `json:"chat_id"`

	// ForEveryone Pass true to try to delete chat history for all users.
	ForEveryone *bool `json:"for_everyone,omitempty"`

	// RemoveFromChatList Pass true if the chat should be removed from the chat list.
	RemoveFromChatList *bool `json:"remove_from_chat_list,omitempty"`
}

// PostDeleteChatHistoryFormdataBody defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatHistoryFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// ForEveryone Pass true to try to delete chat history for all users.
	ForEveryone *bool `form:"for_everyone,omitempty" json:"for_everyone,omitempty"`

	// RemoveFromChatList Pass true if the chat should be removed from the chat list.
	RemoveFromChatList *bool `form:"remove_from_chat_list,omitempty" json:"remove_from_chat_list,omitempty"`
}

// PostDeleteChatHistoryMultipartBody defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatHistoryMultipartBody_ChatId `json:"chat_id"`

	// ForEveryone Pass true to try to delete chat history for all users.
	ForEveryone *bool `json:"for_everyone,omitempty"`

	// RemoveFromChatList Pass true if the chat should be removed from the chat list.
	RemoveFromChatList *bool `json:"remove_from_chat_list,omitempty"`
}

// PostDeleteChatHistoryJSONBodyChatId0 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryJSONBodyChatId0 = int

// PostDeleteChatHistoryJSONBodyChatId1 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryJSONBodyChatId1 = string

// PostDeleteChatHistoryJSONBody_ChatId defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryJSONBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatHistoryFormdataBodyChatId0 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryFormdataBodyChatId0 = int

// PostDeleteChatHistoryFormdataBodyChatId1 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryFormdataBodyChatId1 = string

// PostDeleteChatHistoryFormdataBody_ChatId defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatHistoryMultipartBodyChatId0 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryMultipartBodyChatId0 = int

// PostDeleteChatHistoryMultipartBodyChatId1 defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryMultipartBodyChatId1 = string

// PostDeleteChatHistoryMultipartBody_ChatId defines parameters for PostDeleteChatHistory.
type PostDeleteChatHistoryMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatPhotoJSONBody defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatPhotoJSONBody_ChatId `json:"chat_id"`
}

// PostDeleteChatPhotoFormdataBody defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatPhotoFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostDeleteChatPhotoMultipartBody defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteChatPhotoMultipartBody_ChatId `json:"chat_id"`
}

// PostDeleteChatPhotoJSONBodyChatId0 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoJSONBodyChatId0 = int

// PostDeleteChatPhotoJSONBodyChatId1 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoJSONBodyChatId1 = string

// PostDeleteChatPhotoJSONBody_ChatId defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoJSONBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatPhotoFormdataBodyChatId0 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoFormdataBodyChatId0 = int

// PostDeleteChatPhotoFormdataBodyChatId1 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoFormdataBodyChatId1 = string

// PostDeleteChatPhotoFormdataBody_ChatId defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatPhotoMultipartBodyChatId0 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoMultipartBodyChatId0 = int

// PostDeleteChatPhotoMultipartBodyChatId1 defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoMultipartBodyChatId1 = string

// PostDeleteChatPhotoMultipartBody_ChatId defines parameters for PostDeleteChatPhoto.
type PostDeleteChatPhotoMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatStickerSetJSONBody defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostDeleteChatStickerSetJSONBody_ChatId `json:"chat_id"`
}

// PostDeleteChatStickerSetFormdataBody defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostDeleteChatStickerSetFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostDeleteChatStickerSetMultipartBody defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostDeleteChatStickerSetMultipartBody_ChatId `json:"chat_id"`
}

// PostDeleteChatStickerSetJSONBodyChatId0 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetJSONBodyChatId0 = int

// PostDeleteChatStickerSetJSONBodyChatId1 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetJSONBodyChatId1 = string

// PostDeleteChatStickerSetJSONBody_ChatId defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetJSONBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatStickerSetFormdataBodyChatId0 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetFormdataBodyChatId0 = int

// PostDeleteChatStickerSetFormdataBodyChatId1 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetFormdataBodyChatId1 = string

// PostDeleteChatStickerSetFormdataBody_ChatId defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteChatStickerSetMultipartBodyChatId0 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetMultipartBodyChatId0 = int

// PostDeleteChatStickerSetMultipartBodyChatId1 defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetMultipartBodyChatId1 = string

// PostDeleteChatStickerSetMultipartBody_ChatId defines parameters for PostDeleteChatStickerSet.
type PostDeleteChatStickerSetMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessageJSONBody defines parameters for PostDeleteMessage.
type PostDeleteMessageJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessageJSONBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the message to delete
	MessageId int `json:"message_id"`
}

// PostDeleteMessageFormdataBody defines parameters for PostDeleteMessage.
type PostDeleteMessageFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Identifier of the message to delete
	MessageId int `form:"message_id" json:"message_id"`
}

// PostDeleteMessageMultipartBody defines parameters for PostDeleteMessage.
type PostDeleteMessageMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessageMultipartBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the message to delete
	MessageId int `json:"message_id"`
}

// PostDeleteMessageJSONBodyChatId0 defines parameters for PostDeleteMessage.
type PostDeleteMessageJSONBodyChatId0 = int

// PostDeleteMessageJSONBodyChatId1 defines parameters for PostDeleteMessage.
type PostDeleteMessageJSONBodyChatId1 = string

// PostDeleteMessageJSONBody_ChatId defines parameters for PostDeleteMessage.
type PostDeleteMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessageFormdataBodyChatId0 defines parameters for PostDeleteMessage.
type PostDeleteMessageFormdataBodyChatId0 = int

// PostDeleteMessageFormdataBodyChatId1 defines parameters for PostDeleteMessage.
type PostDeleteMessageFormdataBodyChatId1 = string

// PostDeleteMessageFormdataBody_ChatId defines parameters for PostDeleteMessage.
type PostDeleteMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessageMultipartBodyChatId0 defines parameters for PostDeleteMessage.
type PostDeleteMessageMultipartBodyChatId0 = int

// PostDeleteMessageMultipartBodyChatId1 defines parameters for PostDeleteMessage.
type PostDeleteMessageMultipartBodyChatId1 = string

// PostDeleteMessageMultipartBody_ChatId defines parameters for PostDeleteMessage.
type PostDeleteMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessagesJSONBody defines parameters for PostDeleteMessages.
type PostDeleteMessagesJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessagesJSONBody_ChatId `json:"chat_id"`

	// End Last message id to delete
	End int `json:"end"`

	// Start First message id to delete
	Start int `json:"start"`
}

// PostDeleteMessagesFormdataBody defines parameters for PostDeleteMessages.
type PostDeleteMessagesFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessagesFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// End Last message id to delete
	End int `form:"end" json:"end"`

	// Start First message id to delete
	Start int `form:"start" json:"start"`
}

// PostDeleteMessagesMultipartBody defines parameters for PostDeleteMessages.
type PostDeleteMessagesMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostDeleteMessagesMultipartBody_ChatId `json:"chat_id"`

	// End Last message id to delete
	End int `json:"end"`

	// Start First message id to delete
	Start int `json:"start"`
}

// PostDeleteMessagesJSONBodyChatId0 defines parameters for PostDeleteMessages.
type PostDeleteMessagesJSONBodyChatId0 = int

// PostDeleteMessagesJSONBodyChatId1 defines parameters for PostDeleteMessages.
type PostDeleteMessagesJSONBodyChatId1 = string

// PostDeleteMessagesJSONBody_ChatId defines parameters for PostDeleteMessages.
type PostDeleteMessagesJSONBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessagesFormdataBodyChatId0 defines parameters for PostDeleteMessages.
type PostDeleteMessagesFormdataBodyChatId0 = int

// PostDeleteMessagesFormdataBodyChatId1 defines parameters for PostDeleteMessages.
type PostDeleteMessagesFormdataBodyChatId1 = string

// PostDeleteMessagesFormdataBody_ChatId defines parameters for PostDeleteMessages.
type PostDeleteMessagesFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteMessagesMultipartBodyChatId0 defines parameters for PostDeleteMessages.
type PostDeleteMessagesMultipartBodyChatId0 = int

// PostDeleteMessagesMultipartBodyChatId1 defines parameters for PostDeleteMessages.
type PostDeleteMessagesMultipartBodyChatId1 = string

// PostDeleteMessagesMultipartBody_ChatId defines parameters for PostDeleteMessages.
type PostDeleteMessagesMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostDeleteProxyJSONBody defines parameters for PostDeleteProxy.
type PostDeleteProxyJSONBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostDeleteProxyFormdataBody defines parameters for PostDeleteProxy.
type PostDeleteProxyFormdataBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `form:"proxy_id" json:"proxy_id"`
}

// PostDeleteProxyMultipartBody defines parameters for PostDeleteProxy.
type PostDeleteProxyMultipartBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostDeleteStickerFromSetJSONBody defines parameters for PostDeleteStickerFromSet.
type PostDeleteStickerFromSetJSONBody struct {
	// Sticker File identifier of the sticker
	Sticker string `json:"sticker"`
}

// PostDeleteStickerFromSetFormdataBody defines parameters for PostDeleteStickerFromSet.
type PostDeleteStickerFromSetFormdataBody struct {
	// Sticker File identifier of the sticker
	Sticker string `form:"sticker" json:"sticker"`
}

// PostDeleteStickerFromSetMultipartBody defines parameters for PostDeleteStickerFromSet.
type PostDeleteStickerFromSetMultipartBody struct {
	// Sticker File identifier of the sticker
	Sticker string `json:"sticker"`
}

// PostDeleteWebhookJSONBody defines parameters for PostDeleteWebhook.
type PostDeleteWebhookJSONBody struct {
	// DropPendingUpdates Pass *True* to drop all pending updates
	DropPendingUpdates *bool `json:"drop_pending_updates,omitempty"`
}

// PostDeleteWebhookFormdataBody defines parameters for PostDeleteWebhook.
type PostDeleteWebhookFormdataBody struct {
	// DropPendingUpdates Pass *True* to drop all pending updates
	DropPendingUpdates *bool `form:"drop_pending_updates,omitempty" json:"drop_pending_updates,omitempty"`
}

// PostDeleteWebhookMultipartBody defines parameters for PostDeleteWebhook.
type PostDeleteWebhookMultipartBody struct {
	// DropPendingUpdates Pass *True* to drop all pending updates
	DropPendingUpdates *bool `json:"drop_pending_updates,omitempty"`
}

// PostDisableProxyJSONBody defines parameters for PostDisableProxy.
type PostDisableProxyJSONBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostDisableProxyFormdataBody defines parameters for PostDisableProxy.
type PostDisableProxyFormdataBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `form:"proxy_id" json:"proxy_id"`
}

// PostDisableProxyMultipartBody defines parameters for PostDisableProxy.
type PostDisableProxyMultipartBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostEditMessageCaptionJSONBody defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionJSONBody struct {
	// Caption New caption of the message, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageCaptionJSONBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageCaptionFormdataBody defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionFormdataBody struct {
	// Caption New caption of the message, 0-1024 characters after entities parsing
	Caption *string `form:"caption,omitempty" json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `form:"caption_entities,omitempty" json:"caption_entities,omitempty"`

	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageCaptionFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `form:"parse_mode,omitempty" json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`
}

// PostEditMessageCaptionMultipartBody defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionMultipartBody struct {
	// Caption New caption of the message, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageCaptionMultipartBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageCaptionJSONBodyChatId0 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionJSONBodyChatId0 = int

// PostEditMessageCaptionJSONBodyChatId1 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionJSONBodyChatId1 = string

// PostEditMessageCaptionJSONBody_ChatId defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionJSONBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageCaptionFormdataBodyChatId0 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionFormdataBodyChatId0 = int

// PostEditMessageCaptionFormdataBodyChatId1 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionFormdataBodyChatId1 = string

// PostEditMessageCaptionFormdataBody_ChatId defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageCaptionMultipartBodyChatId0 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionMultipartBodyChatId0 = int

// PostEditMessageCaptionMultipartBodyChatId1 defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionMultipartBodyChatId1 = string

// PostEditMessageCaptionMultipartBody_ChatId defines parameters for PostEditMessageCaption.
type PostEditMessageCaptionMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageLiveLocationJSONBody defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageLiveLocationJSONBody_ChatId `json:"chat_id,omitempty"`

	// Heading Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// Latitude Latitude of new location
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of new location
	Longitude float32 `json:"longitude"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ProximityAlertRadius Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageLiveLocationFormdataBody defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageLiveLocationFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// Heading Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `form:"heading,omitempty" json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `form:"horizontal_accuracy,omitempty" json:"horizontal_accuracy,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// Latitude Latitude of new location
	Latitude float32 `form:"latitude" json:"latitude"`

	// Longitude Longitude of new location
	Longitude float32 `form:"longitude" json:"longitude"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// ProximityAlertRadius Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `form:"proximity_alert_radius,omitempty" json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`
}

// PostEditMessageLiveLocationMultipartBody defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageLiveLocationMultipartBody_ChatId `json:"chat_id,omitempty"`

	// Heading Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// Latitude Latitude of new location
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of new location
	Longitude float32 `json:"longitude"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ProximityAlertRadius Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageLiveLocationJSONBodyChatId0 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationJSONBodyChatId0 = int

// PostEditMessageLiveLocationJSONBodyChatId1 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationJSONBodyChatId1 = string

// PostEditMessageLiveLocationJSONBody_ChatId defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationJSONBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageLiveLocationFormdataBodyChatId0 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationFormdataBodyChatId0 = int

// PostEditMessageLiveLocationFormdataBodyChatId1 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationFormdataBodyChatId1 = string

// PostEditMessageLiveLocationFormdataBody_ChatId defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageLiveLocationMultipartBodyChatId0 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationMultipartBodyChatId0 = int

// PostEditMessageLiveLocationMultipartBodyChatId1 defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationMultipartBodyChatId1 = string

// PostEditMessageLiveLocationMultipartBody_ChatId defines parameters for PostEditMessageLiveLocation.
type PostEditMessageLiveLocationMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageMediaMultipartBody defines parameters for PostEditMessageMedia.
type PostEditMessageMediaMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageMediaMultipartBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// Media This object represents the content of a media message to be sent. It should be one of
	Media InputMedia `json:"media"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageMediaMultipartBodyChatId0 defines parameters for PostEditMessageMedia.
type PostEditMessageMediaMultipartBodyChatId0 = int

// PostEditMessageMediaMultipartBodyChatId1 defines parameters for PostEditMessageMedia.
type PostEditMessageMediaMultipartBodyChatId1 = string

// PostEditMessageMediaMultipartBody_ChatId defines parameters for PostEditMessageMedia.
type PostEditMessageMediaMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageReplyMarkupJSONBody defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageReplyMarkupJSONBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageReplyMarkupFormdataBody defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageReplyMarkupFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`
}

// PostEditMessageReplyMarkupMultipartBody defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageReplyMarkupMultipartBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostEditMessageReplyMarkupJSONBodyChatId0 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupJSONBodyChatId0 = int

// PostEditMessageReplyMarkupJSONBodyChatId1 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupJSONBodyChatId1 = string

// PostEditMessageReplyMarkupJSONBody_ChatId defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupJSONBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageReplyMarkupFormdataBodyChatId0 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupFormdataBodyChatId0 = int

// PostEditMessageReplyMarkupFormdataBodyChatId1 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupFormdataBodyChatId1 = string

// PostEditMessageReplyMarkupFormdataBody_ChatId defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageReplyMarkupMultipartBodyChatId0 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupMultipartBodyChatId0 = int

// PostEditMessageReplyMarkupMultipartBodyChatId1 defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupMultipartBodyChatId1 = string

// PostEditMessageReplyMarkupMultipartBody_ChatId defines parameters for PostEditMessageReplyMarkup.
type PostEditMessageReplyMarkupMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageSchedulingJSONBody defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostEditMessageSchedulingJSONBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// SendAt Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostEditMessageSchedulingJSONBody_SendAt `json:"send_at,omitempty"`
}

// PostEditMessageSchedulingFormdataBody defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostEditMessageSchedulingFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*. Message IDs for scheduled messages are negative.
	MessageId int `form:"message_id" json:"message_id"`

	// SendAt Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostEditMessageSchedulingFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`
}

// PostEditMessageSchedulingMultipartBody defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostEditMessageSchedulingMultipartBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// SendAt Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostEditMessageSchedulingMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostEditMessageSchedulingJSONBodyChatId0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBodyChatId0 = int

// PostEditMessageSchedulingJSONBodyChatId1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBodyChatId1 = string

// PostEditMessageSchedulingJSONBody_ChatId defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageSchedulingJSONBodySendAt0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBodySendAt0 = int

// PostEditMessageSchedulingJSONBodySendAt1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBodySendAt1 = string

// PostEditMessageSchedulingJSONBody_SendAt defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingJSONBody_SendAt struct {
	union json.RawMessage
}

// PostEditMessageSchedulingFormdataBodyChatId0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBodyChatId0 = int

// PostEditMessageSchedulingFormdataBodyChatId1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBodyChatId1 = string

// PostEditMessageSchedulingFormdataBody_ChatId defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageSchedulingFormdataBodySendAt0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBodySendAt0 = int

// PostEditMessageSchedulingFormdataBodySendAt1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBodySendAt1 = string

// PostEditMessageSchedulingFormdataBody_SendAt defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostEditMessageSchedulingMultipartBodyChatId0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBodyChatId0 = int

// PostEditMessageSchedulingMultipartBodyChatId1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBodyChatId1 = string

// PostEditMessageSchedulingMultipartBody_ChatId defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageSchedulingMultipartBodySendAt0 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBodySendAt0 = int

// PostEditMessageSchedulingMultipartBodySendAt1 defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBodySendAt1 = string

// PostEditMessageSchedulingMultipartBody_SendAt defines parameters for PostEditMessageScheduling.
type PostEditMessageSchedulingMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostEditMessageTextJSONBody defines parameters for PostEditMessageText.
type PostEditMessageTextJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageTextJSONBody_ChatId `json:"chat_id,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Text New text of the message, 1-4096 characters after entities parsing
	Text string `json:"text"`
}

// PostEditMessageTextFormdataBody defines parameters for PostEditMessageText.
type PostEditMessageTextFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageTextFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `form:"disable_web_page_preview,omitempty" json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `form:"entities,omitempty" json:"entities,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `form:"parse_mode,omitempty" json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// Text New text of the message, 1-4096 characters after entities parsing
	Text string `form:"text" json:"text"`
}

// PostEditMessageTextMultipartBody defines parameters for PostEditMessageText.
type PostEditMessageTextMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostEditMessageTextMultipartBody_ChatId `json:"chat_id,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message to edit
	MessageId *int `json:"message_id,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// Text New text of the message, 1-4096 characters after entities parsing
	Text string `json:"text"`
}

// PostEditMessageTextJSONBodyChatId0 defines parameters for PostEditMessageText.
type PostEditMessageTextJSONBodyChatId0 = int

// PostEditMessageTextJSONBodyChatId1 defines parameters for PostEditMessageText.
type PostEditMessageTextJSONBodyChatId1 = string

// PostEditMessageTextJSONBody_ChatId defines parameters for PostEditMessageText.
type PostEditMessageTextJSONBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageTextFormdataBodyChatId0 defines parameters for PostEditMessageText.
type PostEditMessageTextFormdataBodyChatId0 = int

// PostEditMessageTextFormdataBodyChatId1 defines parameters for PostEditMessageText.
type PostEditMessageTextFormdataBodyChatId1 = string

// PostEditMessageTextFormdataBody_ChatId defines parameters for PostEditMessageText.
type PostEditMessageTextFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostEditMessageTextMultipartBodyChatId0 defines parameters for PostEditMessageText.
type PostEditMessageTextMultipartBodyChatId0 = int

// PostEditMessageTextMultipartBodyChatId1 defines parameters for PostEditMessageText.
type PostEditMessageTextMultipartBodyChatId1 = string

// PostEditMessageTextMultipartBody_ChatId defines parameters for PostEditMessageText.
type PostEditMessageTextMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostEnableProxyJSONBody defines parameters for PostEnableProxy.
type PostEnableProxyJSONBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostEnableProxyFormdataBody defines parameters for PostEnableProxy.
type PostEnableProxyFormdataBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `form:"proxy_id" json:"proxy_id"`
}

// PostEnableProxyMultipartBody defines parameters for PostEnableProxy.
type PostEnableProxyMultipartBody struct {
	// ProxyId The id that uniquely identifies that proxy server.
	ProxyId int `json:"proxy_id"`
}

// PostExportChatInviteLinkJSONBody defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostExportChatInviteLinkJSONBody_ChatId `json:"chat_id"`
}

// PostExportChatInviteLinkFormdataBody defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostExportChatInviteLinkFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostExportChatInviteLinkMultipartBody defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostExportChatInviteLinkMultipartBody_ChatId `json:"chat_id"`
}

// PostExportChatInviteLinkJSONBodyChatId0 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkJSONBodyChatId0 = int

// PostExportChatInviteLinkJSONBodyChatId1 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkJSONBodyChatId1 = string

// PostExportChatInviteLinkJSONBody_ChatId defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkJSONBody_ChatId struct {
	union json.RawMessage
}

// PostExportChatInviteLinkFormdataBodyChatId0 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkFormdataBodyChatId0 = int

// PostExportChatInviteLinkFormdataBodyChatId1 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkFormdataBodyChatId1 = string

// PostExportChatInviteLinkFormdataBody_ChatId defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostExportChatInviteLinkMultipartBodyChatId0 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkMultipartBodyChatId0 = int

// PostExportChatInviteLinkMultipartBodyChatId1 defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkMultipartBodyChatId1 = string

// PostExportChatInviteLinkMultipartBody_ChatId defines parameters for PostExportChatInviteLink.
type PostExportChatInviteLinkMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostForwardMessageJSONBody defines parameters for PostForwardMessage.
type PostForwardMessageJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostForwardMessageJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostForwardMessageJSONBody_FromChatId `json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostForwardMessageJSONBody_SendAt `json:"send_at,omitempty"`
}

// PostForwardMessageFormdataBody defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostForwardMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostForwardMessageFormdataBody_FromChatId `form:"from_chat_id" json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `form:"message_id" json:"message_id"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostForwardMessageFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`
}

// PostForwardMessageMultipartBody defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostForwardMessageMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FromChatId Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
	FromChatId PostForwardMessageMultipartBody_FromChatId `json:"from_chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostForwardMessageMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostForwardMessageJSONBodyChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodyChatId0 = int

// PostForwardMessageJSONBodyChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodyChatId1 = string

// PostForwardMessageJSONBody_ChatId defines parameters for PostForwardMessage.
type PostForwardMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostForwardMessageJSONBodyFromChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodyFromChatId0 = int

// PostForwardMessageJSONBodyFromChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodyFromChatId1 = string

// PostForwardMessageJSONBody_FromChatId defines parameters for PostForwardMessage.
type PostForwardMessageJSONBody_FromChatId struct {
	union json.RawMessage
}

// PostForwardMessageJSONBodySendAt0 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodySendAt0 = int

// PostForwardMessageJSONBodySendAt1 defines parameters for PostForwardMessage.
type PostForwardMessageJSONBodySendAt1 = string

// PostForwardMessageJSONBody_SendAt defines parameters for PostForwardMessage.
type PostForwardMessageJSONBody_SendAt struct {
	union json.RawMessage
}

// PostForwardMessageFormdataBodyChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodyChatId0 = int

// PostForwardMessageFormdataBodyChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodyChatId1 = string

// PostForwardMessageFormdataBody_ChatId defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostForwardMessageFormdataBodyFromChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodyFromChatId0 = int

// PostForwardMessageFormdataBodyFromChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodyFromChatId1 = string

// PostForwardMessageFormdataBody_FromChatId defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBody_FromChatId struct {
	union json.RawMessage
}

// PostForwardMessageFormdataBodySendAt0 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodySendAt0 = int

// PostForwardMessageFormdataBodySendAt1 defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBodySendAt1 = string

// PostForwardMessageFormdataBody_SendAt defines parameters for PostForwardMessage.
type PostForwardMessageFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostForwardMessageMultipartBodyChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodyChatId0 = int

// PostForwardMessageMultipartBodyChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodyChatId1 = string

// PostForwardMessageMultipartBody_ChatId defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostForwardMessageMultipartBodyFromChatId0 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodyFromChatId0 = int

// PostForwardMessageMultipartBodyFromChatId1 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodyFromChatId1 = string

// PostForwardMessageMultipartBody_FromChatId defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBody_FromChatId struct {
	union json.RawMessage
}

// PostForwardMessageMultipartBodySendAt0 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodySendAt0 = int

// PostForwardMessageMultipartBodySendAt1 defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBodySendAt1 = string

// PostForwardMessageMultipartBody_SendAt defines parameters for PostForwardMessage.
type PostForwardMessageMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostGetCallbackQueryAnswerJSONBody defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerJSONBody struct {
	// CallbackData Data that was attached to the callback button.
	CallbackData string `json:"callback_data"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetCallbackQueryAnswerJSONBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`
}

// PostGetCallbackQueryAnswerFormdataBody defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerFormdataBody struct {
	// CallbackData Data that was attached to the callback button.
	CallbackData string `form:"callback_data" json:"callback_data"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetCallbackQueryAnswerFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `form:"message_id" json:"message_id"`
}

// PostGetCallbackQueryAnswerMultipartBody defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerMultipartBody struct {
	// CallbackData Data that was attached to the callback button.
	CallbackData string `json:"callback_data"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetCallbackQueryAnswerMultipartBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`
}

// PostGetCallbackQueryAnswerJSONBodyChatId0 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerJSONBodyChatId0 = int

// PostGetCallbackQueryAnswerJSONBodyChatId1 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerJSONBodyChatId1 = string

// PostGetCallbackQueryAnswerJSONBody_ChatId defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetCallbackQueryAnswerFormdataBodyChatId0 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerFormdataBodyChatId0 = int

// PostGetCallbackQueryAnswerFormdataBodyChatId1 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerFormdataBodyChatId1 = string

// PostGetCallbackQueryAnswerFormdataBody_ChatId defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetCallbackQueryAnswerMultipartBodyChatId0 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerMultipartBodyChatId0 = int

// PostGetCallbackQueryAnswerMultipartBodyChatId1 defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerMultipartBodyChatId1 = string

// PostGetCallbackQueryAnswerMultipartBody_ChatId defines parameters for PostGetCallbackQueryAnswer.
type PostGetCallbackQueryAnswerMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatJSONBody defines parameters for PostGetChat.
type PostGetChatJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatJSONBody_ChatId `json:"chat_id"`
}

// PostGetChatFormdataBody defines parameters for PostGetChat.
type PostGetChatFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostGetChatMultipartBody defines parameters for PostGetChat.
type PostGetChatMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMultipartBody_ChatId `json:"chat_id"`
}

// PostGetChatJSONBodyChatId0 defines parameters for PostGetChat.
type PostGetChatJSONBodyChatId0 = int

// PostGetChatJSONBodyChatId1 defines parameters for PostGetChat.
type PostGetChatJSONBodyChatId1 = string

// PostGetChatJSONBody_ChatId defines parameters for PostGetChat.
type PostGetChatJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatFormdataBodyChatId0 defines parameters for PostGetChat.
type PostGetChatFormdataBodyChatId0 = int

// PostGetChatFormdataBodyChatId1 defines parameters for PostGetChat.
type PostGetChatFormdataBodyChatId1 = string

// PostGetChatFormdataBody_ChatId defines parameters for PostGetChat.
type PostGetChatFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMultipartBodyChatId0 defines parameters for PostGetChat.
type PostGetChatMultipartBodyChatId0 = int

// PostGetChatMultipartBodyChatId1 defines parameters for PostGetChat.
type PostGetChatMultipartBodyChatId1 = string

// PostGetChatMultipartBody_ChatId defines parameters for PostGetChat.
type PostGetChatMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatAdministratorsJSONBody defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatAdministratorsJSONBody_ChatId `json:"chat_id"`
}

// PostGetChatAdministratorsFormdataBody defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatAdministratorsFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostGetChatAdministratorsMultipartBody defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatAdministratorsMultipartBody_ChatId `json:"chat_id"`
}

// PostGetChatAdministratorsJSONBodyChatId0 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsJSONBodyChatId0 = int

// PostGetChatAdministratorsJSONBodyChatId1 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsJSONBodyChatId1 = string

// PostGetChatAdministratorsJSONBody_ChatId defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatAdministratorsFormdataBodyChatId0 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsFormdataBodyChatId0 = int

// PostGetChatAdministratorsFormdataBodyChatId1 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsFormdataBodyChatId1 = string

// PostGetChatAdministratorsFormdataBody_ChatId defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatAdministratorsMultipartBodyChatId0 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsMultipartBodyChatId0 = int

// PostGetChatAdministratorsMultipartBodyChatId1 defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsMultipartBodyChatId1 = string

// PostGetChatAdministratorsMultipartBody_ChatId defines parameters for PostGetChatAdministrators.
type PostGetChatAdministratorsMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMemberJSONBody defines parameters for PostGetChatMember.
type PostGetChatMemberJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMemberJSONBody_ChatId `json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostGetChatMemberFormdataBody defines parameters for PostGetChatMember.
type PostGetChatMemberFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostGetChatMemberMultipartBody defines parameters for PostGetChatMember.
type PostGetChatMemberMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMemberMultipartBody_ChatId `json:"chat_id"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostGetChatMemberJSONBodyChatId0 defines parameters for PostGetChatMember.
type PostGetChatMemberJSONBodyChatId0 = int

// PostGetChatMemberJSONBodyChatId1 defines parameters for PostGetChatMember.
type PostGetChatMemberJSONBodyChatId1 = string

// PostGetChatMemberJSONBody_ChatId defines parameters for PostGetChatMember.
type PostGetChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMemberFormdataBodyChatId0 defines parameters for PostGetChatMember.
type PostGetChatMemberFormdataBodyChatId0 = int

// PostGetChatMemberFormdataBodyChatId1 defines parameters for PostGetChatMember.
type PostGetChatMemberFormdataBodyChatId1 = string

// PostGetChatMemberFormdataBody_ChatId defines parameters for PostGetChatMember.
type PostGetChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMemberMultipartBodyChatId0 defines parameters for PostGetChatMember.
type PostGetChatMemberMultipartBodyChatId0 = int

// PostGetChatMemberMultipartBodyChatId1 defines parameters for PostGetChatMember.
type PostGetChatMemberMultipartBodyChatId1 = string

// PostGetChatMemberMultipartBody_ChatId defines parameters for PostGetChatMember.
type PostGetChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersJSONBody defines parameters for PostGetChatMembers.
type PostGetChatMembersJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersJSONBody_ChatId `json:"chat_id"`

	// Filter Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
	Filter *PostGetChatMembersJSONBodyFilter `json:"filter,omitempty"`

	// Limit The maximum number of users be returned; up to 200.
	Limit *int `json:"limit,omitempty"`

	// Offset Number of users to skip.
	Offset *int `json:"offset,omitempty"`

	// Query Query to search for in names and usernames
	Query *string `json:"query,omitempty"`
}

// PostGetChatMembersFormdataBody defines parameters for PostGetChatMembers.
type PostGetChatMembersFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Filter Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
	Filter *PostGetChatMembersFormdataBodyFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// Limit The maximum number of users be returned; up to 200.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Query Query to search for in names and usernames
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// PostGetChatMembersMultipartBody defines parameters for PostGetChatMembers.
type PostGetChatMembersMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersMultipartBody_ChatId `json:"chat_id"`

	// Filter Filter the members you want to get. Must be one of `members`, `banned`, `restricted`, `bots` or `admins`. Only works in supergroups and channels. Administrator privileges may be required for some filters.
	Filter *PostGetChatMembersMultipartBodyFilter `json:"filter,omitempty"`

	// Limit The maximum number of users be returned; up to 200.
	Limit *int `json:"limit,omitempty"`

	// Offset Number of users to skip.
	Offset *int `json:"offset,omitempty"`

	// Query Query to search for in names and usernames
	Query *string `json:"query,omitempty"`
}

// PostGetChatMembersJSONBodyChatId0 defines parameters for PostGetChatMembers.
type PostGetChatMembersJSONBodyChatId0 = int

// PostGetChatMembersJSONBodyChatId1 defines parameters for PostGetChatMembers.
type PostGetChatMembersJSONBodyChatId1 = string

// PostGetChatMembersJSONBody_ChatId defines parameters for PostGetChatMembers.
type PostGetChatMembersJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersJSONBodyFilter defines parameters for PostGetChatMembers.
type PostGetChatMembersJSONBodyFilter string

// PostGetChatMembersFormdataBodyChatId0 defines parameters for PostGetChatMembers.
type PostGetChatMembersFormdataBodyChatId0 = int

// PostGetChatMembersFormdataBodyChatId1 defines parameters for PostGetChatMembers.
type PostGetChatMembersFormdataBodyChatId1 = string

// PostGetChatMembersFormdataBody_ChatId defines parameters for PostGetChatMembers.
type PostGetChatMembersFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersFormdataBodyFilter defines parameters for PostGetChatMembers.
type PostGetChatMembersFormdataBodyFilter string

// PostGetChatMembersMultipartBodyChatId0 defines parameters for PostGetChatMembers.
type PostGetChatMembersMultipartBodyChatId0 = int

// PostGetChatMembersMultipartBodyChatId1 defines parameters for PostGetChatMembers.
type PostGetChatMembersMultipartBodyChatId1 = string

// PostGetChatMembersMultipartBody_ChatId defines parameters for PostGetChatMembers.
type PostGetChatMembersMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersMultipartBodyFilter defines parameters for PostGetChatMembers.
type PostGetChatMembersMultipartBodyFilter string

// PostGetChatMembersCountJSONBody defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersCountJSONBody_ChatId `json:"chat_id"`
}

// PostGetChatMembersCountFormdataBody defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersCountFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostGetChatMembersCountMultipartBody defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostGetChatMembersCountMultipartBody_ChatId `json:"chat_id"`
}

// PostGetChatMembersCountJSONBodyChatId0 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountJSONBodyChatId0 = int

// PostGetChatMembersCountJSONBodyChatId1 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountJSONBodyChatId1 = string

// PostGetChatMembersCountJSONBody_ChatId defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersCountFormdataBodyChatId0 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountFormdataBodyChatId0 = int

// PostGetChatMembersCountFormdataBodyChatId1 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountFormdataBodyChatId1 = string

// PostGetChatMembersCountFormdataBody_ChatId defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatMembersCountMultipartBodyChatId0 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountMultipartBodyChatId0 = int

// PostGetChatMembersCountMultipartBodyChatId1 defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountMultipartBodyChatId1 = string

// PostGetChatMembersCountMultipartBody_ChatId defines parameters for PostGetChatMembersCount.
type PostGetChatMembersCountMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetChatsJSONBody defines parameters for PostGetChats.
type PostGetChatsJSONBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`
}

// PostGetChatsFormdataBody defines parameters for PostGetChats.
type PostGetChatsFormdataBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `form:"offset_chat_id,omitempty" json:"offset_chat_id,omitempty"`
}

// PostGetChatsMultipartBody defines parameters for PostGetChats.
type PostGetChatsMultipartBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`
}

// PostGetCommonChatsJSONBody defines parameters for PostGetCommonChats.
type PostGetCommonChatsJSONBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostGetCommonChatsFormdataBody defines parameters for PostGetCommonChats.
type PostGetCommonChatsFormdataBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `form:"offset_chat_id,omitempty" json:"offset_chat_id,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostGetCommonChatsMultipartBody defines parameters for PostGetCommonChats.
type PostGetCommonChatsMultipartBody struct {
	// OffsetChatId Chat identifier to return chats from.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostGetFileJSONBody defines parameters for PostGetFile.
type PostGetFileJSONBody struct {
	// FileId File identifier to get info about
	FileId string `json:"file_id"`
}

// PostGetFileFormdataBody defines parameters for PostGetFile.
type PostGetFileFormdataBody struct {
	// FileId File identifier to get info about
	FileId string `form:"file_id" json:"file_id"`
}

// PostGetFileMultipartBody defines parameters for PostGetFile.
type PostGetFileMultipartBody struct {
	// FileId File identifier to get info about
	FileId string `json:"file_id"`
}

// PostGetGameHighScoresJSONBody defines parameters for PostGetGameHighScores.
type PostGetGameHighScoresJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `json:"message_id,omitempty"`

	// UserId Target user id
	UserId int `json:"user_id"`
}

// PostGetGameHighScoresFormdataBody defines parameters for PostGetGameHighScores.
type PostGetGameHighScoresFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// UserId Target user id
	UserId int `form:"user_id" json:"user_id"`
}

// PostGetGameHighScoresMultipartBody defines parameters for PostGetGameHighScores.
type PostGetGameHighScoresMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `json:"message_id,omitempty"`

	// UserId Target user id
	UserId int `json:"user_id"`
}

// PostGetMessageInfoJSONBody defines parameters for PostGetMessageInfo.
type PostGetMessageInfoJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetMessageInfoJSONBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`
}

// PostGetMessageInfoFormdataBody defines parameters for PostGetMessageInfo.
type PostGetMessageInfoFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetMessageInfoFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `form:"message_id" json:"message_id"`
}

// PostGetMessageInfoMultipartBody defines parameters for PostGetMessageInfo.
type PostGetMessageInfoMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetMessageInfoMultipartBody_ChatId `json:"chat_id"`

	// MessageId Message identifier in the chat specified in *from\_chat\_id*
	MessageId int `json:"message_id"`
}

// PostGetMessageInfoJSONBodyChatId0 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoJSONBodyChatId0 = int

// PostGetMessageInfoJSONBodyChatId1 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoJSONBodyChatId1 = string

// PostGetMessageInfoJSONBody_ChatId defines parameters for PostGetMessageInfo.
type PostGetMessageInfoJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetMessageInfoFormdataBodyChatId0 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoFormdataBodyChatId0 = int

// PostGetMessageInfoFormdataBodyChatId1 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoFormdataBodyChatId1 = string

// PostGetMessageInfoFormdataBody_ChatId defines parameters for PostGetMessageInfo.
type PostGetMessageInfoFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetMessageInfoMultipartBodyChatId0 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoMultipartBodyChatId0 = int

// PostGetMessageInfoMultipartBodyChatId1 defines parameters for PostGetMessageInfo.
type PostGetMessageInfoMultipartBodyChatId1 = string

// PostGetMessageInfoMultipartBody_ChatId defines parameters for PostGetMessageInfo.
type PostGetMessageInfoMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetNearbyChatsJSONBody defines parameters for PostGetNearbyChats.
type PostGetNearbyChatsJSONBody struct {
	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the location
	Longitude float32 `json:"longitude"`
}

// PostGetNearbyChatsFormdataBody defines parameters for PostGetNearbyChats.
type PostGetNearbyChatsFormdataBody struct {
	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `form:"horizontal_accuracy,omitempty" json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `form:"latitude" json:"latitude"`

	// Longitude Longitude of the location
	Longitude float32 `form:"longitude" json:"longitude"`
}

// PostGetNearbyChatsMultipartBody defines parameters for PostGetNearbyChats.
type PostGetNearbyChatsMultipartBody struct {
	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the location
	Longitude float32 `json:"longitude"`
}

// PostGetScheduledMessagesJSONBody defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetScheduledMessagesJSONBody_ChatId `json:"chat_id"`
}

// PostGetScheduledMessagesFormdataBody defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetScheduledMessagesFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostGetScheduledMessagesMultipartBody defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostGetScheduledMessagesMultipartBody_ChatId `json:"chat_id"`
}

// PostGetScheduledMessagesJSONBodyChatId0 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesJSONBodyChatId0 = int

// PostGetScheduledMessagesJSONBodyChatId1 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesJSONBodyChatId1 = string

// PostGetScheduledMessagesJSONBody_ChatId defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesJSONBody_ChatId struct {
	union json.RawMessage
}

// PostGetScheduledMessagesFormdataBodyChatId0 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesFormdataBodyChatId0 = int

// PostGetScheduledMessagesFormdataBodyChatId1 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesFormdataBodyChatId1 = string

// PostGetScheduledMessagesFormdataBody_ChatId defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostGetScheduledMessagesMultipartBodyChatId0 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesMultipartBodyChatId0 = int

// PostGetScheduledMessagesMultipartBodyChatId1 defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesMultipartBodyChatId1 = string

// PostGetScheduledMessagesMultipartBody_ChatId defines parameters for PostGetScheduledMessages.
type PostGetScheduledMessagesMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostGetStickerSetJSONBody defines parameters for PostGetStickerSet.
type PostGetStickerSetJSONBody struct {
	// Name Name of the sticker set
	Name string `json:"name"`
}

// PostGetStickerSetFormdataBody defines parameters for PostGetStickerSet.
type PostGetStickerSetFormdataBody struct {
	// Name Name of the sticker set
	Name string `form:"name" json:"name"`
}

// PostGetStickerSetMultipartBody defines parameters for PostGetStickerSet.
type PostGetStickerSetMultipartBody struct {
	// Name Name of the sticker set
	Name string `json:"name"`
}

// PostGetUpdatesJSONBody defines parameters for PostGetUpdates.
type PostGetUpdatesJSONBody struct {
	// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
	//
	// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
	AllowedUpdates *[]string `json:"allowed_updates,omitempty"`

	// Limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `json:"limit,omitempty"`

	// Offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
	Offset *int `json:"offset,omitempty"`

	// Timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
	Timeout *int `json:"timeout,omitempty"`
}

// PostGetUpdatesFormdataBody defines parameters for PostGetUpdates.
type PostGetUpdatesFormdataBody struct {
	// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
	//
	// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
	AllowedUpdates *[]string `form:"allowed_updates,omitempty" json:"allowed_updates,omitempty"`

	// Limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
	Timeout *int `form:"timeout,omitempty" json:"timeout,omitempty"`
}

// PostGetUpdatesMultipartBody defines parameters for PostGetUpdates.
type PostGetUpdatesMultipartBody struct {
	// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
	//
	// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
	AllowedUpdates *[]string `json:"allowed_updates,omitempty"`

	// Limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `json:"limit,omitempty"`

	// Offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
	Offset *int `json:"offset,omitempty"`

	// Timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
	Timeout *int `json:"timeout,omitempty"`
}

// PostGetUserProfilePhotosJSONBody defines parameters for PostGetUserProfilePhotos.
type PostGetUserProfilePhotosJSONBody struct {
	// Limit Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `json:"limit,omitempty"`

	// Offset Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset *int `json:"offset,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostGetUserProfilePhotosFormdataBody defines parameters for PostGetUserProfilePhotos.
type PostGetUserProfilePhotosFormdataBody struct {
	// Limit Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostGetUserProfilePhotosMultipartBody defines parameters for PostGetUserProfilePhotos.
type PostGetUserProfilePhotosMultipartBody struct {
	// Limit Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit *int `json:"limit,omitempty"`

	// Offset Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset *int `json:"offset,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostJoinChatJSONBody defines parameters for PostJoinChat.
type PostJoinChatJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostJoinChatJSONBody_ChatId `json:"chat_id,omitempty"`

	// InviteLink Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
	InviteLink *string `json:"invite_link,omitempty"`
}

// PostJoinChatFormdataBody defines parameters for PostJoinChat.
type PostJoinChatFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostJoinChatFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// InviteLink Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
	InviteLink *string `form:"invite_link,omitempty" json:"invite_link,omitempty"`
}

// PostJoinChatMultipartBody defines parameters for PostJoinChat.
type PostJoinChatMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostJoinChatMultipartBody_ChatId `json:"chat_id,omitempty"`

	// InviteLink Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/".
	InviteLink *string `json:"invite_link,omitempty"`
}

// PostJoinChatJSONBodyChatId0 defines parameters for PostJoinChat.
type PostJoinChatJSONBodyChatId0 = int

// PostJoinChatJSONBodyChatId1 defines parameters for PostJoinChat.
type PostJoinChatJSONBodyChatId1 = string

// PostJoinChatJSONBody_ChatId defines parameters for PostJoinChat.
type PostJoinChatJSONBody_ChatId struct {
	union json.RawMessage
}

// PostJoinChatFormdataBodyChatId0 defines parameters for PostJoinChat.
type PostJoinChatFormdataBodyChatId0 = int

// PostJoinChatFormdataBodyChatId1 defines parameters for PostJoinChat.
type PostJoinChatFormdataBodyChatId1 = string

// PostJoinChatFormdataBody_ChatId defines parameters for PostJoinChat.
type PostJoinChatFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostJoinChatMultipartBodyChatId0 defines parameters for PostJoinChat.
type PostJoinChatMultipartBodyChatId0 = int

// PostJoinChatMultipartBodyChatId1 defines parameters for PostJoinChat.
type PostJoinChatMultipartBodyChatId1 = string

// PostJoinChatMultipartBody_ChatId defines parameters for PostJoinChat.
type PostJoinChatMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostKickChatMemberJSONBody defines parameters for PostKickChatMember.
type PostKickChatMemberJSONBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostKickChatMemberJSONBody_ChatId `json:"chat_id"`

	// UntilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
	UntilDate *int `json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostKickChatMemberFormdataBody defines parameters for PostKickChatMember.
type PostKickChatMemberFormdataBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostKickChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// UntilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
	UntilDate *int `form:"until_date,omitempty" json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostKickChatMemberMultipartBody defines parameters for PostKickChatMember.
type PostKickChatMemberMultipartBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostKickChatMemberMultipartBody_ChatId `json:"chat_id"`

	// UntilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
	UntilDate *int `json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostKickChatMemberJSONBodyChatId0 defines parameters for PostKickChatMember.
type PostKickChatMemberJSONBodyChatId0 = int

// PostKickChatMemberJSONBodyChatId1 defines parameters for PostKickChatMember.
type PostKickChatMemberJSONBodyChatId1 = string

// PostKickChatMemberJSONBody_ChatId defines parameters for PostKickChatMember.
type PostKickChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostKickChatMemberFormdataBodyChatId0 defines parameters for PostKickChatMember.
type PostKickChatMemberFormdataBodyChatId0 = int

// PostKickChatMemberFormdataBodyChatId1 defines parameters for PostKickChatMember.
type PostKickChatMemberFormdataBodyChatId1 = string

// PostKickChatMemberFormdataBody_ChatId defines parameters for PostKickChatMember.
type PostKickChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostKickChatMemberMultipartBodyChatId0 defines parameters for PostKickChatMember.
type PostKickChatMemberMultipartBodyChatId0 = int

// PostKickChatMemberMultipartBodyChatId1 defines parameters for PostKickChatMember.
type PostKickChatMemberMultipartBodyChatId1 = string

// PostKickChatMemberMultipartBody_ChatId defines parameters for PostKickChatMember.
type PostKickChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostLeaveChatJSONBody defines parameters for PostLeaveChat.
type PostLeaveChatJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostLeaveChatJSONBody_ChatId `json:"chat_id"`
}

// PostLeaveChatFormdataBody defines parameters for PostLeaveChat.
type PostLeaveChatFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostLeaveChatFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostLeaveChatMultipartBody defines parameters for PostLeaveChat.
type PostLeaveChatMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostLeaveChatMultipartBody_ChatId `json:"chat_id"`
}

// PostLeaveChatJSONBodyChatId0 defines parameters for PostLeaveChat.
type PostLeaveChatJSONBodyChatId0 = int

// PostLeaveChatJSONBodyChatId1 defines parameters for PostLeaveChat.
type PostLeaveChatJSONBodyChatId1 = string

// PostLeaveChatJSONBody_ChatId defines parameters for PostLeaveChat.
type PostLeaveChatJSONBody_ChatId struct {
	union json.RawMessage
}

// PostLeaveChatFormdataBodyChatId0 defines parameters for PostLeaveChat.
type PostLeaveChatFormdataBodyChatId0 = int

// PostLeaveChatFormdataBodyChatId1 defines parameters for PostLeaveChat.
type PostLeaveChatFormdataBodyChatId1 = string

// PostLeaveChatFormdataBody_ChatId defines parameters for PostLeaveChat.
type PostLeaveChatFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostLeaveChatMultipartBodyChatId0 defines parameters for PostLeaveChat.
type PostLeaveChatMultipartBodyChatId0 = int

// PostLeaveChatMultipartBodyChatId1 defines parameters for PostLeaveChat.
type PostLeaveChatMultipartBodyChatId1 = string

// PostLeaveChatMultipartBody_ChatId defines parameters for PostLeaveChat.
type PostLeaveChatMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostPinChatMessageJSONBody defines parameters for PostPinChatMessage.
type PostPinChatMessageJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPinChatMessageJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// MessageId Identifier of a message to pin
	MessageId int `json:"message_id"`
}

// PostPinChatMessageFormdataBody defines parameters for PostPinChatMessage.
type PostPinChatMessageFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPinChatMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// MessageId Identifier of a message to pin
	MessageId int `form:"message_id" json:"message_id"`
}

// PostPinChatMessageMultipartBody defines parameters for PostPinChatMessage.
type PostPinChatMessageMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPinChatMessageMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// MessageId Identifier of a message to pin
	MessageId int `json:"message_id"`
}

// PostPinChatMessageJSONBodyChatId0 defines parameters for PostPinChatMessage.
type PostPinChatMessageJSONBodyChatId0 = int

// PostPinChatMessageJSONBodyChatId1 defines parameters for PostPinChatMessage.
type PostPinChatMessageJSONBodyChatId1 = string

// PostPinChatMessageJSONBody_ChatId defines parameters for PostPinChatMessage.
type PostPinChatMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostPinChatMessageFormdataBodyChatId0 defines parameters for PostPinChatMessage.
type PostPinChatMessageFormdataBodyChatId0 = int

// PostPinChatMessageFormdataBodyChatId1 defines parameters for PostPinChatMessage.
type PostPinChatMessageFormdataBodyChatId1 = string

// PostPinChatMessageFormdataBody_ChatId defines parameters for PostPinChatMessage.
type PostPinChatMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostPinChatMessageMultipartBodyChatId0 defines parameters for PostPinChatMessage.
type PostPinChatMessageMultipartBodyChatId0 = int

// PostPinChatMessageMultipartBodyChatId1 defines parameters for PostPinChatMessage.
type PostPinChatMessageMultipartBodyChatId1 = string

// PostPinChatMessageMultipartBody_ChatId defines parameters for PostPinChatMessage.
type PostPinChatMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostPromoteChatMemberJSONBody defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberJSONBody struct {
	// CanChangeInfo Pass True, if the administrator can change chat title, photo and other settings
	CanChangeInfo *bool `json:"can_change_info,omitempty"`

	// CanDeleteMessages Pass True, if the administrator can delete messages of other users
	CanDeleteMessages *bool `json:"can_delete_messages,omitempty"`

	// CanEditMessages Pass True, if the administrator can edit messages of other users and can pin messages, channels only
	CanEditMessages *bool `json:"can_edit_messages,omitempty"`

	// CanInviteUsers Pass True, if the administrator can invite new users to the chat
	CanInviteUsers *bool `json:"can_invite_users,omitempty"`

	// CanPinMessages Pass True, if the administrator can pin messages, supergroups only
	CanPinMessages *bool `json:"can_pin_messages,omitempty"`

	// CanPostMessages Pass True, if the administrator can create channel posts, channels only
	CanPostMessages *bool `json:"can_post_messages,omitempty"`

	// CanPromoteMembers Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
	CanPromoteMembers *bool `json:"can_promote_members,omitempty"`

	// CanRestrictMembers Pass True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers *bool `json:"can_restrict_members,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPromoteChatMemberJSONBody_ChatId `json:"chat_id"`

	// IsAnonymous Pass *True*, if the administrator's presence in the chat is hidden
	IsAnonymous *bool `json:"is_anonymous,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostPromoteChatMemberFormdataBody defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberFormdataBody struct {
	// CanChangeInfo Pass True, if the administrator can change chat title, photo and other settings
	CanChangeInfo *bool `form:"can_change_info,omitempty" json:"can_change_info,omitempty"`

	// CanDeleteMessages Pass True, if the administrator can delete messages of other users
	CanDeleteMessages *bool `form:"can_delete_messages,omitempty" json:"can_delete_messages,omitempty"`

	// CanEditMessages Pass True, if the administrator can edit messages of other users and can pin messages, channels only
	CanEditMessages *bool `form:"can_edit_messages,omitempty" json:"can_edit_messages,omitempty"`

	// CanInviteUsers Pass True, if the administrator can invite new users to the chat
	CanInviteUsers *bool `form:"can_invite_users,omitempty" json:"can_invite_users,omitempty"`

	// CanPinMessages Pass True, if the administrator can pin messages, supergroups only
	CanPinMessages *bool `form:"can_pin_messages,omitempty" json:"can_pin_messages,omitempty"`

	// CanPostMessages Pass True, if the administrator can create channel posts, channels only
	CanPostMessages *bool `form:"can_post_messages,omitempty" json:"can_post_messages,omitempty"`

	// CanPromoteMembers Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
	CanPromoteMembers *bool `form:"can_promote_members,omitempty" json:"can_promote_members,omitempty"`

	// CanRestrictMembers Pass True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers *bool `form:"can_restrict_members,omitempty" json:"can_restrict_members,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPromoteChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// IsAnonymous Pass *True*, if the administrator's presence in the chat is hidden
	IsAnonymous *bool `form:"is_anonymous,omitempty" json:"is_anonymous,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostPromoteChatMemberMultipartBody defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberMultipartBody struct {
	// CanChangeInfo Pass True, if the administrator can change chat title, photo and other settings
	CanChangeInfo *bool `json:"can_change_info,omitempty"`

	// CanDeleteMessages Pass True, if the administrator can delete messages of other users
	CanDeleteMessages *bool `json:"can_delete_messages,omitempty"`

	// CanEditMessages Pass True, if the administrator can edit messages of other users and can pin messages, channels only
	CanEditMessages *bool `json:"can_edit_messages,omitempty"`

	// CanInviteUsers Pass True, if the administrator can invite new users to the chat
	CanInviteUsers *bool `json:"can_invite_users,omitempty"`

	// CanPinMessages Pass True, if the administrator can pin messages, supergroups only
	CanPinMessages *bool `json:"can_pin_messages,omitempty"`

	// CanPostMessages Pass True, if the administrator can create channel posts, channels only
	CanPostMessages *bool `json:"can_post_messages,omitempty"`

	// CanPromoteMembers Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
	CanPromoteMembers *bool `json:"can_promote_members,omitempty"`

	// CanRestrictMembers Pass True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers *bool `json:"can_restrict_members,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostPromoteChatMemberMultipartBody_ChatId `json:"chat_id"`

	// IsAnonymous Pass *True*, if the administrator's presence in the chat is hidden
	IsAnonymous *bool `json:"is_anonymous,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostPromoteChatMemberJSONBodyChatId0 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberJSONBodyChatId0 = int

// PostPromoteChatMemberJSONBodyChatId1 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberJSONBodyChatId1 = string

// PostPromoteChatMemberJSONBody_ChatId defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostPromoteChatMemberFormdataBodyChatId0 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberFormdataBodyChatId0 = int

// PostPromoteChatMemberFormdataBodyChatId1 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberFormdataBodyChatId1 = string

// PostPromoteChatMemberFormdataBody_ChatId defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostPromoteChatMemberMultipartBodyChatId0 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberMultipartBodyChatId0 = int

// PostPromoteChatMemberMultipartBodyChatId1 defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberMultipartBodyChatId1 = string

// PostPromoteChatMemberMultipartBody_ChatId defines parameters for PostPromoteChatMember.
type PostPromoteChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostRegisterUserJSONBody defines parameters for PostRegisterUser.
type PostRegisterUserJSONBody struct {
	// FirstName The first name of the user; 1-64 characters.
	FirstName string `json:"first_name"`

	// LastName The last name of the user; 0-64 characters.
	LastName *string `json:"last_name,omitempty"`
}

// PostRegisterUserFormdataBody defines parameters for PostRegisterUser.
type PostRegisterUserFormdataBody struct {
	// FirstName The first name of the user; 1-64 characters.
	FirstName string `form:"first_name" json:"first_name"`

	// LastName The last name of the user; 0-64 characters.
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`
}

// PostRegisterUserMultipartBody defines parameters for PostRegisterUser.
type PostRegisterUserMultipartBody struct {
	// FirstName The first name of the user; 1-64 characters.
	FirstName string `json:"first_name"`

	// LastName The last name of the user; 0-64 characters.
	LastName *string `json:"last_name,omitempty"`
}

// PostReportChatJSONBody defines parameters for PostReportChat.
type PostReportChatJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostReportChatJSONBody_ChatId `json:"chat_id"`

	// MessageIds Identifiers of reported messages.
	MessageIds *[]PostReportChatJSONBody_MessageIds_Item `json:"message_ids,omitempty"`

	// Reason The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
	Reason string `json:"reason"`
}

// PostReportChatFormdataBody defines parameters for PostReportChat.
type PostReportChatFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostReportChatFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageIds Identifiers of reported messages.
	MessageIds *[]PostReportChatFormdataBody_MessageIds_Item `form:"message_ids,omitempty" json:"message_ids,omitempty"`

	// Reason The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
	Reason string `form:"reason" json:"reason"`
}

// PostReportChatMultipartBody defines parameters for PostReportChat.
type PostReportChatMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostReportChatMultipartBody_ChatId `json:"chat_id"`

	// MessageIds Identifiers of reported messages.
	MessageIds *[]PostReportChatMultipartBody_MessageIds_Item `json:"message_ids,omitempty"`

	// Reason The reason for reporting the chat. Can be one of `child_abuse`, `copyright`, `pornography`, `spam`, `unrelated_location`, `violence` or any custom string to send a custom reason
	Reason string `json:"reason"`
}

// PostReportChatJSONBodyChatId0 defines parameters for PostReportChat.
type PostReportChatJSONBodyChatId0 = int

// PostReportChatJSONBodyChatId1 defines parameters for PostReportChat.
type PostReportChatJSONBodyChatId1 = string

// PostReportChatJSONBody_ChatId defines parameters for PostReportChat.
type PostReportChatJSONBody_ChatId struct {
	union json.RawMessage
}

// PostReportChatJSONBodyMessageIds0 defines parameters for PostReportChat.
type PostReportChatJSONBodyMessageIds0 = int

// PostReportChatJSONBody_MessageIds_Item defines parameters for PostReportChat.
type PostReportChatJSONBody_MessageIds_Item struct {
	union json.RawMessage
}

// PostReportChatFormdataBodyChatId0 defines parameters for PostReportChat.
type PostReportChatFormdataBodyChatId0 = int

// PostReportChatFormdataBodyChatId1 defines parameters for PostReportChat.
type PostReportChatFormdataBodyChatId1 = string

// PostReportChatFormdataBody_ChatId defines parameters for PostReportChat.
type PostReportChatFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostReportChatFormdataBodyMessageIds0 defines parameters for PostReportChat.
type PostReportChatFormdataBodyMessageIds0 = int

// PostReportChatFormdataBody_MessageIds_Item defines parameters for PostReportChat.
type PostReportChatFormdataBody_MessageIds_Item struct {
	union json.RawMessage
}

// PostReportChatMultipartBodyChatId0 defines parameters for PostReportChat.
type PostReportChatMultipartBodyChatId0 = int

// PostReportChatMultipartBodyChatId1 defines parameters for PostReportChat.
type PostReportChatMultipartBodyChatId1 = string

// PostReportChatMultipartBody_ChatId defines parameters for PostReportChat.
type PostReportChatMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostReportChatMultipartBodyMessageIds0 defines parameters for PostReportChat.
type PostReportChatMultipartBodyMessageIds0 = int

// PostReportChatMultipartBody_MessageIds_Item defines parameters for PostReportChat.
type PostReportChatMultipartBody_MessageIds_Item struct {
	union json.RawMessage
}

// PostRestrictChatMemberJSONBody defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostRestrictChatMemberJSONBody_ChatId `json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `json:"permissions"`

	// UntilDate Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
	UntilDate *int `json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostRestrictChatMemberFormdataBody defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostRestrictChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `form:"permissions" json:"permissions"`

	// UntilDate Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
	UntilDate *int `form:"until_date,omitempty" json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostRestrictChatMemberMultipartBody defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostRestrictChatMemberMultipartBody_ChatId `json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `json:"permissions"`

	// UntilDate Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
	UntilDate *int `json:"until_date,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostRestrictChatMemberJSONBodyChatId0 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberJSONBodyChatId0 = int

// PostRestrictChatMemberJSONBodyChatId1 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberJSONBodyChatId1 = string

// PostRestrictChatMemberJSONBody_ChatId defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostRestrictChatMemberFormdataBodyChatId0 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberFormdataBodyChatId0 = int

// PostRestrictChatMemberFormdataBodyChatId1 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberFormdataBodyChatId1 = string

// PostRestrictChatMemberFormdataBody_ChatId defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostRestrictChatMemberMultipartBodyChatId0 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberMultipartBodyChatId0 = int

// PostRestrictChatMemberMultipartBodyChatId1 defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberMultipartBodyChatId1 = string

// PostRestrictChatMemberMultipartBody_ChatId defines parameters for PostRestrictChatMember.
type PostRestrictChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSearchChatMessagesJSONBody defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostSearchChatMessagesJSONBody_ChatId `json:"chat_id"`

	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchChatMessagesJSONBodyFilter `json:"filter,omitempty"`

	// FromMessageId Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
	FromMessageId *int `json:"from_message_id,omitempty"`

	// FromUserId If set, only messages sent by the specified sender will be returned
	FromUserId *int `json:"from_user_id,omitempty"`

	// Query Query to search for.
	Query string `json:"query"`
}

// PostSearchChatMessagesFormdataBody defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostSearchChatMessagesFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchChatMessagesFormdataBodyFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// FromMessageId Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
	FromMessageId *int `form:"from_message_id,omitempty" json:"from_message_id,omitempty"`

	// FromUserId If set, only messages sent by the specified sender will be returned
	FromUserId *int `form:"from_user_id,omitempty" json:"from_user_id,omitempty"`

	// Query Query to search for.
	Query string `form:"query" json:"query"`
}

// PostSearchChatMessagesMultipartBody defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
	ChatId PostSearchChatMessagesMultipartBody_ChatId `json:"chat_id"`

	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `call`, `chat_photo`, `document`, `failed_to_send`, `mention`, `missed_call`, `photo`, `photo_and_video`, `pinned`, `unread_mention`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchChatMessagesMultipartBodyFilter `json:"filter,omitempty"`

	// FromMessageId Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
	FromMessageId *int `json:"from_message_id,omitempty"`

	// FromUserId If set, only messages sent by the specified sender will be returned
	FromUserId *int `json:"from_user_id,omitempty"`

	// Query Query to search for.
	Query string `json:"query"`
}

// PostSearchChatMessagesJSONBodyChatId0 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesJSONBodyChatId0 = int

// PostSearchChatMessagesJSONBodyChatId1 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesJSONBodyChatId1 = string

// PostSearchChatMessagesJSONBody_ChatId defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSearchChatMessagesJSONBodyFilter defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesJSONBodyFilter string

// PostSearchChatMessagesFormdataBodyChatId0 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesFormdataBodyChatId0 = int

// PostSearchChatMessagesFormdataBodyChatId1 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesFormdataBodyChatId1 = string

// PostSearchChatMessagesFormdataBody_ChatId defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSearchChatMessagesFormdataBodyFilter defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesFormdataBodyFilter string

// PostSearchChatMessagesMultipartBodyChatId0 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesMultipartBodyChatId0 = int

// PostSearchChatMessagesMultipartBodyChatId1 defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesMultipartBodyChatId1 = string

// PostSearchChatMessagesMultipartBody_ChatId defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSearchChatMessagesMultipartBodyFilter defines parameters for PostSearchChatMessages.
type PostSearchChatMessagesMultipartBodyFilter string

// PostSearchMessagesJSONBody defines parameters for PostSearchMessages.
type PostSearchMessagesJSONBody struct {
	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchMessagesJSONBodyFilter `json:"filter,omitempty"`

	// OffsetChatId The chat identifier of the last found message, or 0 for the first request.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`

	// OffsetDate The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
	OffsetDate *int `json:"offset_date,omitempty"`

	// OffsetMessageId The chat identifier of the last found message, or 0 for the first request.
	OffsetMessageId *int `json:"offset_message_id,omitempty"`

	// Query Query to search for.
	Query string `json:"query"`
}

// PostSearchMessagesFormdataBody defines parameters for PostSearchMessages.
type PostSearchMessagesFormdataBody struct {
	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchMessagesFormdataBodyFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// OffsetChatId The chat identifier of the last found message, or 0 for the first request.
	OffsetChatId *int `form:"offset_chat_id,omitempty" json:"offset_chat_id,omitempty"`

	// OffsetDate The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
	OffsetDate *int `form:"offset_date,omitempty" json:"offset_date,omitempty"`

	// OffsetMessageId The chat identifier of the last found message, or 0 for the first request.
	OffsetMessageId *int `form:"offset_message_id,omitempty" json:"offset_message_id,omitempty"`

	// Query Query to search for.
	Query string `form:"query" json:"query"`
}

// PostSearchMessagesMultipartBody defines parameters for PostSearchMessages.
type PostSearchMessagesMultipartBody struct {
	// Filter Filter for message content in the search results. Must be one of `animation`, `audio`, `chat_photo`, `document`, `photo`, `photo_and_video`, `url`, `video`, `video_note`, `voice_and_video_note` or `voice_note`
	Filter *PostSearchMessagesMultipartBodyFilter `json:"filter,omitempty"`

	// OffsetChatId The chat identifier of the last found message, or 0 for the first request.
	OffsetChatId *int `json:"offset_chat_id,omitempty"`

	// OffsetDate The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message.
	OffsetDate *int `json:"offset_date,omitempty"`

	// OffsetMessageId The chat identifier of the last found message, or 0 for the first request.
	OffsetMessageId *int `json:"offset_message_id,omitempty"`

	// Query Query to search for.
	Query string `json:"query"`
}

// PostSearchMessagesJSONBodyFilter defines parameters for PostSearchMessages.
type PostSearchMessagesJSONBodyFilter string

// PostSearchMessagesFormdataBodyFilter defines parameters for PostSearchMessages.
type PostSearchMessagesFormdataBodyFilter string

// PostSearchMessagesMultipartBodyFilter defines parameters for PostSearchMessages.
type PostSearchMessagesMultipartBodyFilter string

// PostSearchPublicChatsJSONBody defines parameters for PostSearchPublicChats.
type PostSearchPublicChatsJSONBody struct {
	// Query Query to search for.
	Query string `json:"query"`
}

// PostSearchPublicChatsFormdataBody defines parameters for PostSearchPublicChats.
type PostSearchPublicChatsFormdataBody struct {
	// Query Query to search for.
	Query string `form:"query" json:"query"`
}

// PostSearchPublicChatsMultipartBody defines parameters for PostSearchPublicChats.
type PostSearchPublicChatsMultipartBody struct {
	// Query Query to search for.
	Query string `json:"query"`
}

// PostSendAnimationMultipartBody defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Animation Animation to send. Pass a file\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Animation PostSendAnimationMultipartBody_Animation `json:"animation"`

	// Caption Animation caption (may also be used when resending animation by *file\_id*), 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendAnimationMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Duration Duration of sent animation in seconds
	Duration *int `json:"duration,omitempty"`

	// Height Animation height
	Height *int `json:"height,omitempty"`

	// ParseMode Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendAnimationMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendAnimationMultipartBody_SendAt `json:"send_at,omitempty"`

	// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *PostSendAnimationMultipartBody_Thumb `json:"thumb,omitempty"`

	// Width Animation width
	Width *int `json:"width,omitempty"`
}

// PostSendAnimationMultipartBodyAnimation1 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodyAnimation1 = string

// PostSendAnimationMultipartBody_Animation defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody_Animation struct {
	union json.RawMessage
}

// PostSendAnimationMultipartBodyChatId0 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodyChatId0 = int

// PostSendAnimationMultipartBodyChatId1 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodyChatId1 = string

// PostSendAnimationMultipartBody_ChatId defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendAnimationMultipartBody_ReplyMarkup defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendAnimationMultipartBodySendAt0 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodySendAt0 = int

// PostSendAnimationMultipartBodySendAt1 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodySendAt1 = string

// PostSendAnimationMultipartBody_SendAt defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendAnimationMultipartBodyThumb1 defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBodyThumb1 = string

// PostSendAnimationMultipartBody_Thumb defines parameters for PostSendAnimation.
type PostSendAnimationMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSendAudioMultipartBody defines parameters for PostSendAudio.
type PostSendAudioMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Audio Audio file to send. Pass a file\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Audio PostSendAudioMultipartBody_Audio `json:"audio"`

	// Caption Audio caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendAudioMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Duration Duration of the audio in seconds
	Duration *int `json:"duration,omitempty"`

	// ParseMode Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Performer Performer
	Performer *string `json:"performer,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendAudioMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendAudioMultipartBody_SendAt `json:"send_at,omitempty"`

	// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *PostSendAudioMultipartBody_Thumb `json:"thumb,omitempty"`

	// Title Track name
	Title *string `json:"title,omitempty"`
}

// PostSendAudioMultipartBodyAudio1 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodyAudio1 = string

// PostSendAudioMultipartBody_Audio defines parameters for PostSendAudio.
type PostSendAudioMultipartBody_Audio struct {
	union json.RawMessage
}

// PostSendAudioMultipartBodyChatId0 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodyChatId0 = int

// PostSendAudioMultipartBodyChatId1 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodyChatId1 = string

// PostSendAudioMultipartBody_ChatId defines parameters for PostSendAudio.
type PostSendAudioMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendAudioMultipartBody_ReplyMarkup defines parameters for PostSendAudio.
type PostSendAudioMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendAudioMultipartBodySendAt0 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodySendAt0 = int

// PostSendAudioMultipartBodySendAt1 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodySendAt1 = string

// PostSendAudioMultipartBody_SendAt defines parameters for PostSendAudio.
type PostSendAudioMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendAudioMultipartBodyThumb1 defines parameters for PostSendAudio.
type PostSendAudioMultipartBodyThumb1 = string

// PostSendAudioMultipartBody_Thumb defines parameters for PostSendAudio.
type PostSendAudioMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSendChatActionJSONBody defines parameters for PostSendChatAction.
type PostSendChatActionJSONBody struct {
	// Action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
	Action string `json:"action"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendChatActionJSONBody_ChatId `json:"chat_id"`
}

// PostSendChatActionFormdataBody defines parameters for PostSendChatAction.
type PostSendChatActionFormdataBody struct {
	// Action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
	Action string `form:"action" json:"action"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendChatActionFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostSendChatActionMultipartBody defines parameters for PostSendChatAction.
type PostSendChatActionMultipartBody struct {
	// Action Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
	Action string `json:"action"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendChatActionMultipartBody_ChatId `json:"chat_id"`
}

// PostSendChatActionJSONBodyChatId0 defines parameters for PostSendChatAction.
type PostSendChatActionJSONBodyChatId0 = int

// PostSendChatActionJSONBodyChatId1 defines parameters for PostSendChatAction.
type PostSendChatActionJSONBodyChatId1 = string

// PostSendChatActionJSONBody_ChatId defines parameters for PostSendChatAction.
type PostSendChatActionJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendChatActionFormdataBodyChatId0 defines parameters for PostSendChatAction.
type PostSendChatActionFormdataBodyChatId0 = int

// PostSendChatActionFormdataBodyChatId1 defines parameters for PostSendChatAction.
type PostSendChatActionFormdataBodyChatId1 = string

// PostSendChatActionFormdataBody_ChatId defines parameters for PostSendChatAction.
type PostSendChatActionFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendChatActionMultipartBodyChatId0 defines parameters for PostSendChatAction.
type PostSendChatActionMultipartBodyChatId0 = int

// PostSendChatActionMultipartBodyChatId1 defines parameters for PostSendChatAction.
type PostSendChatActionMultipartBodyChatId1 = string

// PostSendChatActionMultipartBody_ChatId defines parameters for PostSendChatAction.
type PostSendChatActionMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendContactJSONBody defines parameters for PostSendContact.
type PostSendContactJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendContactJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FirstName Contact's first name
	FirstName string `json:"first_name"`

	// LastName Contact's last name
	LastName *string `json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `json:"phone_number"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
	ReplyMarkup *PostSendContactJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendContactJSONBody_SendAt `json:"send_at,omitempty"`

	// Vcard Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
	Vcard *string `json:"vcard,omitempty"`
}

// PostSendContactFormdataBody defines parameters for PostSendContact.
type PostSendContactFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendContactFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// FirstName Contact's first name
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Contact's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `form:"phone_number" json:"phone_number"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
	ReplyMarkup *PostSendContactFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendContactFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`

	// Vcard Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
	Vcard *string `form:"vcard,omitempty" json:"vcard,omitempty"`
}

// PostSendContactMultipartBody defines parameters for PostSendContact.
type PostSendContactMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendContactMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FirstName Contact's first name
	FirstName string `json:"first_name"`

	// LastName Contact's last name
	LastName *string `json:"last_name,omitempty"`

	// PhoneNumber Contact's phone number
	PhoneNumber string `json:"phone_number"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
	ReplyMarkup *PostSendContactMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendContactMultipartBody_SendAt `json:"send_at,omitempty"`

	// Vcard Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
	Vcard *string `json:"vcard,omitempty"`
}

// PostSendContactJSONBodyChatId0 defines parameters for PostSendContact.
type PostSendContactJSONBodyChatId0 = int

// PostSendContactJSONBodyChatId1 defines parameters for PostSendContact.
type PostSendContactJSONBodyChatId1 = string

// PostSendContactJSONBody_ChatId defines parameters for PostSendContact.
type PostSendContactJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendContactJSONBody_ReplyMarkup defines parameters for PostSendContact.
type PostSendContactJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendContactJSONBodySendAt0 defines parameters for PostSendContact.
type PostSendContactJSONBodySendAt0 = int

// PostSendContactJSONBodySendAt1 defines parameters for PostSendContact.
type PostSendContactJSONBodySendAt1 = string

// PostSendContactJSONBody_SendAt defines parameters for PostSendContact.
type PostSendContactJSONBody_SendAt struct {
	union json.RawMessage
}

// PostSendContactFormdataBodyChatId0 defines parameters for PostSendContact.
type PostSendContactFormdataBodyChatId0 = int

// PostSendContactFormdataBodyChatId1 defines parameters for PostSendContact.
type PostSendContactFormdataBodyChatId1 = string

// PostSendContactFormdataBody_ChatId defines parameters for PostSendContact.
type PostSendContactFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendContactFormdataBody_ReplyMarkup defines parameters for PostSendContact.
type PostSendContactFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendContactFormdataBodySendAt0 defines parameters for PostSendContact.
type PostSendContactFormdataBodySendAt0 = int

// PostSendContactFormdataBodySendAt1 defines parameters for PostSendContact.
type PostSendContactFormdataBodySendAt1 = string

// PostSendContactFormdataBody_SendAt defines parameters for PostSendContact.
type PostSendContactFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendContactMultipartBodyChatId0 defines parameters for PostSendContact.
type PostSendContactMultipartBodyChatId0 = int

// PostSendContactMultipartBodyChatId1 defines parameters for PostSendContact.
type PostSendContactMultipartBodyChatId1 = string

// PostSendContactMultipartBody_ChatId defines parameters for PostSendContact.
type PostSendContactMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendContactMultipartBody_ReplyMarkup defines parameters for PostSendContact.
type PostSendContactMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendContactMultipartBodySendAt0 defines parameters for PostSendContact.
type PostSendContactMultipartBodySendAt0 = int

// PostSendContactMultipartBodySendAt1 defines parameters for PostSendContact.
type PostSendContactMultipartBodySendAt1 = string

// PostSendContactMultipartBody_SendAt defines parameters for PostSendContact.
type PostSendContactMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendDiceJSONBody defines parameters for PostSendDice.
type PostSendDiceJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendDiceJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Emoji Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
	Emoji *PostSendDiceJSONBodyEmoji `json:"emoji,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendDiceJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendDiceJSONBody_SendAt `json:"send_at,omitempty"`
}

// PostSendDiceFormdataBody defines parameters for PostSendDice.
type PostSendDiceFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendDiceFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// Emoji Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
	Emoji *PostSendDiceFormdataBodyEmoji `form:"emoji,omitempty" json:"emoji,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendDiceFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendDiceFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`
}

// PostSendDiceMultipartBody defines parameters for PostSendDice.
type PostSendDiceMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendDiceMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Emoji Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
	Emoji *PostSendDiceMultipartBodyEmoji `json:"emoji,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendDiceMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendDiceMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostSendDiceJSONBodyChatId0 defines parameters for PostSendDice.
type PostSendDiceJSONBodyChatId0 = int

// PostSendDiceJSONBodyChatId1 defines parameters for PostSendDice.
type PostSendDiceJSONBodyChatId1 = string

// PostSendDiceJSONBody_ChatId defines parameters for PostSendDice.
type PostSendDiceJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendDiceJSONBodyEmoji defines parameters for PostSendDice.
type PostSendDiceJSONBodyEmoji string

// PostSendDiceJSONBody_ReplyMarkup defines parameters for PostSendDice.
type PostSendDiceJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendDiceJSONBodySendAt0 defines parameters for PostSendDice.
type PostSendDiceJSONBodySendAt0 = int

// PostSendDiceJSONBodySendAt1 defines parameters for PostSendDice.
type PostSendDiceJSONBodySendAt1 = string

// PostSendDiceJSONBody_SendAt defines parameters for PostSendDice.
type PostSendDiceJSONBody_SendAt struct {
	union json.RawMessage
}

// PostSendDiceFormdataBodyChatId0 defines parameters for PostSendDice.
type PostSendDiceFormdataBodyChatId0 = int

// PostSendDiceFormdataBodyChatId1 defines parameters for PostSendDice.
type PostSendDiceFormdataBodyChatId1 = string

// PostSendDiceFormdataBody_ChatId defines parameters for PostSendDice.
type PostSendDiceFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendDiceFormdataBodyEmoji defines parameters for PostSendDice.
type PostSendDiceFormdataBodyEmoji string

// PostSendDiceFormdataBody_ReplyMarkup defines parameters for PostSendDice.
type PostSendDiceFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendDiceFormdataBodySendAt0 defines parameters for PostSendDice.
type PostSendDiceFormdataBodySendAt0 = int

// PostSendDiceFormdataBodySendAt1 defines parameters for PostSendDice.
type PostSendDiceFormdataBodySendAt1 = string

// PostSendDiceFormdataBody_SendAt defines parameters for PostSendDice.
type PostSendDiceFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendDiceMultipartBodyChatId0 defines parameters for PostSendDice.
type PostSendDiceMultipartBodyChatId0 = int

// PostSendDiceMultipartBodyChatId1 defines parameters for PostSendDice.
type PostSendDiceMultipartBodyChatId1 = string

// PostSendDiceMultipartBody_ChatId defines parameters for PostSendDice.
type PostSendDiceMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendDiceMultipartBodyEmoji defines parameters for PostSendDice.
type PostSendDiceMultipartBodyEmoji string

// PostSendDiceMultipartBody_ReplyMarkup defines parameters for PostSendDice.
type PostSendDiceMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendDiceMultipartBodySendAt0 defines parameters for PostSendDice.
type PostSendDiceMultipartBodySendAt0 = int

// PostSendDiceMultipartBodySendAt1 defines parameters for PostSendDice.
type PostSendDiceMultipartBodySendAt1 = string

// PostSendDiceMultipartBody_SendAt defines parameters for PostSendDice.
type PostSendDiceMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendDocumentMultipartBody defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption Document caption (may also be used when resending documents by *file\_id*), 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendDocumentMultipartBody_ChatId `json:"chat_id"`

	// DisableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data
	DisableContentTypeDetection *bool `json:"disable_content_type_detection,omitempty"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Document File to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Document PostSendDocumentMultipartBody_Document `json:"document"`

	// ParseMode Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendDocumentMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendDocumentMultipartBody_SendAt `json:"send_at,omitempty"`

	// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *PostSendDocumentMultipartBody_Thumb `json:"thumb,omitempty"`
}

// PostSendDocumentMultipartBodyChatId0 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodyChatId0 = int

// PostSendDocumentMultipartBodyChatId1 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodyChatId1 = string

// PostSendDocumentMultipartBody_ChatId defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendDocumentMultipartBodyDocument1 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodyDocument1 = string

// PostSendDocumentMultipartBody_Document defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody_Document struct {
	union json.RawMessage
}

// PostSendDocumentMultipartBody_ReplyMarkup defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendDocumentMultipartBodySendAt0 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodySendAt0 = int

// PostSendDocumentMultipartBodySendAt1 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodySendAt1 = string

// PostSendDocumentMultipartBody_SendAt defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendDocumentMultipartBodyThumb1 defines parameters for PostSendDocument.
type PostSendDocumentMultipartBodyThumb1 = string

// PostSendDocumentMultipartBody_Thumb defines parameters for PostSendDocument.
type PostSendDocumentMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSendGameJSONBody defines parameters for PostSendGame.
type PostSendGameJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat
	ChatId int `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// GameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
	GameShortName string `json:"game_short_name"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`
}

// PostSendGameFormdataBody defines parameters for PostSendGame.
type PostSendGameFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat
	ChatId int `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// GameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
	GameShortName string `form:"game_short_name" json:"game_short_name"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`
}

// PostSendGameMultipartBody defines parameters for PostSendGame.
type PostSendGameMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat
	ChatId int `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// GameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
	GameShortName string `json:"game_short_name"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`
}

// PostSendInvoiceJSONBody defines parameters for PostSendInvoice.
type PostSendInvoiceJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target private chat
	ChatId int `json:"chat_id"`

	// Currency Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
	Currency string `json:"currency"`

	// Description Product description, 1-255 characters
	Description string `json:"description"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// IsFlexible Pass *True*, if the final price depends on the shipping method
	IsFlexible *bool `json:"is_flexible,omitempty"`

	// NeedEmail Pass *True*, if you require the user's email address to complete the order
	NeedEmail *bool `json:"need_email,omitempty"`

	// NeedName Pass *True*, if you require the user's full name to complete the order
	NeedName *bool `json:"need_name,omitempty"`

	// NeedPhoneNumber Pass *True*, if you require the user's phone number to complete the order
	NeedPhoneNumber *bool `json:"need_phone_number,omitempty"`

	// NeedShippingAddress Pass *True*, if you require the user's shipping address to complete the order
	NeedShippingAddress *bool `json:"need_shipping_address,omitempty"`

	// Payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
	Payload string `json:"payload"`

	// PhotoHeight Photo height
	PhotoHeight *int `json:"photo_height,omitempty"`

	// PhotoSize Photo size
	PhotoSize *int `json:"photo_size,omitempty"`

	// PhotoUrl URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
	PhotoUrl *string `json:"photo_url,omitempty"`

	// PhotoWidth Photo width
	PhotoWidth *int `json:"photo_width,omitempty"`

	// Prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
	Prices []LabeledPrice `json:"prices"`

	// ProviderData A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
	ProviderData *string `json:"provider_data,omitempty"`

	// ProviderToken Payments provider token, obtained via [Botfather](https://t.me/botfather)
	ProviderToken string `json:"provider_token"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendEmailToProvider Pass *True*, if user's email address should be sent to provider
	SendEmailToProvider *bool `json:"send_email_to_provider,omitempty"`

	// SendPhoneNumberToProvider Pass *True*, if user's phone number should be sent to provider
	SendPhoneNumberToProvider *bool `json:"send_phone_number_to_provider,omitempty"`

	// StartParameter Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
	StartParameter string `json:"start_parameter"`

	// Title Product name, 1-32 characters
	Title string `json:"title"`
}

// PostSendInvoiceFormdataBody defines parameters for PostSendInvoice.
type PostSendInvoiceFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target private chat
	ChatId int `form:"chat_id" json:"chat_id"`

	// Currency Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
	Currency string `form:"currency" json:"currency"`

	// Description Product description, 1-255 characters
	Description string `form:"description" json:"description"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// IsFlexible Pass *True*, if the final price depends on the shipping method
	IsFlexible *bool `form:"is_flexible,omitempty" json:"is_flexible,omitempty"`

	// NeedEmail Pass *True*, if you require the user's email address to complete the order
	NeedEmail *bool `form:"need_email,omitempty" json:"need_email,omitempty"`

	// NeedName Pass *True*, if you require the user's full name to complete the order
	NeedName *bool `form:"need_name,omitempty" json:"need_name,omitempty"`

	// NeedPhoneNumber Pass *True*, if you require the user's phone number to complete the order
	NeedPhoneNumber *bool `form:"need_phone_number,omitempty" json:"need_phone_number,omitempty"`

	// NeedShippingAddress Pass *True*, if you require the user's shipping address to complete the order
	NeedShippingAddress *bool `form:"need_shipping_address,omitempty" json:"need_shipping_address,omitempty"`

	// Payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
	Payload string `form:"payload" json:"payload"`

	// PhotoHeight Photo height
	PhotoHeight *int `form:"photo_height,omitempty" json:"photo_height,omitempty"`

	// PhotoSize Photo size
	PhotoSize *int `form:"photo_size,omitempty" json:"photo_size,omitempty"`

	// PhotoUrl URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
	PhotoUrl *string `form:"photo_url,omitempty" json:"photo_url,omitempty"`

	// PhotoWidth Photo width
	PhotoWidth *int `form:"photo_width,omitempty" json:"photo_width,omitempty"`

	// Prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
	Prices []LabeledPrice `form:"prices" json:"prices"`

	// ProviderData A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
	ProviderData *string `form:"provider_data,omitempty" json:"provider_data,omitempty"`

	// ProviderToken Payments provider token, obtained via [Botfather](https://t.me/botfather)
	ProviderToken string `form:"provider_token" json:"provider_token"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendEmailToProvider Pass *True*, if user's email address should be sent to provider
	SendEmailToProvider *bool `form:"send_email_to_provider,omitempty" json:"send_email_to_provider,omitempty"`

	// SendPhoneNumberToProvider Pass *True*, if user's phone number should be sent to provider
	SendPhoneNumberToProvider *bool `form:"send_phone_number_to_provider,omitempty" json:"send_phone_number_to_provider,omitempty"`

	// StartParameter Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
	StartParameter string `form:"start_parameter" json:"start_parameter"`

	// Title Product name, 1-32 characters
	Title string `form:"title" json:"title"`
}

// PostSendInvoiceMultipartBody defines parameters for PostSendInvoice.
type PostSendInvoiceMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target private chat
	ChatId int `json:"chat_id"`

	// Currency Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
	Currency string `json:"currency"`

	// Description Product description, 1-255 characters
	Description string `json:"description"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// IsFlexible Pass *True*, if the final price depends on the shipping method
	IsFlexible *bool `json:"is_flexible,omitempty"`

	// NeedEmail Pass *True*, if you require the user's email address to complete the order
	NeedEmail *bool `json:"need_email,omitempty"`

	// NeedName Pass *True*, if you require the user's full name to complete the order
	NeedName *bool `json:"need_name,omitempty"`

	// NeedPhoneNumber Pass *True*, if you require the user's phone number to complete the order
	NeedPhoneNumber *bool `json:"need_phone_number,omitempty"`

	// NeedShippingAddress Pass *True*, if you require the user's shipping address to complete the order
	NeedShippingAddress *bool `json:"need_shipping_address,omitempty"`

	// Payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
	Payload string `json:"payload"`

	// PhotoHeight Photo height
	PhotoHeight *int `json:"photo_height,omitempty"`

	// PhotoSize Photo size
	PhotoSize *int `json:"photo_size,omitempty"`

	// PhotoUrl URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
	PhotoUrl *string `json:"photo_url,omitempty"`

	// PhotoWidth Photo width
	PhotoWidth *int `json:"photo_width,omitempty"`

	// Prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
	Prices []LabeledPrice `json:"prices"`

	// ProviderData A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
	ProviderData *string `json:"provider_data,omitempty"`

	// ProviderToken Payments provider token, obtained via [Botfather](https://t.me/botfather)
	ProviderToken string `json:"provider_token"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendEmailToProvider Pass *True*, if user's email address should be sent to provider
	SendEmailToProvider *bool `json:"send_email_to_provider,omitempty"`

	// SendPhoneNumberToProvider Pass *True*, if user's phone number should be sent to provider
	SendPhoneNumberToProvider *bool `json:"send_phone_number_to_provider,omitempty"`

	// StartParameter Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
	StartParameter string `json:"start_parameter"`

	// Title Product name, 1-32 characters
	Title string `json:"title"`
}

// PostSendLocationJSONBody defines parameters for PostSendLocation.
type PostSendLocationJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendLocationJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Heading For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `json:"latitude"`

	// LivePeriod Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
	LivePeriod *int `json:"live_period,omitempty"`

	// Longitude Longitude of the location
	Longitude float32 `json:"longitude"`

	// ProximityAlertRadius For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendLocationJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
	SendAt *PostSendLocationJSONBody_SendAt `json:"send_at,omitempty"`
}

// PostSendLocationFormdataBody defines parameters for PostSendLocation.
type PostSendLocationFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendLocationFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// Heading For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `form:"heading,omitempty" json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `form:"horizontal_accuracy,omitempty" json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `form:"latitude" json:"latitude"`

	// LivePeriod Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
	LivePeriod *int `form:"live_period,omitempty" json:"live_period,omitempty"`

	// Longitude Longitude of the location
	Longitude float32 `form:"longitude" json:"longitude"`

	// ProximityAlertRadius For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `form:"proximity_alert_radius,omitempty" json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendLocationFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
	SendAt *PostSendLocationFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`
}

// PostSendLocationMultipartBody defines parameters for PostSendLocation.
type PostSendLocationMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendLocationMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Heading For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading *int `json:"heading,omitempty"`

	// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy *float32 `json:"horizontal_accuracy,omitempty"`

	// Latitude Latitude of the location
	Latitude float32 `json:"latitude"`

	// LivePeriod Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
	LivePeriod *int `json:"live_period,omitempty"`

	// Longitude Longitude of the location
	Longitude float32 `json:"longitude"`

	// ProximityAlertRadius For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius *int `json:"proximity_alert_radius,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendLocationMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly. Live locations can not be scheduled.
	SendAt *PostSendLocationMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostSendLocationJSONBodyChatId0 defines parameters for PostSendLocation.
type PostSendLocationJSONBodyChatId0 = int

// PostSendLocationJSONBodyChatId1 defines parameters for PostSendLocation.
type PostSendLocationJSONBodyChatId1 = string

// PostSendLocationJSONBody_ChatId defines parameters for PostSendLocation.
type PostSendLocationJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendLocationJSONBody_ReplyMarkup defines parameters for PostSendLocation.
type PostSendLocationJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendLocationJSONBodySendAt0 defines parameters for PostSendLocation.
type PostSendLocationJSONBodySendAt0 = int

// PostSendLocationJSONBodySendAt1 defines parameters for PostSendLocation.
type PostSendLocationJSONBodySendAt1 = string

// PostSendLocationJSONBody_SendAt defines parameters for PostSendLocation.
type PostSendLocationJSONBody_SendAt struct {
	union json.RawMessage
}

// PostSendLocationFormdataBodyChatId0 defines parameters for PostSendLocation.
type PostSendLocationFormdataBodyChatId0 = int

// PostSendLocationFormdataBodyChatId1 defines parameters for PostSendLocation.
type PostSendLocationFormdataBodyChatId1 = string

// PostSendLocationFormdataBody_ChatId defines parameters for PostSendLocation.
type PostSendLocationFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendLocationFormdataBody_ReplyMarkup defines parameters for PostSendLocation.
type PostSendLocationFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendLocationFormdataBodySendAt0 defines parameters for PostSendLocation.
type PostSendLocationFormdataBodySendAt0 = int

// PostSendLocationFormdataBodySendAt1 defines parameters for PostSendLocation.
type PostSendLocationFormdataBodySendAt1 = string

// PostSendLocationFormdataBody_SendAt defines parameters for PostSendLocation.
type PostSendLocationFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendLocationMultipartBodyChatId0 defines parameters for PostSendLocation.
type PostSendLocationMultipartBodyChatId0 = int

// PostSendLocationMultipartBodyChatId1 defines parameters for PostSendLocation.
type PostSendLocationMultipartBodyChatId1 = string

// PostSendLocationMultipartBody_ChatId defines parameters for PostSendLocation.
type PostSendLocationMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendLocationMultipartBody_ReplyMarkup defines parameters for PostSendLocation.
type PostSendLocationMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendLocationMultipartBodySendAt0 defines parameters for PostSendLocation.
type PostSendLocationMultipartBodySendAt0 = int

// PostSendLocationMultipartBodySendAt1 defines parameters for PostSendLocation.
type PostSendLocationMultipartBodySendAt1 = string

// PostSendLocationMultipartBody_SendAt defines parameters for PostSendLocation.
type PostSendLocationMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendMediaGroupMultipartBody defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendMediaGroupMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Media A JSON-serialized array describing messages to be sent, must include 2-10 items
	Media []PostSendMediaGroupMultipartBody_Media_Item `json:"media"`

	// ReplyToMessageId If the messages are a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendMediaGroupMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostSendMediaGroupMultipartBodyChatId0 defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBodyChatId0 = int

// PostSendMediaGroupMultipartBodyChatId1 defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBodyChatId1 = string

// PostSendMediaGroupMultipartBody_ChatId defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendMediaGroupMultipartBody_Media_Item defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBody_Media_Item struct {
	union json.RawMessage
}

// PostSendMediaGroupMultipartBodySendAt0 defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBodySendAt0 = int

// PostSendMediaGroupMultipartBodySendAt1 defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBodySendAt1 = string

// PostSendMediaGroupMultipartBody_SendAt defines parameters for PostSendMediaGroup.
type PostSendMediaGroupMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendMessageJSONBody defines parameters for PostSendMessage.
type PostSendMessageJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendMessageJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendMessageJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendMessageJSONBody_SendAt `json:"send_at,omitempty"`

	// Text Text of the message to be sent, 1-4096 characters after entities parsing
	Text string `json:"text"`
}

// PostSendMessageFormdataBody defines parameters for PostSendMessage.
type PostSendMessageFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `form:"disable_web_page_preview,omitempty" json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `form:"entities,omitempty" json:"entities,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `form:"parse_mode,omitempty" json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendMessageFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendMessageFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`

	// Text Text of the message to be sent, 1-4096 characters after entities parsing
	Text string `form:"text" json:"text"`
}

// PostSendMessageMultipartBody defines parameters for PostSendMessage.
type PostSendMessageMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendMessageMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// DisableWebPagePreview Disables link previews for links in this message
	DisableWebPagePreview *bool `json:"disable_web_page_preview,omitempty"`

	// Entities List of special entities that appear in message text, which can be specified instead of *parse\_mode*
	Entities *[]MessageEntity `json:"entities,omitempty"`

	// ParseMode Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendMessageMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendMessageMultipartBody_SendAt `json:"send_at,omitempty"`

	// Text Text of the message to be sent, 1-4096 characters after entities parsing
	Text string `json:"text"`
}

// PostSendMessageJSONBodyChatId0 defines parameters for PostSendMessage.
type PostSendMessageJSONBodyChatId0 = int

// PostSendMessageJSONBodyChatId1 defines parameters for PostSendMessage.
type PostSendMessageJSONBodyChatId1 = string

// PostSendMessageJSONBody_ChatId defines parameters for PostSendMessage.
type PostSendMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendMessageJSONBody_ReplyMarkup defines parameters for PostSendMessage.
type PostSendMessageJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendMessageJSONBodySendAt0 defines parameters for PostSendMessage.
type PostSendMessageJSONBodySendAt0 = int

// PostSendMessageJSONBodySendAt1 defines parameters for PostSendMessage.
type PostSendMessageJSONBodySendAt1 = string

// PostSendMessageJSONBody_SendAt defines parameters for PostSendMessage.
type PostSendMessageJSONBody_SendAt struct {
	union json.RawMessage
}

// PostSendMessageFormdataBodyChatId0 defines parameters for PostSendMessage.
type PostSendMessageFormdataBodyChatId0 = int

// PostSendMessageFormdataBodyChatId1 defines parameters for PostSendMessage.
type PostSendMessageFormdataBodyChatId1 = string

// PostSendMessageFormdataBody_ChatId defines parameters for PostSendMessage.
type PostSendMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendMessageFormdataBody_ReplyMarkup defines parameters for PostSendMessage.
type PostSendMessageFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendMessageFormdataBodySendAt0 defines parameters for PostSendMessage.
type PostSendMessageFormdataBodySendAt0 = int

// PostSendMessageFormdataBodySendAt1 defines parameters for PostSendMessage.
type PostSendMessageFormdataBodySendAt1 = string

// PostSendMessageFormdataBody_SendAt defines parameters for PostSendMessage.
type PostSendMessageFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendMessageMultipartBodyChatId0 defines parameters for PostSendMessage.
type PostSendMessageMultipartBodyChatId0 = int

// PostSendMessageMultipartBodyChatId1 defines parameters for PostSendMessage.
type PostSendMessageMultipartBodyChatId1 = string

// PostSendMessageMultipartBody_ChatId defines parameters for PostSendMessage.
type PostSendMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendMessageMultipartBody_ReplyMarkup defines parameters for PostSendMessage.
type PostSendMessageMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendMessageMultipartBodySendAt0 defines parameters for PostSendMessage.
type PostSendMessageMultipartBodySendAt0 = int

// PostSendMessageMultipartBodySendAt1 defines parameters for PostSendMessage.
type PostSendMessageMultipartBodySendAt1 = string

// PostSendMessageMultipartBody_SendAt defines parameters for PostSendMessage.
type PostSendMessageMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendPhotoMultipartBody defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption Photo caption (may also be used when resending photos by *file\_id*), 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendPhotoMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// ParseMode Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// Photo Photo to send. Pass a file\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Photo PostSendPhotoMultipartBody_Photo `json:"photo"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendPhotoMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendPhotoMultipartBody_SendAt `json:"send_at,omitempty"`
}

// PostSendPhotoMultipartBodyChatId0 defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBodyChatId0 = int

// PostSendPhotoMultipartBodyChatId1 defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBodyChatId1 = string

// PostSendPhotoMultipartBody_ChatId defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendPhotoMultipartBodyPhoto1 defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBodyPhoto1 = string

// PostSendPhotoMultipartBody_Photo defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBody_Photo struct {
	union json.RawMessage
}

// PostSendPhotoMultipartBody_ReplyMarkup defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendPhotoMultipartBodySendAt0 defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBodySendAt0 = int

// PostSendPhotoMultipartBodySendAt1 defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBodySendAt1 = string

// PostSendPhotoMultipartBody_SendAt defines parameters for PostSendPhoto.
type PostSendPhotoMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendPollJSONBody defines parameters for PostSendPoll.
type PostSendPollJSONBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// AllowsMultipleAnswers True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
	AllowsMultipleAnswers *bool `json:"allows_multiple_answers,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendPollJSONBody_ChatId `json:"chat_id"`

	// CloseDate Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
	CloseDate *int `json:"close_date,omitempty"`

	// CorrectOptionId 0-based identifier of the correct answer option, required for polls in quiz mode
	CorrectOptionId *int `json:"correct_option_id,omitempty"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Explanation Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
	Explanation *string `json:"explanation,omitempty"`

	// ExplanationEntities List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
	ExplanationEntities *[]MessageEntity `json:"explanation_entities,omitempty"`

	// ExplanationParseMode Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ExplanationParseMode *string `json:"explanation_parse_mode,omitempty"`

	// IsAnonymous True, if the poll needs to be anonymous, defaults to *True*
	IsAnonymous *bool `json:"is_anonymous,omitempty"`

	// IsClosed Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed *bool `json:"is_closed,omitempty"`

	// OpenPeriod Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
	OpenPeriod *int `json:"open_period,omitempty"`

	// Options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
	Options []string `json:"options"`

	// Question Poll question, 1-300 characters
	Question string `json:"question"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendPollJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// Type Poll type, “quiz” or “regular”, defaults to “regular”
	Type *string `json:"type,omitempty"`
}

// PostSendPollFormdataBody defines parameters for PostSendPoll.
type PostSendPollFormdataBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// AllowsMultipleAnswers True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
	AllowsMultipleAnswers *bool `form:"allows_multiple_answers,omitempty" json:"allows_multiple_answers,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendPollFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// CloseDate Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
	CloseDate *int `form:"close_date,omitempty" json:"close_date,omitempty"`

	// CorrectOptionId 0-based identifier of the correct answer option, required for polls in quiz mode
	CorrectOptionId *int `form:"correct_option_id,omitempty" json:"correct_option_id,omitempty"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// Explanation Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
	Explanation *string `form:"explanation,omitempty" json:"explanation,omitempty"`

	// ExplanationEntities List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
	ExplanationEntities *[]MessageEntity `form:"explanation_entities,omitempty" json:"explanation_entities,omitempty"`

	// ExplanationParseMode Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ExplanationParseMode *string `form:"explanation_parse_mode,omitempty" json:"explanation_parse_mode,omitempty"`

	// IsAnonymous True, if the poll needs to be anonymous, defaults to *True*
	IsAnonymous *bool `form:"is_anonymous,omitempty" json:"is_anonymous,omitempty"`

	// IsClosed Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed *bool `form:"is_closed,omitempty" json:"is_closed,omitempty"`

	// OpenPeriod Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
	OpenPeriod *int `form:"open_period,omitempty" json:"open_period,omitempty"`

	// Options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
	Options []string `form:"options" json:"options"`

	// Question Poll question, 1-300 characters
	Question string `form:"question" json:"question"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendPollFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendPollFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`

	// Type Poll type, “quiz” or “regular”, defaults to “regular”
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostSendPollMultipartBody defines parameters for PostSendPoll.
type PostSendPollMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// AllowsMultipleAnswers True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
	AllowsMultipleAnswers *bool `json:"allows_multiple_answers,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendPollMultipartBody_ChatId `json:"chat_id"`

	// CloseDate Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
	CloseDate *int `json:"close_date,omitempty"`

	// CorrectOptionId 0-based identifier of the correct answer option, required for polls in quiz mode
	CorrectOptionId *int `json:"correct_option_id,omitempty"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Explanation Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
	Explanation *string `json:"explanation,omitempty"`

	// ExplanationEntities List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
	ExplanationEntities *[]MessageEntity `json:"explanation_entities,omitempty"`

	// ExplanationParseMode Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ExplanationParseMode *string `json:"explanation_parse_mode,omitempty"`

	// IsAnonymous True, if the poll needs to be anonymous, defaults to *True*
	IsAnonymous *bool `json:"is_anonymous,omitempty"`

	// IsClosed Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed *bool `json:"is_closed,omitempty"`

	// OpenPeriod Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
	OpenPeriod *int `json:"open_period,omitempty"`

	// Options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
	Options []string `json:"options"`

	// Question Poll question, 1-300 characters
	Question string `json:"question"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendPollMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// Type Poll type, “quiz” or “regular”, defaults to “regular”
	Type *string `json:"type,omitempty"`
}

// PostSendPollJSONBodyChatId0 defines parameters for PostSendPoll.
type PostSendPollJSONBodyChatId0 = int

// PostSendPollJSONBodyChatId1 defines parameters for PostSendPoll.
type PostSendPollJSONBodyChatId1 = string

// PostSendPollJSONBody_ChatId defines parameters for PostSendPoll.
type PostSendPollJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendPollJSONBody_ReplyMarkup defines parameters for PostSendPoll.
type PostSendPollJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendPollFormdataBodyChatId0 defines parameters for PostSendPoll.
type PostSendPollFormdataBodyChatId0 = int

// PostSendPollFormdataBodyChatId1 defines parameters for PostSendPoll.
type PostSendPollFormdataBodyChatId1 = string

// PostSendPollFormdataBody_ChatId defines parameters for PostSendPoll.
type PostSendPollFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendPollFormdataBody_ReplyMarkup defines parameters for PostSendPoll.
type PostSendPollFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendPollFormdataBodySendAt0 defines parameters for PostSendPoll.
type PostSendPollFormdataBodySendAt0 = int

// PostSendPollFormdataBodySendAt1 defines parameters for PostSendPoll.
type PostSendPollFormdataBodySendAt1 = string

// PostSendPollFormdataBody_SendAt defines parameters for PostSendPoll.
type PostSendPollFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendPollMultipartBodyChatId0 defines parameters for PostSendPoll.
type PostSendPollMultipartBodyChatId0 = int

// PostSendPollMultipartBodyChatId1 defines parameters for PostSendPoll.
type PostSendPollMultipartBodyChatId1 = string

// PostSendPollMultipartBody_ChatId defines parameters for PostSendPoll.
type PostSendPollMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendPollMultipartBody_ReplyMarkup defines parameters for PostSendPoll.
type PostSendPollMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendStickerMultipartBody defines parameters for PostSendSticker.
type PostSendStickerMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendStickerMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendStickerMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendStickerMultipartBody_SendAt `json:"send_at,omitempty"`

	// Sticker Sticker to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Sticker PostSendStickerMultipartBody_Sticker `json:"sticker"`
}

// PostSendStickerMultipartBodyChatId0 defines parameters for PostSendSticker.
type PostSendStickerMultipartBodyChatId0 = int

// PostSendStickerMultipartBodyChatId1 defines parameters for PostSendSticker.
type PostSendStickerMultipartBodyChatId1 = string

// PostSendStickerMultipartBody_ChatId defines parameters for PostSendSticker.
type PostSendStickerMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendStickerMultipartBody_ReplyMarkup defines parameters for PostSendSticker.
type PostSendStickerMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendStickerMultipartBodySendAt0 defines parameters for PostSendSticker.
type PostSendStickerMultipartBodySendAt0 = int

// PostSendStickerMultipartBodySendAt1 defines parameters for PostSendSticker.
type PostSendStickerMultipartBodySendAt1 = string

// PostSendStickerMultipartBody_SendAt defines parameters for PostSendSticker.
type PostSendStickerMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendStickerMultipartBodySticker1 defines parameters for PostSendSticker.
type PostSendStickerMultipartBodySticker1 = string

// PostSendStickerMultipartBody_Sticker defines parameters for PostSendSticker.
type PostSendStickerMultipartBody_Sticker struct {
	union json.RawMessage
}

// PostSendVenueJSONBody defines parameters for PostSendVenue.
type PostSendVenueJSONBody struct {
	// Address Address of the venue
	Address string `json:"address"`

	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVenueJSONBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FoursquareId Foursquare identifier of the venue
	FoursquareId *string `json:"foursquare_id,omitempty"`

	// FoursquareType Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `json:"foursquare_type,omitempty"`

	// GooglePlaceId Google Places identifier of the venue
	GooglePlaceId *string `json:"google_place_id,omitempty"`

	// GooglePlaceType Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `json:"google_place_type,omitempty"`

	// Latitude Latitude of the venue
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the venue
	Longitude float32 `json:"longitude"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVenueJSONBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendVenueJSONBody_SendAt `json:"send_at,omitempty"`

	// Title Name of the venue
	Title string `json:"title"`
}

// PostSendVenueFormdataBody defines parameters for PostSendVenue.
type PostSendVenueFormdataBody struct {
	// Address Address of the venue
	Address string `form:"address" json:"address"`

	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `form:"allow_sending_without_reply,omitempty" json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVenueFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `form:"disable_notification,omitempty" json:"disable_notification,omitempty"`

	// FoursquareId Foursquare identifier of the venue
	FoursquareId *string `form:"foursquare_id,omitempty" json:"foursquare_id,omitempty"`

	// FoursquareType Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `form:"foursquare_type,omitempty" json:"foursquare_type,omitempty"`

	// GooglePlaceId Google Places identifier of the venue
	GooglePlaceId *string `form:"google_place_id,omitempty" json:"google_place_id,omitempty"`

	// GooglePlaceType Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `form:"google_place_type,omitempty" json:"google_place_type,omitempty"`

	// Latitude Latitude of the venue
	Latitude float32 `form:"latitude" json:"latitude"`

	// Longitude Longitude of the venue
	Longitude float32 `form:"longitude" json:"longitude"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVenueFormdataBody_ReplyMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `form:"reply_to_message_id,omitempty" json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendVenueFormdataBody_SendAt `form:"send_at,omitempty" json:"send_at,omitempty"`

	// Title Name of the venue
	Title string `form:"title" json:"title"`
}

// PostSendVenueMultipartBody defines parameters for PostSendVenue.
type PostSendVenueMultipartBody struct {
	// Address Address of the venue
	Address string `json:"address"`

	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVenueMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// FoursquareId Foursquare identifier of the venue
	FoursquareId *string `json:"foursquare_id,omitempty"`

	// FoursquareType Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
	FoursquareType *string `json:"foursquare_type,omitempty"`

	// GooglePlaceId Google Places identifier of the venue
	GooglePlaceId *string `json:"google_place_id,omitempty"`

	// GooglePlaceType Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
	GooglePlaceType *string `json:"google_place_type,omitempty"`

	// Latitude Latitude of the venue
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the venue
	Longitude float32 `json:"longitude"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVenueMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly.
	SendAt *PostSendVenueMultipartBody_SendAt `json:"send_at,omitempty"`

	// Title Name of the venue
	Title string `json:"title"`
}

// PostSendVenueJSONBodyChatId0 defines parameters for PostSendVenue.
type PostSendVenueJSONBodyChatId0 = int

// PostSendVenueJSONBodyChatId1 defines parameters for PostSendVenue.
type PostSendVenueJSONBodyChatId1 = string

// PostSendVenueJSONBody_ChatId defines parameters for PostSendVenue.
type PostSendVenueJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSendVenueJSONBody_ReplyMarkup defines parameters for PostSendVenue.
type PostSendVenueJSONBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVenueJSONBodySendAt0 defines parameters for PostSendVenue.
type PostSendVenueJSONBodySendAt0 = int

// PostSendVenueJSONBodySendAt1 defines parameters for PostSendVenue.
type PostSendVenueJSONBodySendAt1 = string

// PostSendVenueJSONBody_SendAt defines parameters for PostSendVenue.
type PostSendVenueJSONBody_SendAt struct {
	union json.RawMessage
}

// PostSendVenueFormdataBodyChatId0 defines parameters for PostSendVenue.
type PostSendVenueFormdataBodyChatId0 = int

// PostSendVenueFormdataBodyChatId1 defines parameters for PostSendVenue.
type PostSendVenueFormdataBodyChatId1 = string

// PostSendVenueFormdataBody_ChatId defines parameters for PostSendVenue.
type PostSendVenueFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSendVenueFormdataBody_ReplyMarkup defines parameters for PostSendVenue.
type PostSendVenueFormdataBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVenueFormdataBodySendAt0 defines parameters for PostSendVenue.
type PostSendVenueFormdataBodySendAt0 = int

// PostSendVenueFormdataBodySendAt1 defines parameters for PostSendVenue.
type PostSendVenueFormdataBodySendAt1 = string

// PostSendVenueFormdataBody_SendAt defines parameters for PostSendVenue.
type PostSendVenueFormdataBody_SendAt struct {
	union json.RawMessage
}

// PostSendVenueMultipartBodyChatId0 defines parameters for PostSendVenue.
type PostSendVenueMultipartBodyChatId0 = int

// PostSendVenueMultipartBodyChatId1 defines parameters for PostSendVenue.
type PostSendVenueMultipartBodyChatId1 = string

// PostSendVenueMultipartBody_ChatId defines parameters for PostSendVenue.
type PostSendVenueMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendVenueMultipartBody_ReplyMarkup defines parameters for PostSendVenue.
type PostSendVenueMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVenueMultipartBodySendAt0 defines parameters for PostSendVenue.
type PostSendVenueMultipartBodySendAt0 = int

// PostSendVenueMultipartBodySendAt1 defines parameters for PostSendVenue.
type PostSendVenueMultipartBodySendAt1 = string

// PostSendVenueMultipartBody_SendAt defines parameters for PostSendVenue.
type PostSendVenueMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendVideoMultipartBody defines parameters for PostSendVideo.
type PostSendVideoMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption Video caption (may also be used when resending videos by *file\_id*), 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVideoMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Duration Duration of sent video in seconds
	Duration *int `json:"duration,omitempty"`

	// Height Video height
	Height *int `json:"height,omitempty"`

	// ParseMode Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVideoMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendVideoMultipartBody_SendAt `json:"send_at,omitempty"`

	// SupportsStreaming Pass *True*, if the uploaded video is suitable for streaming
	SupportsStreaming *bool `json:"supports_streaming,omitempty"`

	// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *PostSendVideoMultipartBody_Thumb `json:"thumb,omitempty"`

	// Video Video to send. Pass a file\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Video PostSendVideoMultipartBody_Video `json:"video"`

	// Width Video width
	Width *int `json:"width,omitempty"`
}

// PostSendVideoMultipartBodyChatId0 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodyChatId0 = int

// PostSendVideoMultipartBodyChatId1 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodyChatId1 = string

// PostSendVideoMultipartBody_ChatId defines parameters for PostSendVideo.
type PostSendVideoMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendVideoMultipartBody_ReplyMarkup defines parameters for PostSendVideo.
type PostSendVideoMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVideoMultipartBodySendAt0 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodySendAt0 = int

// PostSendVideoMultipartBodySendAt1 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodySendAt1 = string

// PostSendVideoMultipartBody_SendAt defines parameters for PostSendVideo.
type PostSendVideoMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendVideoMultipartBodyThumb1 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodyThumb1 = string

// PostSendVideoMultipartBody_Thumb defines parameters for PostSendVideo.
type PostSendVideoMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSendVideoMultipartBodyVideo1 defines parameters for PostSendVideo.
type PostSendVideoMultipartBodyVideo1 = string

// PostSendVideoMultipartBody_Video defines parameters for PostSendVideo.
type PostSendVideoMultipartBody_Video struct {
	union json.RawMessage
}

// PostSendVideoNoteMultipartBody defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVideoNoteMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Duration Duration of sent video in seconds
	Duration *int `json:"duration,omitempty"`

	// Length Video width and height, i.e. diameter of the video message
	Length *int `json:"length,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVideoNoteMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendVideoNoteMultipartBody_SendAt `json:"send_at,omitempty"`

	// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Thumb *PostSendVideoNoteMultipartBody_Thumb `json:"thumb,omitempty"`

	// VideoNote Video note to send. Pass a file\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
	VideoNote PostSendVideoNoteMultipartBody_VideoNote `json:"video_note"`
}

// PostSendVideoNoteMultipartBodyChatId0 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodyChatId0 = int

// PostSendVideoNoteMultipartBodyChatId1 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodyChatId1 = string

// PostSendVideoNoteMultipartBody_ChatId defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendVideoNoteMultipartBody_ReplyMarkup defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVideoNoteMultipartBodySendAt0 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodySendAt0 = int

// PostSendVideoNoteMultipartBodySendAt1 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodySendAt1 = string

// PostSendVideoNoteMultipartBody_SendAt defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendVideoNoteMultipartBodyThumb1 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodyThumb1 = string

// PostSendVideoNoteMultipartBody_Thumb defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSendVideoNoteMultipartBodyVideoNote1 defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBodyVideoNote1 = string

// PostSendVideoNoteMultipartBody_VideoNote defines parameters for PostSendVideoNote.
type PostSendVideoNoteMultipartBody_VideoNote struct {
	union json.RawMessage
}

// PostSendVoiceMultipartBody defines parameters for PostSendVoice.
type PostSendVoiceMultipartBody struct {
	// AllowSendingWithoutReply Pass *True*, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply *bool `json:"allow_sending_without_reply,omitempty"`

	// Caption Voice message caption, 0-1024 characters after entities parsing
	Caption *string `json:"caption,omitempty"`

	// CaptionEntities List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
	CaptionEntities *[]MessageEntity `json:"caption_entities,omitempty"`

	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSendVoiceMultipartBody_ChatId `json:"chat_id"`

	// DisableNotification Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
	DisableNotification *bool `json:"disable_notification,omitempty"`

	// Duration Duration of the voice message in seconds
	Duration *int `json:"duration,omitempty"`

	// ParseMode Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
	ParseMode *string `json:"parse_mode,omitempty"`

	// ReplyMarkup Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup *PostSendVoiceMultipartBody_ReplyMarkup `json:"reply_markup,omitempty"`

	// ReplyToMessageId If the message is a reply, ID of the original message
	ReplyToMessageId *int `json:"reply_to_message_id,omitempty"`

	// SendAt Users only. Send the message as a scheduled message. Scheduled Messages have a negative `message_id`. Must be either a unix timestamp not further than 365 days in the future or `online` as string to send when the other chat participant comes online. Leave empty to send the message instantly
	SendAt *PostSendVoiceMultipartBody_SendAt `json:"send_at,omitempty"`

	// Voice Audio file to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
	Voice PostSendVoiceMultipartBody_Voice `json:"voice"`
}

// PostSendVoiceMultipartBodyChatId0 defines parameters for PostSendVoice.
type PostSendVoiceMultipartBodyChatId0 = int

// PostSendVoiceMultipartBodyChatId1 defines parameters for PostSendVoice.
type PostSendVoiceMultipartBodyChatId1 = string

// PostSendVoiceMultipartBody_ChatId defines parameters for PostSendVoice.
type PostSendVoiceMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSendVoiceMultipartBody_ReplyMarkup defines parameters for PostSendVoice.
type PostSendVoiceMultipartBody_ReplyMarkup struct {
	union json.RawMessage
}

// PostSendVoiceMultipartBodySendAt0 defines parameters for PostSendVoice.
type PostSendVoiceMultipartBodySendAt0 = int

// PostSendVoiceMultipartBodySendAt1 defines parameters for PostSendVoice.
type PostSendVoiceMultipartBodySendAt1 = string

// PostSendVoiceMultipartBody_SendAt defines parameters for PostSendVoice.
type PostSendVoiceMultipartBody_SendAt struct {
	union json.RawMessage
}

// PostSendVoiceMultipartBodyVoice1 defines parameters for PostSendVoice.
type PostSendVoiceMultipartBodyVoice1 = string

// PostSendVoiceMultipartBody_Voice defines parameters for PostSendVoice.
type PostSendVoiceMultipartBody_Voice struct {
	union json.RawMessage
}

// PostSetChatAdministratorCustomTitleJSONBody defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatAdministratorCustomTitleJSONBody_ChatId `json:"chat_id"`

	// CustomTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
	CustomTitle string `json:"custom_title"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostSetChatAdministratorCustomTitleFormdataBody defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatAdministratorCustomTitleFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// CustomTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
	CustomTitle string `form:"custom_title" json:"custom_title"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostSetChatAdministratorCustomTitleMultipartBody defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatAdministratorCustomTitleMultipartBody_ChatId `json:"chat_id"`

	// CustomTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
	CustomTitle string `json:"custom_title"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostSetChatAdministratorCustomTitleJSONBodyChatId0 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleJSONBodyChatId0 = int

// PostSetChatAdministratorCustomTitleJSONBodyChatId1 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleJSONBodyChatId1 = string

// PostSetChatAdministratorCustomTitleJSONBody_ChatId defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatAdministratorCustomTitleFormdataBodyChatId0 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleFormdataBodyChatId0 = int

// PostSetChatAdministratorCustomTitleFormdataBodyChatId1 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleFormdataBodyChatId1 = string

// PostSetChatAdministratorCustomTitleFormdataBody_ChatId defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatAdministratorCustomTitleMultipartBodyChatId0 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleMultipartBodyChatId0 = int

// PostSetChatAdministratorCustomTitleMultipartBodyChatId1 defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleMultipartBodyChatId1 = string

// PostSetChatAdministratorCustomTitleMultipartBody_ChatId defines parameters for PostSetChatAdministratorCustomTitle.
type PostSetChatAdministratorCustomTitleMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatDescriptionJSONBody defines parameters for PostSetChatDescription.
type PostSetChatDescriptionJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatDescriptionJSONBody_ChatId `json:"chat_id"`

	// Description New chat description, 0-255 characters
	Description *string `json:"description,omitempty"`
}

// PostSetChatDescriptionFormdataBody defines parameters for PostSetChatDescription.
type PostSetChatDescriptionFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatDescriptionFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Description New chat description, 0-255 characters
	Description *string `form:"description,omitempty" json:"description,omitempty"`
}

// PostSetChatDescriptionMultipartBody defines parameters for PostSetChatDescription.
type PostSetChatDescriptionMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatDescriptionMultipartBody_ChatId `json:"chat_id"`

	// Description New chat description, 0-255 characters
	Description *string `json:"description,omitempty"`
}

// PostSetChatDescriptionJSONBodyChatId0 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionJSONBodyChatId0 = int

// PostSetChatDescriptionJSONBodyChatId1 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionJSONBodyChatId1 = string

// PostSetChatDescriptionJSONBody_ChatId defines parameters for PostSetChatDescription.
type PostSetChatDescriptionJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatDescriptionFormdataBodyChatId0 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionFormdataBodyChatId0 = int

// PostSetChatDescriptionFormdataBodyChatId1 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionFormdataBodyChatId1 = string

// PostSetChatDescriptionFormdataBody_ChatId defines parameters for PostSetChatDescription.
type PostSetChatDescriptionFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatDescriptionMultipartBodyChatId0 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionMultipartBodyChatId0 = int

// PostSetChatDescriptionMultipartBodyChatId1 defines parameters for PostSetChatDescription.
type PostSetChatDescriptionMultipartBodyChatId1 = string

// PostSetChatDescriptionMultipartBody_ChatId defines parameters for PostSetChatDescription.
type PostSetChatDescriptionMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatPermissionsJSONBody defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatPermissionsJSONBody_ChatId `json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `json:"permissions"`
}

// PostSetChatPermissionsFormdataBody defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatPermissionsFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `form:"permissions" json:"permissions"`
}

// PostSetChatPermissionsMultipartBody defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatPermissionsMultipartBody_ChatId `json:"chat_id"`

	// Permissions Describes actions that a non-administrator user is allowed to take in a chat.
	Permissions ChatPermissions `json:"permissions"`
}

// PostSetChatPermissionsJSONBodyChatId0 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsJSONBodyChatId0 = int

// PostSetChatPermissionsJSONBodyChatId1 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsJSONBodyChatId1 = string

// PostSetChatPermissionsJSONBody_ChatId defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatPermissionsFormdataBodyChatId0 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsFormdataBodyChatId0 = int

// PostSetChatPermissionsFormdataBodyChatId1 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsFormdataBodyChatId1 = string

// PostSetChatPermissionsFormdataBody_ChatId defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatPermissionsMultipartBodyChatId0 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsMultipartBodyChatId0 = int

// PostSetChatPermissionsMultipartBodyChatId1 defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsMultipartBodyChatId1 = string

// PostSetChatPermissionsMultipartBody_ChatId defines parameters for PostSetChatPermissions.
type PostSetChatPermissionsMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatPhotoMultipartBody defines parameters for PostSetChatPhoto.
type PostSetChatPhotoMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatPhotoMultipartBody_ChatId `json:"chat_id"`

	// Photo This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
	Photo InputFile `json:"photo"`
}

// PostSetChatPhotoMultipartBodyChatId0 defines parameters for PostSetChatPhoto.
type PostSetChatPhotoMultipartBodyChatId0 = int

// PostSetChatPhotoMultipartBodyChatId1 defines parameters for PostSetChatPhoto.
type PostSetChatPhotoMultipartBodyChatId1 = string

// PostSetChatPhotoMultipartBody_ChatId defines parameters for PostSetChatPhoto.
type PostSetChatPhotoMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatStickerSetJSONBody defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatStickerSetJSONBody_ChatId `json:"chat_id"`

	// StickerSetName Name of the sticker set to be set as the group sticker set
	StickerSetName string `json:"sticker_set_name"`
}

// PostSetChatStickerSetFormdataBody defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatStickerSetFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// StickerSetName Name of the sticker set to be set as the group sticker set
	StickerSetName string `form:"sticker_set_name" json:"sticker_set_name"`
}

// PostSetChatStickerSetMultipartBody defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
	ChatId PostSetChatStickerSetMultipartBody_ChatId `json:"chat_id"`

	// StickerSetName Name of the sticker set to be set as the group sticker set
	StickerSetName string `json:"sticker_set_name"`
}

// PostSetChatStickerSetJSONBodyChatId0 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetJSONBodyChatId0 = int

// PostSetChatStickerSetJSONBodyChatId1 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetJSONBodyChatId1 = string

// PostSetChatStickerSetJSONBody_ChatId defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatStickerSetFormdataBodyChatId0 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetFormdataBodyChatId0 = int

// PostSetChatStickerSetFormdataBodyChatId1 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetFormdataBodyChatId1 = string

// PostSetChatStickerSetFormdataBody_ChatId defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatStickerSetMultipartBodyChatId0 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetMultipartBodyChatId0 = int

// PostSetChatStickerSetMultipartBodyChatId1 defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetMultipartBodyChatId1 = string

// PostSetChatStickerSetMultipartBody_ChatId defines parameters for PostSetChatStickerSet.
type PostSetChatStickerSetMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatTitleJSONBody defines parameters for PostSetChatTitle.
type PostSetChatTitleJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatTitleJSONBody_ChatId `json:"chat_id"`

	// Title New chat title, 1-255 characters
	Title string `json:"title"`
}

// PostSetChatTitleFormdataBody defines parameters for PostSetChatTitle.
type PostSetChatTitleFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatTitleFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// Title New chat title, 1-255 characters
	Title string `form:"title" json:"title"`
}

// PostSetChatTitleMultipartBody defines parameters for PostSetChatTitle.
type PostSetChatTitleMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetChatTitleMultipartBody_ChatId `json:"chat_id"`

	// Title New chat title, 1-255 characters
	Title string `json:"title"`
}

// PostSetChatTitleJSONBodyChatId0 defines parameters for PostSetChatTitle.
type PostSetChatTitleJSONBodyChatId0 = int

// PostSetChatTitleJSONBodyChatId1 defines parameters for PostSetChatTitle.
type PostSetChatTitleJSONBodyChatId1 = string

// PostSetChatTitleJSONBody_ChatId defines parameters for PostSetChatTitle.
type PostSetChatTitleJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatTitleFormdataBodyChatId0 defines parameters for PostSetChatTitle.
type PostSetChatTitleFormdataBodyChatId0 = int

// PostSetChatTitleFormdataBodyChatId1 defines parameters for PostSetChatTitle.
type PostSetChatTitleFormdataBodyChatId1 = string

// PostSetChatTitleFormdataBody_ChatId defines parameters for PostSetChatTitle.
type PostSetChatTitleFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetChatTitleMultipartBodyChatId0 defines parameters for PostSetChatTitle.
type PostSetChatTitleMultipartBodyChatId0 = int

// PostSetChatTitleMultipartBodyChatId1 defines parameters for PostSetChatTitle.
type PostSetChatTitleMultipartBodyChatId1 = string

// PostSetChatTitleMultipartBody_ChatId defines parameters for PostSetChatTitle.
type PostSetChatTitleMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetGameScoreJSONBody defines parameters for PostSetGameScore.
type PostSetGameScoreJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `json:"chat_id,omitempty"`

	// DisableEditMessage Pass True, if the game message should not be automatically edited to include the current scoreboard
	DisableEditMessage *bool `json:"disable_edit_message,omitempty"`

	// Force Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	Force *bool `json:"force,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `json:"message_id,omitempty"`

	// Score New score, must be non-negative
	Score int `json:"score"`

	// UserId User identifier
	UserId int `json:"user_id"`
}

// PostSetGameScoreFormdataBody defines parameters for PostSetGameScore.
type PostSetGameScoreFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// DisableEditMessage Pass True, if the game message should not be automatically edited to include the current scoreboard
	DisableEditMessage *bool `form:"disable_edit_message,omitempty" json:"disable_edit_message,omitempty"`

	// Force Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	Force *bool `form:"force,omitempty" json:"force,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// Score New score, must be non-negative
	Score int `form:"score" json:"score"`

	// UserId User identifier
	UserId int `form:"user_id" json:"user_id"`
}

// PostSetGameScoreMultipartBody defines parameters for PostSetGameScore.
type PostSetGameScoreMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
	ChatId *int `json:"chat_id,omitempty"`

	// DisableEditMessage Pass True, if the game message should not be automatically edited to include the current scoreboard
	DisableEditMessage *bool `json:"disable_edit_message,omitempty"`

	// Force Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	Force *bool `json:"force,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the sent message
	MessageId *int `json:"message_id,omitempty"`

	// Score New score, must be non-negative
	Score int `json:"score"`

	// UserId User identifier
	UserId int `json:"user_id"`
}

// PostSetMyCommandsJSONBody defines parameters for PostSetMyCommands.
type PostSetMyCommandsJSONBody struct {
	// Commands A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
	Commands []BotCommand `json:"commands"`
}

// PostSetMyCommandsFormdataBody defines parameters for PostSetMyCommands.
type PostSetMyCommandsFormdataBody struct {
	// Commands A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
	Commands []BotCommand `form:"commands" json:"commands"`
}

// PostSetMyCommandsMultipartBody defines parameters for PostSetMyCommands.
type PostSetMyCommandsMultipartBody struct {
	// Commands A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
	Commands []BotCommand `json:"commands"`
}

// PostSetPassportDataErrorsJSONBody defines parameters for PostSetPassportDataErrors.
type PostSetPassportDataErrorsJSONBody struct {
	// Errors A JSON-serialized array describing the errors
	Errors []PassportElementError `json:"errors"`

	// UserId User identifier
	UserId int `json:"user_id"`
}

// PostSetPassportDataErrorsFormdataBody defines parameters for PostSetPassportDataErrors.
type PostSetPassportDataErrorsFormdataBody struct {
	// Errors A JSON-serialized array describing the errors
	Errors []PassportElementError `form:"errors" json:"errors"`

	// UserId User identifier
	UserId int `form:"user_id" json:"user_id"`
}

// PostSetPassportDataErrorsMultipartBody defines parameters for PostSetPassportDataErrors.
type PostSetPassportDataErrorsMultipartBody struct {
	// Errors A JSON-serialized array describing the errors
	Errors []PassportElementError `json:"errors"`

	// UserId User identifier
	UserId int `json:"user_id"`
}

// PostSetPollAnswerJSONBody defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetPollAnswerJSONBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the message containing the poll.
	MessageId int `json:"message_id"`

	// OptionIds 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
	OptionIds []PostSetPollAnswerJSONBody_OptionIds_Item `json:"option_ids"`
}

// PostSetPollAnswerFormdataBody defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetPollAnswerFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Identifier of the message containing the poll.
	MessageId int `form:"message_id" json:"message_id"`

	// OptionIds 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
	OptionIds []PostSetPollAnswerFormdataBody_OptionIds_Item `form:"option_ids" json:"option_ids"`
}

// PostSetPollAnswerMultipartBody defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostSetPollAnswerMultipartBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the message containing the poll.
	MessageId int `json:"message_id"`

	// OptionIds 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
	OptionIds []PostSetPollAnswerMultipartBody_OptionIds_Item `json:"option_ids"`
}

// PostSetPollAnswerJSONBodyChatId0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBodyChatId0 = int

// PostSetPollAnswerJSONBodyChatId1 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBodyChatId1 = string

// PostSetPollAnswerJSONBody_ChatId defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBody_ChatId struct {
	union json.RawMessage
}

// PostSetPollAnswerJSONBodyOptionIds0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBodyOptionIds0 = int

// PostSetPollAnswerJSONBody_OptionIds_Item defines parameters for PostSetPollAnswer.
type PostSetPollAnswerJSONBody_OptionIds_Item struct {
	union json.RawMessage
}

// PostSetPollAnswerFormdataBodyChatId0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBodyChatId0 = int

// PostSetPollAnswerFormdataBodyChatId1 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBodyChatId1 = string

// PostSetPollAnswerFormdataBody_ChatId defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostSetPollAnswerFormdataBodyOptionIds0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBodyOptionIds0 = int

// PostSetPollAnswerFormdataBody_OptionIds_Item defines parameters for PostSetPollAnswer.
type PostSetPollAnswerFormdataBody_OptionIds_Item struct {
	union json.RawMessage
}

// PostSetPollAnswerMultipartBodyChatId0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBodyChatId0 = int

// PostSetPollAnswerMultipartBodyChatId1 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBodyChatId1 = string

// PostSetPollAnswerMultipartBody_ChatId defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostSetPollAnswerMultipartBodyOptionIds0 defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBodyOptionIds0 = int

// PostSetPollAnswerMultipartBody_OptionIds_Item defines parameters for PostSetPollAnswer.
type PostSetPollAnswerMultipartBody_OptionIds_Item struct {
	union json.RawMessage
}

// PostSetStickerPositionInSetJSONBody defines parameters for PostSetStickerPositionInSet.
type PostSetStickerPositionInSetJSONBody struct {
	// Position New sticker position in the set, zero-based
	Position int `json:"position"`

	// Sticker File identifier of the sticker
	Sticker string `json:"sticker"`
}

// PostSetStickerPositionInSetFormdataBody defines parameters for PostSetStickerPositionInSet.
type PostSetStickerPositionInSetFormdataBody struct {
	// Position New sticker position in the set, zero-based
	Position int `form:"position" json:"position"`

	// Sticker File identifier of the sticker
	Sticker string `form:"sticker" json:"sticker"`
}

// PostSetStickerPositionInSetMultipartBody defines parameters for PostSetStickerPositionInSet.
type PostSetStickerPositionInSetMultipartBody struct {
	// Position New sticker position in the set, zero-based
	Position int `json:"position"`

	// Sticker File identifier of the sticker
	Sticker string `json:"sticker"`
}

// PostSetStickerSetThumbMultipartBody defines parameters for PostSetStickerSetThumb.
type PostSetStickerSetThumbMultipartBody struct {
	// Name Sticker set name
	Name string `json:"name"`

	// Thumb A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.
	Thumb *PostSetStickerSetThumbMultipartBody_Thumb `json:"thumb,omitempty"`

	// UserId User identifier of the sticker set owner
	UserId int `json:"user_id"`
}

// PostSetStickerSetThumbMultipartBodyThumb1 defines parameters for PostSetStickerSetThumb.
type PostSetStickerSetThumbMultipartBodyThumb1 = string

// PostSetStickerSetThumbMultipartBody_Thumb defines parameters for PostSetStickerSetThumb.
type PostSetStickerSetThumbMultipartBody_Thumb struct {
	union json.RawMessage
}

// PostSetWebhookMultipartBody defines parameters for PostSetWebhook.
type PostSetWebhookMultipartBody struct {
	// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
	// Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
	AllowedUpdates *[]string `json:"allowed_updates,omitempty"`

	// Certificate This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
	Certificate *InputFile `json:"certificate,omitempty"`

	// DropPendingUpdates Pass *True* to drop all pending updates
	DropPendingUpdates *bool `json:"drop_pending_updates,omitempty"`

	// IpAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
	IpAddress *string `json:"ip_address,omitempty"`

	// MaxConnections Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
	MaxConnections *int `json:"max_connections,omitempty"`

	// Url HTTPS url to send updates to. Use an empty string to remove webhook integration
	Url string `json:"url"`
}

// PostStopMessageLiveLocationJSONBody defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationJSONBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostStopMessageLiveLocationJSONBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
	MessageId *int `json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostStopMessageLiveLocationFormdataBody defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationFormdataBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostStopMessageLiveLocationFormdataBody_ChatId `form:"chat_id,omitempty" json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `form:"inline_message_id,omitempty" json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`
}

// PostStopMessageLiveLocationMultipartBody defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationMultipartBody struct {
	// ChatId Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId *PostStopMessageLiveLocationMultipartBody_ChatId `json:"chat_id,omitempty"`

	// InlineMessageId Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
	InlineMessageId *string `json:"inline_message_id,omitempty"`

	// MessageId Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
	MessageId *int `json:"message_id,omitempty"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostStopMessageLiveLocationJSONBodyChatId0 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationJSONBodyChatId0 = int

// PostStopMessageLiveLocationJSONBodyChatId1 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationJSONBodyChatId1 = string

// PostStopMessageLiveLocationJSONBody_ChatId defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationJSONBody_ChatId struct {
	union json.RawMessage
}

// PostStopMessageLiveLocationFormdataBodyChatId0 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationFormdataBodyChatId0 = int

// PostStopMessageLiveLocationFormdataBodyChatId1 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationFormdataBodyChatId1 = string

// PostStopMessageLiveLocationFormdataBody_ChatId defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostStopMessageLiveLocationMultipartBodyChatId0 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationMultipartBodyChatId0 = int

// PostStopMessageLiveLocationMultipartBodyChatId1 defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationMultipartBodyChatId1 = string

// PostStopMessageLiveLocationMultipartBody_ChatId defines parameters for PostStopMessageLiveLocation.
type PostStopMessageLiveLocationMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostStopPollJSONBody defines parameters for PostStopPoll.
type PostStopPollJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostStopPollJSONBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the original message with the poll
	MessageId int `json:"message_id"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostStopPollFormdataBody defines parameters for PostStopPoll.
type PostStopPollFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostStopPollFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Identifier of the original message with the poll
	MessageId int `form:"message_id" json:"message_id"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `form:"reply_markup,omitempty" json:"reply_markup,omitempty"`
}

// PostStopPollMultipartBody defines parameters for PostStopPoll.
type PostStopPollMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostStopPollMultipartBody_ChatId `json:"chat_id"`

	// MessageId Identifier of the original message with the poll
	MessageId int `json:"message_id"`

	// ReplyMarkup This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// PostStopPollJSONBodyChatId0 defines parameters for PostStopPoll.
type PostStopPollJSONBodyChatId0 = int

// PostStopPollJSONBodyChatId1 defines parameters for PostStopPoll.
type PostStopPollJSONBodyChatId1 = string

// PostStopPollJSONBody_ChatId defines parameters for PostStopPoll.
type PostStopPollJSONBody_ChatId struct {
	union json.RawMessage
}

// PostStopPollFormdataBodyChatId0 defines parameters for PostStopPoll.
type PostStopPollFormdataBodyChatId0 = int

// PostStopPollFormdataBodyChatId1 defines parameters for PostStopPoll.
type PostStopPollFormdataBodyChatId1 = string

// PostStopPollFormdataBody_ChatId defines parameters for PostStopPoll.
type PostStopPollFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostStopPollMultipartBodyChatId0 defines parameters for PostStopPoll.
type PostStopPollMultipartBodyChatId0 = int

// PostStopPollMultipartBodyChatId1 defines parameters for PostStopPoll.
type PostStopPollMultipartBodyChatId1 = string

// PostStopPollMultipartBody_ChatId defines parameters for PostStopPoll.
type PostStopPollMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostUnbanChatMemberJSONBody defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberJSONBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
	ChatId PostUnbanChatMemberJSONBody_ChatId `json:"chat_id"`

	// OnlyIfBanned Do nothing if the user is not banned
	OnlyIfBanned *bool `json:"only_if_banned,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostUnbanChatMemberFormdataBody defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberFormdataBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
	ChatId PostUnbanChatMemberFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// OnlyIfBanned Do nothing if the user is not banned
	OnlyIfBanned *bool `form:"only_if_banned,omitempty" json:"only_if_banned,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `form:"user_id" json:"user_id"`
}

// PostUnbanChatMemberMultipartBody defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberMultipartBody struct {
	// ChatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
	ChatId PostUnbanChatMemberMultipartBody_ChatId `json:"chat_id"`

	// OnlyIfBanned Do nothing if the user is not banned
	OnlyIfBanned *bool `json:"only_if_banned,omitempty"`

	// UserId Unique identifier of the target user
	UserId int `json:"user_id"`
}

// PostUnbanChatMemberJSONBodyChatId0 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberJSONBodyChatId0 = int

// PostUnbanChatMemberJSONBodyChatId1 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberJSONBodyChatId1 = string

// PostUnbanChatMemberJSONBody_ChatId defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberJSONBody_ChatId struct {
	union json.RawMessage
}

// PostUnbanChatMemberFormdataBodyChatId0 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberFormdataBodyChatId0 = int

// PostUnbanChatMemberFormdataBodyChatId1 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberFormdataBodyChatId1 = string

// PostUnbanChatMemberFormdataBody_ChatId defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostUnbanChatMemberMultipartBodyChatId0 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberMultipartBodyChatId0 = int

// PostUnbanChatMemberMultipartBodyChatId1 defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberMultipartBodyChatId1 = string

// PostUnbanChatMemberMultipartBody_ChatId defines parameters for PostUnbanChatMember.
type PostUnbanChatMemberMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinAllChatMessagesJSONBody defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinAllChatMessagesJSONBody_ChatId `json:"chat_id"`
}

// PostUnpinAllChatMessagesFormdataBody defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinAllChatMessagesFormdataBody_ChatId `form:"chat_id" json:"chat_id"`
}

// PostUnpinAllChatMessagesMultipartBody defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinAllChatMessagesMultipartBody_ChatId `json:"chat_id"`
}

// PostUnpinAllChatMessagesJSONBodyChatId0 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesJSONBodyChatId0 = int

// PostUnpinAllChatMessagesJSONBodyChatId1 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesJSONBodyChatId1 = string

// PostUnpinAllChatMessagesJSONBody_ChatId defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesJSONBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinAllChatMessagesFormdataBodyChatId0 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesFormdataBodyChatId0 = int

// PostUnpinAllChatMessagesFormdataBodyChatId1 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesFormdataBodyChatId1 = string

// PostUnpinAllChatMessagesFormdataBody_ChatId defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinAllChatMessagesMultipartBodyChatId0 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesMultipartBodyChatId0 = int

// PostUnpinAllChatMessagesMultipartBodyChatId1 defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesMultipartBodyChatId1 = string

// PostUnpinAllChatMessagesMultipartBody_ChatId defines parameters for PostUnpinAllChatMessages.
type PostUnpinAllChatMessagesMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinChatMessageJSONBody defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageJSONBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinChatMessageJSONBody_ChatId `json:"chat_id"`

	// MessageId Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
	MessageId *int `json:"message_id,omitempty"`
}

// PostUnpinChatMessageFormdataBody defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageFormdataBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinChatMessageFormdataBody_ChatId `form:"chat_id" json:"chat_id"`

	// MessageId Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
	MessageId *int `form:"message_id,omitempty" json:"message_id,omitempty"`
}

// PostUnpinChatMessageMultipartBody defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageMultipartBody struct {
	// ChatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
	ChatId PostUnpinChatMessageMultipartBody_ChatId `json:"chat_id"`

	// MessageId Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
	MessageId *int `json:"message_id,omitempty"`
}

// PostUnpinChatMessageJSONBodyChatId0 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageJSONBodyChatId0 = int

// PostUnpinChatMessageJSONBodyChatId1 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageJSONBodyChatId1 = string

// PostUnpinChatMessageJSONBody_ChatId defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageJSONBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinChatMessageFormdataBodyChatId0 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageFormdataBodyChatId0 = int

// PostUnpinChatMessageFormdataBodyChatId1 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageFormdataBodyChatId1 = string

// PostUnpinChatMessageFormdataBody_ChatId defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageFormdataBody_ChatId struct {
	union json.RawMessage
}

// PostUnpinChatMessageMultipartBodyChatId0 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageMultipartBodyChatId0 = int

// PostUnpinChatMessageMultipartBodyChatId1 defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageMultipartBodyChatId1 = string

// PostUnpinChatMessageMultipartBody_ChatId defines parameters for PostUnpinChatMessage.
type PostUnpinChatMessageMultipartBody_ChatId struct {
	union json.RawMessage
}

// PostUploadStickerFileMultipartBody defines parameters for PostUploadStickerFile.
type PostUploadStickerFileMultipartBody struct {
	// PngSticker This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
	PngSticker InputFile `json:"png_sticker"`

	// UserId User identifier of sticker file owner
	UserId int `json:"user_id"`
}

// PostUserLoginJSONBody defines parameters for PostUserLogin.
type PostUserLoginJSONBody struct {
	// PhoneNumber Your phone number to log in.
	PhoneNumber string `json:"phone_number"`
}

// PostUserLoginFormdataBody defines parameters for PostUserLogin.
type PostUserLoginFormdataBody struct {
	// PhoneNumber Your phone number to log in.
	PhoneNumber string `form:"phone_number" json:"phone_number"`
}

// PostUserLoginMultipartBody defines parameters for PostUserLogin.
type PostUserLoginMultipartBody struct {
	// PhoneNumber Your phone number to log in.
	PhoneNumber string `json:"phone_number"`
}

// PostAddChatMemberJSONRequestBody defines body for PostAddChatMember for application/json ContentType.
type PostAddChatMemberJSONRequestBody PostAddChatMemberJSONBody

// PostAddChatMemberFormdataRequestBody defines body for PostAddChatMember for application/x-www-form-urlencoded ContentType.
type PostAddChatMemberFormdataRequestBody PostAddChatMemberFormdataBody

// PostAddChatMemberMultipartRequestBody defines body for PostAddChatMember for multipart/form-data ContentType.
type PostAddChatMemberMultipartRequestBody PostAddChatMemberMultipartBody

// PostAddProxyJSONRequestBody defines body for PostAddProxy for application/json ContentType.
type PostAddProxyJSONRequestBody PostAddProxyJSONBody

// PostAddProxyFormdataRequestBody defines body for PostAddProxy for application/x-www-form-urlencoded ContentType.
type PostAddProxyFormdataRequestBody PostAddProxyFormdataBody

// PostAddProxyMultipartRequestBody defines body for PostAddProxy for multipart/form-data ContentType.
type PostAddProxyMultipartRequestBody PostAddProxyMultipartBody

// PostAddStickerToSetMultipartRequestBody defines body for PostAddStickerToSet for multipart/form-data ContentType.
type PostAddStickerToSetMultipartRequestBody PostAddStickerToSetMultipartBody

// PostAnswerCallbackQueryJSONRequestBody defines body for PostAnswerCallbackQuery for application/json ContentType.
type PostAnswerCallbackQueryJSONRequestBody PostAnswerCallbackQueryJSONBody

// PostAnswerCallbackQueryFormdataRequestBody defines body for PostAnswerCallbackQuery for application/x-www-form-urlencoded ContentType.
type PostAnswerCallbackQueryFormdataRequestBody PostAnswerCallbackQueryFormdataBody

// PostAnswerCallbackQueryMultipartRequestBody defines body for PostAnswerCallbackQuery for multipart/form-data ContentType.
type PostAnswerCallbackQueryMultipartRequestBody PostAnswerCallbackQueryMultipartBody

// PostAnswerInlineQueryJSONRequestBody defines body for PostAnswerInlineQuery for application/json ContentType.
type PostAnswerInlineQueryJSONRequestBody PostAnswerInlineQueryJSONBody

// PostAnswerInlineQueryFormdataRequestBody defines body for PostAnswerInlineQuery for application/x-www-form-urlencoded ContentType.
type PostAnswerInlineQueryFormdataRequestBody PostAnswerInlineQueryFormdataBody

// PostAnswerInlineQueryMultipartRequestBody defines body for PostAnswerInlineQuery for multipart/form-data ContentType.
type PostAnswerInlineQueryMultipartRequestBody PostAnswerInlineQueryMultipartBody

// PostAnswerPreCheckoutQueryJSONRequestBody defines body for PostAnswerPreCheckoutQuery for application/json ContentType.
type PostAnswerPreCheckoutQueryJSONRequestBody PostAnswerPreCheckoutQueryJSONBody

// PostAnswerPreCheckoutQueryFormdataRequestBody defines body for PostAnswerPreCheckoutQuery for application/x-www-form-urlencoded ContentType.
type PostAnswerPreCheckoutQueryFormdataRequestBody PostAnswerPreCheckoutQueryFormdataBody

// PostAnswerPreCheckoutQueryMultipartRequestBody defines body for PostAnswerPreCheckoutQuery for multipart/form-data ContentType.
type PostAnswerPreCheckoutQueryMultipartRequestBody PostAnswerPreCheckoutQueryMultipartBody

// PostAnswerShippingQueryJSONRequestBody defines body for PostAnswerShippingQuery for application/json ContentType.
type PostAnswerShippingQueryJSONRequestBody PostAnswerShippingQueryJSONBody

// PostAnswerShippingQueryFormdataRequestBody defines body for PostAnswerShippingQuery for application/x-www-form-urlencoded ContentType.
type PostAnswerShippingQueryFormdataRequestBody PostAnswerShippingQueryFormdataBody

// PostAnswerShippingQueryMultipartRequestBody defines body for PostAnswerShippingQuery for multipart/form-data ContentType.
type PostAnswerShippingQueryMultipartRequestBody PostAnswerShippingQueryMultipartBody

// PostAuthCodeJSONRequestBody defines body for PostAuthCode for application/json ContentType.
type PostAuthCodeJSONRequestBody PostAuthCodeJSONBody

// PostAuthCodeFormdataRequestBody defines body for PostAuthCode for application/x-www-form-urlencoded ContentType.
type PostAuthCodeFormdataRequestBody PostAuthCodeFormdataBody

// PostAuthCodeMultipartRequestBody defines body for PostAuthCode for multipart/form-data ContentType.
type PostAuthCodeMultipartRequestBody PostAuthCodeMultipartBody

// PostAuthPasswordJSONRequestBody defines body for PostAuthPassword for application/json ContentType.
type PostAuthPasswordJSONRequestBody PostAuthPasswordJSONBody

// PostAuthPasswordFormdataRequestBody defines body for PostAuthPassword for application/x-www-form-urlencoded ContentType.
type PostAuthPasswordFormdataRequestBody PostAuthPasswordFormdataBody

// PostAuthPasswordMultipartRequestBody defines body for PostAuthPassword for multipart/form-data ContentType.
type PostAuthPasswordMultipartRequestBody PostAuthPasswordMultipartBody

// PostCopyMessageJSONRequestBody defines body for PostCopyMessage for application/json ContentType.
type PostCopyMessageJSONRequestBody PostCopyMessageJSONBody

// PostCopyMessageFormdataRequestBody defines body for PostCopyMessage for application/x-www-form-urlencoded ContentType.
type PostCopyMessageFormdataRequestBody PostCopyMessageFormdataBody

// PostCopyMessageMultipartRequestBody defines body for PostCopyMessage for multipart/form-data ContentType.
type PostCopyMessageMultipartRequestBody PostCopyMessageMultipartBody

// PostCreateChatJSONRequestBody defines body for PostCreateChat for application/json ContentType.
type PostCreateChatJSONRequestBody PostCreateChatJSONBody

// PostCreateChatFormdataRequestBody defines body for PostCreateChat for application/x-www-form-urlencoded ContentType.
type PostCreateChatFormdataRequestBody PostCreateChatFormdataBody

// PostCreateChatMultipartRequestBody defines body for PostCreateChat for multipart/form-data ContentType.
type PostCreateChatMultipartRequestBody PostCreateChatMultipartBody

// PostCreateNewStickerSetMultipartRequestBody defines body for PostCreateNewStickerSet for multipart/form-data ContentType.
type PostCreateNewStickerSetMultipartRequestBody PostCreateNewStickerSetMultipartBody

// PostDeleteChatHistoryJSONRequestBody defines body for PostDeleteChatHistory for application/json ContentType.
type PostDeleteChatHistoryJSONRequestBody PostDeleteChatHistoryJSONBody

// PostDeleteChatHistoryFormdataRequestBody defines body for PostDeleteChatHistory for application/x-www-form-urlencoded ContentType.
type PostDeleteChatHistoryFormdataRequestBody PostDeleteChatHistoryFormdataBody

// PostDeleteChatHistoryMultipartRequestBody defines body for PostDeleteChatHistory for multipart/form-data ContentType.
type PostDeleteChatHistoryMultipartRequestBody PostDeleteChatHistoryMultipartBody

// PostDeleteChatPhotoJSONRequestBody defines body for PostDeleteChatPhoto for application/json ContentType.
type PostDeleteChatPhotoJSONRequestBody PostDeleteChatPhotoJSONBody

// PostDeleteChatPhotoFormdataRequestBody defines body for PostDeleteChatPhoto for application/x-www-form-urlencoded ContentType.
type PostDeleteChatPhotoFormdataRequestBody PostDeleteChatPhotoFormdataBody

// PostDeleteChatPhotoMultipartRequestBody defines body for PostDeleteChatPhoto for multipart/form-data ContentType.
type PostDeleteChatPhotoMultipartRequestBody PostDeleteChatPhotoMultipartBody

// PostDeleteChatStickerSetJSONRequestBody defines body for PostDeleteChatStickerSet for application/json ContentType.
type PostDeleteChatStickerSetJSONRequestBody PostDeleteChatStickerSetJSONBody

// PostDeleteChatStickerSetFormdataRequestBody defines body for PostDeleteChatStickerSet for application/x-www-form-urlencoded ContentType.
type PostDeleteChatStickerSetFormdataRequestBody PostDeleteChatStickerSetFormdataBody

// PostDeleteChatStickerSetMultipartRequestBody defines body for PostDeleteChatStickerSet for multipart/form-data ContentType.
type PostDeleteChatStickerSetMultipartRequestBody PostDeleteChatStickerSetMultipartBody

// PostDeleteMessageJSONRequestBody defines body for PostDeleteMessage for application/json ContentType.
type PostDeleteMessageJSONRequestBody PostDeleteMessageJSONBody

// PostDeleteMessageFormdataRequestBody defines body for PostDeleteMessage for application/x-www-form-urlencoded ContentType.
type PostDeleteMessageFormdataRequestBody PostDeleteMessageFormdataBody

// PostDeleteMessageMultipartRequestBody defines body for PostDeleteMessage for multipart/form-data ContentType.
type PostDeleteMessageMultipartRequestBody PostDeleteMessageMultipartBody

// PostDeleteMessagesJSONRequestBody defines body for PostDeleteMessages for application/json ContentType.
type PostDeleteMessagesJSONRequestBody PostDeleteMessagesJSONBody

// PostDeleteMessagesFormdataRequestBody defines body for PostDeleteMessages for application/x-www-form-urlencoded ContentType.
type PostDeleteMessagesFormdataRequestBody PostDeleteMessagesFormdataBody

// PostDeleteMessagesMultipartRequestBody defines body for PostDeleteMessages for multipart/form-data ContentType.
type PostDeleteMessagesMultipartRequestBody PostDeleteMessagesMultipartBody

// PostDeleteProxyJSONRequestBody defines body for PostDeleteProxy for application/json ContentType.
type PostDeleteProxyJSONRequestBody PostDeleteProxyJSONBody

// PostDeleteProxyFormdataRequestBody defines body for PostDeleteProxy for application/x-www-form-urlencoded ContentType.
type PostDeleteProxyFormdataRequestBody PostDeleteProxyFormdataBody

// PostDeleteProxyMultipartRequestBody defines body for PostDeleteProxy for multipart/form-data ContentType.
type PostDeleteProxyMultipartRequestBody PostDeleteProxyMultipartBody

// PostDeleteStickerFromSetJSONRequestBody defines body for PostDeleteStickerFromSet for application/json ContentType.
type PostDeleteStickerFromSetJSONRequestBody PostDeleteStickerFromSetJSONBody

// PostDeleteStickerFromSetFormdataRequestBody defines body for PostDeleteStickerFromSet for application/x-www-form-urlencoded ContentType.
type PostDeleteStickerFromSetFormdataRequestBody PostDeleteStickerFromSetFormdataBody

// PostDeleteStickerFromSetMultipartRequestBody defines body for PostDeleteStickerFromSet for multipart/form-data ContentType.
type PostDeleteStickerFromSetMultipartRequestBody PostDeleteStickerFromSetMultipartBody

// PostDeleteWebhookJSONRequestBody defines body for PostDeleteWebhook for application/json ContentType.
type PostDeleteWebhookJSONRequestBody PostDeleteWebhookJSONBody

// PostDeleteWebhookFormdataRequestBody defines body for PostDeleteWebhook for application/x-www-form-urlencoded ContentType.
type PostDeleteWebhookFormdataRequestBody PostDeleteWebhookFormdataBody

// PostDeleteWebhookMultipartRequestBody defines body for PostDeleteWebhook for multipart/form-data ContentType.
type PostDeleteWebhookMultipartRequestBody PostDeleteWebhookMultipartBody

// PostDisableProxyJSONRequestBody defines body for PostDisableProxy for application/json ContentType.
type PostDisableProxyJSONRequestBody PostDisableProxyJSONBody

// PostDisableProxyFormdataRequestBody defines body for PostDisableProxy for application/x-www-form-urlencoded ContentType.
type PostDisableProxyFormdataRequestBody PostDisableProxyFormdataBody

// PostDisableProxyMultipartRequestBody defines body for PostDisableProxy for multipart/form-data ContentType.
type PostDisableProxyMultipartRequestBody PostDisableProxyMultipartBody

// PostEditMessageCaptionJSONRequestBody defines body for PostEditMessageCaption for application/json ContentType.
type PostEditMessageCaptionJSONRequestBody PostEditMessageCaptionJSONBody

// PostEditMessageCaptionFormdataRequestBody defines body for PostEditMessageCaption for application/x-www-form-urlencoded ContentType.
type PostEditMessageCaptionFormdataRequestBody PostEditMessageCaptionFormdataBody

// PostEditMessageCaptionMultipartRequestBody defines body for PostEditMessageCaption for multipart/form-data ContentType.
type PostEditMessageCaptionMultipartRequestBody PostEditMessageCaptionMultipartBody

// PostEditMessageLiveLocationJSONRequestBody defines body for PostEditMessageLiveLocation for application/json ContentType.
type PostEditMessageLiveLocationJSONRequestBody PostEditMessageLiveLocationJSONBody

// PostEditMessageLiveLocationFormdataRequestBody defines body for PostEditMessageLiveLocation for application/x-www-form-urlencoded ContentType.
type PostEditMessageLiveLocationFormdataRequestBody PostEditMessageLiveLocationFormdataBody

// PostEditMessageLiveLocationMultipartRequestBody defines body for PostEditMessageLiveLocation for multipart/form-data ContentType.
type PostEditMessageLiveLocationMultipartRequestBody PostEditMessageLiveLocationMultipartBody

// PostEditMessageMediaMultipartRequestBody defines body for PostEditMessageMedia for multipart/form-data ContentType.
type PostEditMessageMediaMultipartRequestBody PostEditMessageMediaMultipartBody

// PostEditMessageReplyMarkupJSONRequestBody defines body for PostEditMessageReplyMarkup for application/json ContentType.
type PostEditMessageReplyMarkupJSONRequestBody PostEditMessageReplyMarkupJSONBody

// PostEditMessageReplyMarkupFormdataRequestBody defines body for PostEditMessageReplyMarkup for application/x-www-form-urlencoded ContentType.
type PostEditMessageReplyMarkupFormdataRequestBody PostEditMessageReplyMarkupFormdataBody

// PostEditMessageReplyMarkupMultipartRequestBody defines body for PostEditMessageReplyMarkup for multipart/form-data ContentType.
type PostEditMessageReplyMarkupMultipartRequestBody PostEditMessageReplyMarkupMultipartBody

// PostEditMessageSchedulingJSONRequestBody defines body for PostEditMessageScheduling for application/json ContentType.
type PostEditMessageSchedulingJSONRequestBody PostEditMessageSchedulingJSONBody

// PostEditMessageSchedulingFormdataRequestBody defines body for PostEditMessageScheduling for application/x-www-form-urlencoded ContentType.
type PostEditMessageSchedulingFormdataRequestBody PostEditMessageSchedulingFormdataBody

// PostEditMessageSchedulingMultipartRequestBody defines body for PostEditMessageScheduling for multipart/form-data ContentType.
type PostEditMessageSchedulingMultipartRequestBody PostEditMessageSchedulingMultipartBody

// PostEditMessageTextJSONRequestBody defines body for PostEditMessageText for application/json ContentType.
type PostEditMessageTextJSONRequestBody PostEditMessageTextJSONBody

// PostEditMessageTextFormdataRequestBody defines body for PostEditMessageText for application/x-www-form-urlencoded ContentType.
type PostEditMessageTextFormdataRequestBody PostEditMessageTextFormdataBody

// PostEditMessageTextMultipartRequestBody defines body for PostEditMessageText for multipart/form-data ContentType.
type PostEditMessageTextMultipartRequestBody PostEditMessageTextMultipartBody

// PostEnableProxyJSONRequestBody defines body for PostEnableProxy for application/json ContentType.
type PostEnableProxyJSONRequestBody PostEnableProxyJSONBody

// PostEnableProxyFormdataRequestBody defines body for PostEnableProxy for application/x-www-form-urlencoded ContentType.
type PostEnableProxyFormdataRequestBody PostEnableProxyFormdataBody

// PostEnableProxyMultipartRequestBody defines body for PostEnableProxy for multipart/form-data ContentType.
type PostEnableProxyMultipartRequestBody PostEnableProxyMultipartBody

// PostExportChatInviteLinkJSONRequestBody defines body for PostExportChatInviteLink for application/json ContentType.
type PostExportChatInviteLinkJSONRequestBody PostExportChatInviteLinkJSONBody

// PostExportChatInviteLinkFormdataRequestBody defines body for PostExportChatInviteLink for application/x-www-form-urlencoded ContentType.
type PostExportChatInviteLinkFormdataRequestBody PostExportChatInviteLinkFormdataBody

// PostExportChatInviteLinkMultipartRequestBody defines body for PostExportChatInviteLink for multipart/form-data ContentType.
type PostExportChatInviteLinkMultipartRequestBody PostExportChatInviteLinkMultipartBody

// PostForwardMessageJSONRequestBody defines body for PostForwardMessage for application/json ContentType.
type PostForwardMessageJSONRequestBody PostForwardMessageJSONBody

// PostForwardMessageFormdataRequestBody defines body for PostForwardMessage for application/x-www-form-urlencoded ContentType.
type PostForwardMessageFormdataRequestBody PostForwardMessageFormdataBody

// PostForwardMessageMultipartRequestBody defines body for PostForwardMessage for multipart/form-data ContentType.
type PostForwardMessageMultipartRequestBody PostForwardMessageMultipartBody

// PostGetCallbackQueryAnswerJSONRequestBody defines body for PostGetCallbackQueryAnswer for application/json ContentType.
type PostGetCallbackQueryAnswerJSONRequestBody PostGetCallbackQueryAnswerJSONBody

// PostGetCallbackQueryAnswerFormdataRequestBody defines body for PostGetCallbackQueryAnswer for application/x-www-form-urlencoded ContentType.
type PostGetCallbackQueryAnswerFormdataRequestBody PostGetCallbackQueryAnswerFormdataBody

// PostGetCallbackQueryAnswerMultipartRequestBody defines body for PostGetCallbackQueryAnswer for multipart/form-data ContentType.
type PostGetCallbackQueryAnswerMultipartRequestBody PostGetCallbackQueryAnswerMultipartBody

// PostGetChatJSONRequestBody defines body for PostGetChat for application/json ContentType.
type PostGetChatJSONRequestBody PostGetChatJSONBody

// PostGetChatFormdataRequestBody defines body for PostGetChat for application/x-www-form-urlencoded ContentType.
type PostGetChatFormdataRequestBody PostGetChatFormdataBody

// PostGetChatMultipartRequestBody defines body for PostGetChat for multipart/form-data ContentType.
type PostGetChatMultipartRequestBody PostGetChatMultipartBody

// PostGetChatAdministratorsJSONRequestBody defines body for PostGetChatAdministrators for application/json ContentType.
type PostGetChatAdministratorsJSONRequestBody PostGetChatAdministratorsJSONBody

// PostGetChatAdministratorsFormdataRequestBody defines body for PostGetChatAdministrators for application/x-www-form-urlencoded ContentType.
type PostGetChatAdministratorsFormdataRequestBody PostGetChatAdministratorsFormdataBody

// PostGetChatAdministratorsMultipartRequestBody defines body for PostGetChatAdministrators for multipart/form-data ContentType.
type PostGetChatAdministratorsMultipartRequestBody PostGetChatAdministratorsMultipartBody

// PostGetChatMemberJSONRequestBody defines body for PostGetChatMember for application/json ContentType.
type PostGetChatMemberJSONRequestBody PostGetChatMemberJSONBody

// PostGetChatMemberFormdataRequestBody defines body for PostGetChatMember for application/x-www-form-urlencoded ContentType.
type PostGetChatMemberFormdataRequestBody PostGetChatMemberFormdataBody

// PostGetChatMemberMultipartRequestBody defines body for PostGetChatMember for multipart/form-data ContentType.
type PostGetChatMemberMultipartRequestBody PostGetChatMemberMultipartBody

// PostGetChatMembersJSONRequestBody defines body for PostGetChatMembers for application/json ContentType.
type PostGetChatMembersJSONRequestBody PostGetChatMembersJSONBody

// PostGetChatMembersFormdataRequestBody defines body for PostGetChatMembers for application/x-www-form-urlencoded ContentType.
type PostGetChatMembersFormdataRequestBody PostGetChatMembersFormdataBody

// PostGetChatMembersMultipartRequestBody defines body for PostGetChatMembers for multipart/form-data ContentType.
type PostGetChatMembersMultipartRequestBody PostGetChatMembersMultipartBody

// PostGetChatMembersCountJSONRequestBody defines body for PostGetChatMembersCount for application/json ContentType.
type PostGetChatMembersCountJSONRequestBody PostGetChatMembersCountJSONBody

// PostGetChatMembersCountFormdataRequestBody defines body for PostGetChatMembersCount for application/x-www-form-urlencoded ContentType.
type PostGetChatMembersCountFormdataRequestBody PostGetChatMembersCountFormdataBody

// PostGetChatMembersCountMultipartRequestBody defines body for PostGetChatMembersCount for multipart/form-data ContentType.
type PostGetChatMembersCountMultipartRequestBody PostGetChatMembersCountMultipartBody

// PostGetChatsJSONRequestBody defines body for PostGetChats for application/json ContentType.
type PostGetChatsJSONRequestBody PostGetChatsJSONBody

// PostGetChatsFormdataRequestBody defines body for PostGetChats for application/x-www-form-urlencoded ContentType.
type PostGetChatsFormdataRequestBody PostGetChatsFormdataBody

// PostGetChatsMultipartRequestBody defines body for PostGetChats for multipart/form-data ContentType.
type PostGetChatsMultipartRequestBody PostGetChatsMultipartBody

// PostGetCommonChatsJSONRequestBody defines body for PostGetCommonChats for application/json ContentType.
type PostGetCommonChatsJSONRequestBody PostGetCommonChatsJSONBody

// PostGetCommonChatsFormdataRequestBody defines body for PostGetCommonChats for application/x-www-form-urlencoded ContentType.
type PostGetCommonChatsFormdataRequestBody PostGetCommonChatsFormdataBody

// PostGetCommonChatsMultipartRequestBody defines body for PostGetCommonChats for multipart/form-data ContentType.
type PostGetCommonChatsMultipartRequestBody PostGetCommonChatsMultipartBody

// PostGetFileJSONRequestBody defines body for PostGetFile for application/json ContentType.
type PostGetFileJSONRequestBody PostGetFileJSONBody

// PostGetFileFormdataRequestBody defines body for PostGetFile for application/x-www-form-urlencoded ContentType.
type PostGetFileFormdataRequestBody PostGetFileFormdataBody

// PostGetFileMultipartRequestBody defines body for PostGetFile for multipart/form-data ContentType.
type PostGetFileMultipartRequestBody PostGetFileMultipartBody

// PostGetGameHighScoresJSONRequestBody defines body for PostGetGameHighScores for application/json ContentType.
type PostGetGameHighScoresJSONRequestBody PostGetGameHighScoresJSONBody

// PostGetGameHighScoresFormdataRequestBody defines body for PostGetGameHighScores for application/x-www-form-urlencoded ContentType.
type PostGetGameHighScoresFormdataRequestBody PostGetGameHighScoresFormdataBody

// PostGetGameHighScoresMultipartRequestBody defines body for PostGetGameHighScores for multipart/form-data ContentType.
type PostGetGameHighScoresMultipartRequestBody PostGetGameHighScoresMultipartBody

// PostGetMessageInfoJSONRequestBody defines body for PostGetMessageInfo for application/json ContentType.
type PostGetMessageInfoJSONRequestBody PostGetMessageInfoJSONBody

// PostGetMessageInfoFormdataRequestBody defines body for PostGetMessageInfo for application/x-www-form-urlencoded ContentType.
type PostGetMessageInfoFormdataRequestBody PostGetMessageInfoFormdataBody

// PostGetMessageInfoMultipartRequestBody defines body for PostGetMessageInfo for multipart/form-data ContentType.
type PostGetMessageInfoMultipartRequestBody PostGetMessageInfoMultipartBody

// PostGetNearbyChatsJSONRequestBody defines body for PostGetNearbyChats for application/json ContentType.
type PostGetNearbyChatsJSONRequestBody PostGetNearbyChatsJSONBody

// PostGetNearbyChatsFormdataRequestBody defines body for PostGetNearbyChats for application/x-www-form-urlencoded ContentType.
type PostGetNearbyChatsFormdataRequestBody PostGetNearbyChatsFormdataBody

// PostGetNearbyChatsMultipartRequestBody defines body for PostGetNearbyChats for multipart/form-data ContentType.
type PostGetNearbyChatsMultipartRequestBody PostGetNearbyChatsMultipartBody

// PostGetScheduledMessagesJSONRequestBody defines body for PostGetScheduledMessages for application/json ContentType.
type PostGetScheduledMessagesJSONRequestBody PostGetScheduledMessagesJSONBody

// PostGetScheduledMessagesFormdataRequestBody defines body for PostGetScheduledMessages for application/x-www-form-urlencoded ContentType.
type PostGetScheduledMessagesFormdataRequestBody PostGetScheduledMessagesFormdataBody

// PostGetScheduledMessagesMultipartRequestBody defines body for PostGetScheduledMessages for multipart/form-data ContentType.
type PostGetScheduledMessagesMultipartRequestBody PostGetScheduledMessagesMultipartBody

// PostGetStickerSetJSONRequestBody defines body for PostGetStickerSet for application/json ContentType.
type PostGetStickerSetJSONRequestBody PostGetStickerSetJSONBody

// PostGetStickerSetFormdataRequestBody defines body for PostGetStickerSet for application/x-www-form-urlencoded ContentType.
type PostGetStickerSetFormdataRequestBody PostGetStickerSetFormdataBody

// PostGetStickerSetMultipartRequestBody defines body for PostGetStickerSet for multipart/form-data ContentType.
type PostGetStickerSetMultipartRequestBody PostGetStickerSetMultipartBody

// PostGetUpdatesJSONRequestBody defines body for PostGetUpdates for application/json ContentType.
type PostGetUpdatesJSONRequestBody PostGetUpdatesJSONBody

// PostGetUpdatesFormdataRequestBody defines body for PostGetUpdates for application/x-www-form-urlencoded ContentType.
type PostGetUpdatesFormdataRequestBody PostGetUpdatesFormdataBody

// PostGetUpdatesMultipartRequestBody defines body for PostGetUpdates for multipart/form-data ContentType.
type PostGetUpdatesMultipartRequestBody PostGetUpdatesMultipartBody

// PostGetUserProfilePhotosJSONRequestBody defines body for PostGetUserProfilePhotos for application/json ContentType.
type PostGetUserProfilePhotosJSONRequestBody PostGetUserProfilePhotosJSONBody

// PostGetUserProfilePhotosFormdataRequestBody defines body for PostGetUserProfilePhotos for application/x-www-form-urlencoded ContentType.
type PostGetUserProfilePhotosFormdataRequestBody PostGetUserProfilePhotosFormdataBody

// PostGetUserProfilePhotosMultipartRequestBody defines body for PostGetUserProfilePhotos for multipart/form-data ContentType.
type PostGetUserProfilePhotosMultipartRequestBody PostGetUserProfilePhotosMultipartBody

// PostJoinChatJSONRequestBody defines body for PostJoinChat for application/json ContentType.
type PostJoinChatJSONRequestBody PostJoinChatJSONBody

// PostJoinChatFormdataRequestBody defines body for PostJoinChat for application/x-www-form-urlencoded ContentType.
type PostJoinChatFormdataRequestBody PostJoinChatFormdataBody

// PostJoinChatMultipartRequestBody defines body for PostJoinChat for multipart/form-data ContentType.
type PostJoinChatMultipartRequestBody PostJoinChatMultipartBody

// PostKickChatMemberJSONRequestBody defines body for PostKickChatMember for application/json ContentType.
type PostKickChatMemberJSONRequestBody PostKickChatMemberJSONBody

// PostKickChatMemberFormdataRequestBody defines body for PostKickChatMember for application/x-www-form-urlencoded ContentType.
type PostKickChatMemberFormdataRequestBody PostKickChatMemberFormdataBody

// PostKickChatMemberMultipartRequestBody defines body for PostKickChatMember for multipart/form-data ContentType.
type PostKickChatMemberMultipartRequestBody PostKickChatMemberMultipartBody

// PostLeaveChatJSONRequestBody defines body for PostLeaveChat for application/json ContentType.
type PostLeaveChatJSONRequestBody PostLeaveChatJSONBody

// PostLeaveChatFormdataRequestBody defines body for PostLeaveChat for application/x-www-form-urlencoded ContentType.
type PostLeaveChatFormdataRequestBody PostLeaveChatFormdataBody

// PostLeaveChatMultipartRequestBody defines body for PostLeaveChat for multipart/form-data ContentType.
type PostLeaveChatMultipartRequestBody PostLeaveChatMultipartBody

// PostPinChatMessageJSONRequestBody defines body for PostPinChatMessage for application/json ContentType.
type PostPinChatMessageJSONRequestBody PostPinChatMessageJSONBody

// PostPinChatMessageFormdataRequestBody defines body for PostPinChatMessage for application/x-www-form-urlencoded ContentType.
type PostPinChatMessageFormdataRequestBody PostPinChatMessageFormdataBody

// PostPinChatMessageMultipartRequestBody defines body for PostPinChatMessage for multipart/form-data ContentType.
type PostPinChatMessageMultipartRequestBody PostPinChatMessageMultipartBody

// PostPromoteChatMemberJSONRequestBody defines body for PostPromoteChatMember for application/json ContentType.
type PostPromoteChatMemberJSONRequestBody PostPromoteChatMemberJSONBody

// PostPromoteChatMemberFormdataRequestBody defines body for PostPromoteChatMember for application/x-www-form-urlencoded ContentType.
type PostPromoteChatMemberFormdataRequestBody PostPromoteChatMemberFormdataBody

// PostPromoteChatMemberMultipartRequestBody defines body for PostPromoteChatMember for multipart/form-data ContentType.
type PostPromoteChatMemberMultipartRequestBody PostPromoteChatMemberMultipartBody

// PostRegisterUserJSONRequestBody defines body for PostRegisterUser for application/json ContentType.
type PostRegisterUserJSONRequestBody PostRegisterUserJSONBody

// PostRegisterUserFormdataRequestBody defines body for PostRegisterUser for application/x-www-form-urlencoded ContentType.
type PostRegisterUserFormdataRequestBody PostRegisterUserFormdataBody

// PostRegisterUserMultipartRequestBody defines body for PostRegisterUser for multipart/form-data ContentType.
type PostRegisterUserMultipartRequestBody PostRegisterUserMultipartBody

// PostReportChatJSONRequestBody defines body for PostReportChat for application/json ContentType.
type PostReportChatJSONRequestBody PostReportChatJSONBody

// PostReportChatFormdataRequestBody defines body for PostReportChat for application/x-www-form-urlencoded ContentType.
type PostReportChatFormdataRequestBody PostReportChatFormdataBody

// PostReportChatMultipartRequestBody defines body for PostReportChat for multipart/form-data ContentType.
type PostReportChatMultipartRequestBody PostReportChatMultipartBody

// PostRestrictChatMemberJSONRequestBody defines body for PostRestrictChatMember for application/json ContentType.
type PostRestrictChatMemberJSONRequestBody PostRestrictChatMemberJSONBody

// PostRestrictChatMemberFormdataRequestBody defines body for PostRestrictChatMember for application/x-www-form-urlencoded ContentType.
type PostRestrictChatMemberFormdataRequestBody PostRestrictChatMemberFormdataBody

// PostRestrictChatMemberMultipartRequestBody defines body for PostRestrictChatMember for multipart/form-data ContentType.
type PostRestrictChatMemberMultipartRequestBody PostRestrictChatMemberMultipartBody

// PostSearchChatMessagesJSONRequestBody defines body for PostSearchChatMessages for application/json ContentType.
type PostSearchChatMessagesJSONRequestBody PostSearchChatMessagesJSONBody

// PostSearchChatMessagesFormdataRequestBody defines body for PostSearchChatMessages for application/x-www-form-urlencoded ContentType.
type PostSearchChatMessagesFormdataRequestBody PostSearchChatMessagesFormdataBody

// PostSearchChatMessagesMultipartRequestBody defines body for PostSearchChatMessages for multipart/form-data ContentType.
type PostSearchChatMessagesMultipartRequestBody PostSearchChatMessagesMultipartBody

// PostSearchMessagesJSONRequestBody defines body for PostSearchMessages for application/json ContentType.
type PostSearchMessagesJSONRequestBody PostSearchMessagesJSONBody

// PostSearchMessagesFormdataRequestBody defines body for PostSearchMessages for application/x-www-form-urlencoded ContentType.
type PostSearchMessagesFormdataRequestBody PostSearchMessagesFormdataBody

// PostSearchMessagesMultipartRequestBody defines body for PostSearchMessages for multipart/form-data ContentType.
type PostSearchMessagesMultipartRequestBody PostSearchMessagesMultipartBody

// PostSearchPublicChatsJSONRequestBody defines body for PostSearchPublicChats for application/json ContentType.
type PostSearchPublicChatsJSONRequestBody PostSearchPublicChatsJSONBody

// PostSearchPublicChatsFormdataRequestBody defines body for PostSearchPublicChats for application/x-www-form-urlencoded ContentType.
type PostSearchPublicChatsFormdataRequestBody PostSearchPublicChatsFormdataBody

// PostSearchPublicChatsMultipartRequestBody defines body for PostSearchPublicChats for multipart/form-data ContentType.
type PostSearchPublicChatsMultipartRequestBody PostSearchPublicChatsMultipartBody

// PostSendAnimationMultipartRequestBody defines body for PostSendAnimation for multipart/form-data ContentType.
type PostSendAnimationMultipartRequestBody PostSendAnimationMultipartBody

// PostSendAudioMultipartRequestBody defines body for PostSendAudio for multipart/form-data ContentType.
type PostSendAudioMultipartRequestBody PostSendAudioMultipartBody

// PostSendChatActionJSONRequestBody defines body for PostSendChatAction for application/json ContentType.
type PostSendChatActionJSONRequestBody PostSendChatActionJSONBody

// PostSendChatActionFormdataRequestBody defines body for PostSendChatAction for application/x-www-form-urlencoded ContentType.
type PostSendChatActionFormdataRequestBody PostSendChatActionFormdataBody

// PostSendChatActionMultipartRequestBody defines body for PostSendChatAction for multipart/form-data ContentType.
type PostSendChatActionMultipartRequestBody PostSendChatActionMultipartBody

// PostSendContactJSONRequestBody defines body for PostSendContact for application/json ContentType.
type PostSendContactJSONRequestBody PostSendContactJSONBody

// PostSendContactFormdataRequestBody defines body for PostSendContact for application/x-www-form-urlencoded ContentType.
type PostSendContactFormdataRequestBody PostSendContactFormdataBody

// PostSendContactMultipartRequestBody defines body for PostSendContact for multipart/form-data ContentType.
type PostSendContactMultipartRequestBody PostSendContactMultipartBody

// PostSendDiceJSONRequestBody defines body for PostSendDice for application/json ContentType.
type PostSendDiceJSONRequestBody PostSendDiceJSONBody

// PostSendDiceFormdataRequestBody defines body for PostSendDice for application/x-www-form-urlencoded ContentType.
type PostSendDiceFormdataRequestBody PostSendDiceFormdataBody

// PostSendDiceMultipartRequestBody defines body for PostSendDice for multipart/form-data ContentType.
type PostSendDiceMultipartRequestBody PostSendDiceMultipartBody

// PostSendDocumentMultipartRequestBody defines body for PostSendDocument for multipart/form-data ContentType.
type PostSendDocumentMultipartRequestBody PostSendDocumentMultipartBody

// PostSendGameJSONRequestBody defines body for PostSendGame for application/json ContentType.
type PostSendGameJSONRequestBody PostSendGameJSONBody

// PostSendGameFormdataRequestBody defines body for PostSendGame for application/x-www-form-urlencoded ContentType.
type PostSendGameFormdataRequestBody PostSendGameFormdataBody

// PostSendGameMultipartRequestBody defines body for PostSendGame for multipart/form-data ContentType.
type PostSendGameMultipartRequestBody PostSendGameMultipartBody

// PostSendInvoiceJSONRequestBody defines body for PostSendInvoice for application/json ContentType.
type PostSendInvoiceJSONRequestBody PostSendInvoiceJSONBody

// PostSendInvoiceFormdataRequestBody defines body for PostSendInvoice for application/x-www-form-urlencoded ContentType.
type PostSendInvoiceFormdataRequestBody PostSendInvoiceFormdataBody

// PostSendInvoiceMultipartRequestBody defines body for PostSendInvoice for multipart/form-data ContentType.
type PostSendInvoiceMultipartRequestBody PostSendInvoiceMultipartBody

// PostSendLocationJSONRequestBody defines body for PostSendLocation for application/json ContentType.
type PostSendLocationJSONRequestBody PostSendLocationJSONBody

// PostSendLocationFormdataRequestBody defines body for PostSendLocation for application/x-www-form-urlencoded ContentType.
type PostSendLocationFormdataRequestBody PostSendLocationFormdataBody

// PostSendLocationMultipartRequestBody defines body for PostSendLocation for multipart/form-data ContentType.
type PostSendLocationMultipartRequestBody PostSendLocationMultipartBody

// PostSendMediaGroupMultipartRequestBody defines body for PostSendMediaGroup for multipart/form-data ContentType.
type PostSendMediaGroupMultipartRequestBody PostSendMediaGroupMultipartBody

// PostSendMessageJSONRequestBody defines body for PostSendMessage for application/json ContentType.
type PostSendMessageJSONRequestBody PostSendMessageJSONBody

// PostSendMessageFormdataRequestBody defines body for PostSendMessage for application/x-www-form-urlencoded ContentType.
type PostSendMessageFormdataRequestBody PostSendMessageFormdataBody

// PostSendMessageMultipartRequestBody defines body for PostSendMessage for multipart/form-data ContentType.
type PostSendMessageMultipartRequestBody PostSendMessageMultipartBody

// PostSendPhotoMultipartRequestBody defines body for PostSendPhoto for multipart/form-data ContentType.
type PostSendPhotoMultipartRequestBody PostSendPhotoMultipartBody

// PostSendPollJSONRequestBody defines body for PostSendPoll for application/json ContentType.
type PostSendPollJSONRequestBody PostSendPollJSONBody

// PostSendPollFormdataRequestBody defines body for PostSendPoll for application/x-www-form-urlencoded ContentType.
type PostSendPollFormdataRequestBody PostSendPollFormdataBody

// PostSendPollMultipartRequestBody defines body for PostSendPoll for multipart/form-data ContentType.
type PostSendPollMultipartRequestBody PostSendPollMultipartBody

// PostSendStickerMultipartRequestBody defines body for PostSendSticker for multipart/form-data ContentType.
type PostSendStickerMultipartRequestBody PostSendStickerMultipartBody

// PostSendVenueJSONRequestBody defines body for PostSendVenue for application/json ContentType.
type PostSendVenueJSONRequestBody PostSendVenueJSONBody

// PostSendVenueFormdataRequestBody defines body for PostSendVenue for application/x-www-form-urlencoded ContentType.
type PostSendVenueFormdataRequestBody PostSendVenueFormdataBody

// PostSendVenueMultipartRequestBody defines body for PostSendVenue for multipart/form-data ContentType.
type PostSendVenueMultipartRequestBody PostSendVenueMultipartBody

// PostSendVideoMultipartRequestBody defines body for PostSendVideo for multipart/form-data ContentType.
type PostSendVideoMultipartRequestBody PostSendVideoMultipartBody

// PostSendVideoNoteMultipartRequestBody defines body for PostSendVideoNote for multipart/form-data ContentType.
type PostSendVideoNoteMultipartRequestBody PostSendVideoNoteMultipartBody

// PostSendVoiceMultipartRequestBody defines body for PostSendVoice for multipart/form-data ContentType.
type PostSendVoiceMultipartRequestBody PostSendVoiceMultipartBody

// PostSetChatAdministratorCustomTitleJSONRequestBody defines body for PostSetChatAdministratorCustomTitle for application/json ContentType.
type PostSetChatAdministratorCustomTitleJSONRequestBody PostSetChatAdministratorCustomTitleJSONBody

// PostSetChatAdministratorCustomTitleFormdataRequestBody defines body for PostSetChatAdministratorCustomTitle for application/x-www-form-urlencoded ContentType.
type PostSetChatAdministratorCustomTitleFormdataRequestBody PostSetChatAdministratorCustomTitleFormdataBody

// PostSetChatAdministratorCustomTitleMultipartRequestBody defines body for PostSetChatAdministratorCustomTitle for multipart/form-data ContentType.
type PostSetChatAdministratorCustomTitleMultipartRequestBody PostSetChatAdministratorCustomTitleMultipartBody

// PostSetChatDescriptionJSONRequestBody defines body for PostSetChatDescription for application/json ContentType.
type PostSetChatDescriptionJSONRequestBody PostSetChatDescriptionJSONBody

// PostSetChatDescriptionFormdataRequestBody defines body for PostSetChatDescription for application/x-www-form-urlencoded ContentType.
type PostSetChatDescriptionFormdataRequestBody PostSetChatDescriptionFormdataBody

// PostSetChatDescriptionMultipartRequestBody defines body for PostSetChatDescription for multipart/form-data ContentType.
type PostSetChatDescriptionMultipartRequestBody PostSetChatDescriptionMultipartBody

// PostSetChatPermissionsJSONRequestBody defines body for PostSetChatPermissions for application/json ContentType.
type PostSetChatPermissionsJSONRequestBody PostSetChatPermissionsJSONBody

// PostSetChatPermissionsFormdataRequestBody defines body for PostSetChatPermissions for application/x-www-form-urlencoded ContentType.
type PostSetChatPermissionsFormdataRequestBody PostSetChatPermissionsFormdataBody

// PostSetChatPermissionsMultipartRequestBody defines body for PostSetChatPermissions for multipart/form-data ContentType.
type PostSetChatPermissionsMultipartRequestBody PostSetChatPermissionsMultipartBody

// PostSetChatPhotoMultipartRequestBody defines body for PostSetChatPhoto for multipart/form-data ContentType.
type PostSetChatPhotoMultipartRequestBody PostSetChatPhotoMultipartBody

// PostSetChatStickerSetJSONRequestBody defines body for PostSetChatStickerSet for application/json ContentType.
type PostSetChatStickerSetJSONRequestBody PostSetChatStickerSetJSONBody

// PostSetChatStickerSetFormdataRequestBody defines body for PostSetChatStickerSet for application/x-www-form-urlencoded ContentType.
type PostSetChatStickerSetFormdataRequestBody PostSetChatStickerSetFormdataBody

// PostSetChatStickerSetMultipartRequestBody defines body for PostSetChatStickerSet for multipart/form-data ContentType.
type PostSetChatStickerSetMultipartRequestBody PostSetChatStickerSetMultipartBody

// PostSetChatTitleJSONRequestBody defines body for PostSetChatTitle for application/json ContentType.
type PostSetChatTitleJSONRequestBody PostSetChatTitleJSONBody

// PostSetChatTitleFormdataRequestBody defines body for PostSetChatTitle for application/x-www-form-urlencoded ContentType.
type PostSetChatTitleFormdataRequestBody PostSetChatTitleFormdataBody

// PostSetChatTitleMultipartRequestBody defines body for PostSetChatTitle for multipart/form-data ContentType.
type PostSetChatTitleMultipartRequestBody PostSetChatTitleMultipartBody

// PostSetGameScoreJSONRequestBody defines body for PostSetGameScore for application/json ContentType.
type PostSetGameScoreJSONRequestBody PostSetGameScoreJSONBody

// PostSetGameScoreFormdataRequestBody defines body for PostSetGameScore for application/x-www-form-urlencoded ContentType.
type PostSetGameScoreFormdataRequestBody PostSetGameScoreFormdataBody

// PostSetGameScoreMultipartRequestBody defines body for PostSetGameScore for multipart/form-data ContentType.
type PostSetGameScoreMultipartRequestBody PostSetGameScoreMultipartBody

// PostSetMyCommandsJSONRequestBody defines body for PostSetMyCommands for application/json ContentType.
type PostSetMyCommandsJSONRequestBody PostSetMyCommandsJSONBody

// PostSetMyCommandsFormdataRequestBody defines body for PostSetMyCommands for application/x-www-form-urlencoded ContentType.
type PostSetMyCommandsFormdataRequestBody PostSetMyCommandsFormdataBody

// PostSetMyCommandsMultipartRequestBody defines body for PostSetMyCommands for multipart/form-data ContentType.
type PostSetMyCommandsMultipartRequestBody PostSetMyCommandsMultipartBody

// PostSetPassportDataErrorsJSONRequestBody defines body for PostSetPassportDataErrors for application/json ContentType.
type PostSetPassportDataErrorsJSONRequestBody PostSetPassportDataErrorsJSONBody

// PostSetPassportDataErrorsFormdataRequestBody defines body for PostSetPassportDataErrors for application/x-www-form-urlencoded ContentType.
type PostSetPassportDataErrorsFormdataRequestBody PostSetPassportDataErrorsFormdataBody

// PostSetPassportDataErrorsMultipartRequestBody defines body for PostSetPassportDataErrors for multipart/form-data ContentType.
type PostSetPassportDataErrorsMultipartRequestBody PostSetPassportDataErrorsMultipartBody

// PostSetPollAnswerJSONRequestBody defines body for PostSetPollAnswer for application/json ContentType.
type PostSetPollAnswerJSONRequestBody PostSetPollAnswerJSONBody

// PostSetPollAnswerFormdataRequestBody defines body for PostSetPollAnswer for application/x-www-form-urlencoded ContentType.
type PostSetPollAnswerFormdataRequestBody PostSetPollAnswerFormdataBody

// PostSetPollAnswerMultipartRequestBody defines body for PostSetPollAnswer for multipart/form-data ContentType.
type PostSetPollAnswerMultipartRequestBody PostSetPollAnswerMultipartBody

// PostSetStickerPositionInSetJSONRequestBody defines body for PostSetStickerPositionInSet for application/json ContentType.
type PostSetStickerPositionInSetJSONRequestBody PostSetStickerPositionInSetJSONBody

// PostSetStickerPositionInSetFormdataRequestBody defines body for PostSetStickerPositionInSet for application/x-www-form-urlencoded ContentType.
type PostSetStickerPositionInSetFormdataRequestBody PostSetStickerPositionInSetFormdataBody

// PostSetStickerPositionInSetMultipartRequestBody defines body for PostSetStickerPositionInSet for multipart/form-data ContentType.
type PostSetStickerPositionInSetMultipartRequestBody PostSetStickerPositionInSetMultipartBody

// PostSetStickerSetThumbMultipartRequestBody defines body for PostSetStickerSetThumb for multipart/form-data ContentType.
type PostSetStickerSetThumbMultipartRequestBody PostSetStickerSetThumbMultipartBody

// PostSetWebhookMultipartRequestBody defines body for PostSetWebhook for multipart/form-data ContentType.
type PostSetWebhookMultipartRequestBody PostSetWebhookMultipartBody

// PostStopMessageLiveLocationJSONRequestBody defines body for PostStopMessageLiveLocation for application/json ContentType.
type PostStopMessageLiveLocationJSONRequestBody PostStopMessageLiveLocationJSONBody

// PostStopMessageLiveLocationFormdataRequestBody defines body for PostStopMessageLiveLocation for application/x-www-form-urlencoded ContentType.
type PostStopMessageLiveLocationFormdataRequestBody PostStopMessageLiveLocationFormdataBody

// PostStopMessageLiveLocationMultipartRequestBody defines body for PostStopMessageLiveLocation for multipart/form-data ContentType.
type PostStopMessageLiveLocationMultipartRequestBody PostStopMessageLiveLocationMultipartBody

// PostStopPollJSONRequestBody defines body for PostStopPoll for application/json ContentType.
type PostStopPollJSONRequestBody PostStopPollJSONBody

// PostStopPollFormdataRequestBody defines body for PostStopPoll for application/x-www-form-urlencoded ContentType.
type PostStopPollFormdataRequestBody PostStopPollFormdataBody

// PostStopPollMultipartRequestBody defines body for PostStopPoll for multipart/form-data ContentType.
type PostStopPollMultipartRequestBody PostStopPollMultipartBody

// PostUnbanChatMemberJSONRequestBody defines body for PostUnbanChatMember for application/json ContentType.
type PostUnbanChatMemberJSONRequestBody PostUnbanChatMemberJSONBody

// PostUnbanChatMemberFormdataRequestBody defines body for PostUnbanChatMember for application/x-www-form-urlencoded ContentType.
type PostUnbanChatMemberFormdataRequestBody PostUnbanChatMemberFormdataBody

// PostUnbanChatMemberMultipartRequestBody defines body for PostUnbanChatMember for multipart/form-data ContentType.
type PostUnbanChatMemberMultipartRequestBody PostUnbanChatMemberMultipartBody

// PostUnpinAllChatMessagesJSONRequestBody defines body for PostUnpinAllChatMessages for application/json ContentType.
type PostUnpinAllChatMessagesJSONRequestBody PostUnpinAllChatMessagesJSONBody

// PostUnpinAllChatMessagesFormdataRequestBody defines body for PostUnpinAllChatMessages for application/x-www-form-urlencoded ContentType.
type PostUnpinAllChatMessagesFormdataRequestBody PostUnpinAllChatMessagesFormdataBody

// PostUnpinAllChatMessagesMultipartRequestBody defines body for PostUnpinAllChatMessages for multipart/form-data ContentType.
type PostUnpinAllChatMessagesMultipartRequestBody PostUnpinAllChatMessagesMultipartBody

// PostUnpinChatMessageJSONRequestBody defines body for PostUnpinChatMessage for application/json ContentType.
type PostUnpinChatMessageJSONRequestBody PostUnpinChatMessageJSONBody

// PostUnpinChatMessageFormdataRequestBody defines body for PostUnpinChatMessage for application/x-www-form-urlencoded ContentType.
type PostUnpinChatMessageFormdataRequestBody PostUnpinChatMessageFormdataBody

// PostUnpinChatMessageMultipartRequestBody defines body for PostUnpinChatMessage for multipart/form-data ContentType.
type PostUnpinChatMessageMultipartRequestBody PostUnpinChatMessageMultipartBody

// PostUploadStickerFileMultipartRequestBody defines body for PostUploadStickerFile for multipart/form-data ContentType.
type PostUploadStickerFileMultipartRequestBody PostUploadStickerFileMultipartBody

// PostUserLoginJSONRequestBody defines body for PostUserLogin for application/json ContentType.
type PostUserLoginJSONRequestBody PostUserLoginJSONBody

// PostUserLoginFormdataRequestBody defines body for PostUserLogin for application/x-www-form-urlencoded ContentType.
type PostUserLoginFormdataRequestBody PostUserLoginFormdataBody

// PostUserLoginMultipartRequestBody defines body for PostUserLogin for multipart/form-data ContentType.
type PostUserLoginMultipartRequestBody PostUserLoginMultipartBody

// AsInlineQueryResultCachedAudio returns the union data inside the InlineQueryResult as a InlineQueryResultCachedAudio
func (t InlineQueryResult) AsInlineQueryResultCachedAudio() (InlineQueryResultCachedAudio, error) {
	var body InlineQueryResultCachedAudio
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedAudio overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedAudio
func (t *InlineQueryResult) FromInlineQueryResultCachedAudio(v InlineQueryResultCachedAudio) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedAudio performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedAudio
func (t *InlineQueryResult) MergeInlineQueryResultCachedAudio(v InlineQueryResultCachedAudio) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedDocument returns the union data inside the InlineQueryResult as a InlineQueryResultCachedDocument
func (t InlineQueryResult) AsInlineQueryResultCachedDocument() (InlineQueryResultCachedDocument, error) {
	var body InlineQueryResultCachedDocument
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedDocument overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedDocument
func (t *InlineQueryResult) FromInlineQueryResultCachedDocument(v InlineQueryResultCachedDocument) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedDocument performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedDocument
func (t *InlineQueryResult) MergeInlineQueryResultCachedDocument(v InlineQueryResultCachedDocument) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedGif returns the union data inside the InlineQueryResult as a InlineQueryResultCachedGif
func (t InlineQueryResult) AsInlineQueryResultCachedGif() (InlineQueryResultCachedGif, error) {
	var body InlineQueryResultCachedGif
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedGif overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedGif
func (t *InlineQueryResult) FromInlineQueryResultCachedGif(v InlineQueryResultCachedGif) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedGif performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedGif
func (t *InlineQueryResult) MergeInlineQueryResultCachedGif(v InlineQueryResultCachedGif) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedMpeg4Gif returns the union data inside the InlineQueryResult as a InlineQueryResultCachedMpeg4Gif
func (t InlineQueryResult) AsInlineQueryResultCachedMpeg4Gif() (InlineQueryResultCachedMpeg4Gif, error) {
	var body InlineQueryResultCachedMpeg4Gif
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedMpeg4Gif overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedMpeg4Gif
func (t *InlineQueryResult) FromInlineQueryResultCachedMpeg4Gif(v InlineQueryResultCachedMpeg4Gif) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedMpeg4Gif performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedMpeg4Gif
func (t *InlineQueryResult) MergeInlineQueryResultCachedMpeg4Gif(v InlineQueryResultCachedMpeg4Gif) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedPhoto returns the union data inside the InlineQueryResult as a InlineQueryResultCachedPhoto
func (t InlineQueryResult) AsInlineQueryResultCachedPhoto() (InlineQueryResultCachedPhoto, error) {
	var body InlineQueryResultCachedPhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedPhoto overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedPhoto
func (t *InlineQueryResult) FromInlineQueryResultCachedPhoto(v InlineQueryResultCachedPhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedPhoto performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedPhoto
func (t *InlineQueryResult) MergeInlineQueryResultCachedPhoto(v InlineQueryResultCachedPhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedSticker returns the union data inside the InlineQueryResult as a InlineQueryResultCachedSticker
func (t InlineQueryResult) AsInlineQueryResultCachedSticker() (InlineQueryResultCachedSticker, error) {
	var body InlineQueryResultCachedSticker
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedSticker overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedSticker
func (t *InlineQueryResult) FromInlineQueryResultCachedSticker(v InlineQueryResultCachedSticker) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedSticker performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedSticker
func (t *InlineQueryResult) MergeInlineQueryResultCachedSticker(v InlineQueryResultCachedSticker) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedVideo returns the union data inside the InlineQueryResult as a InlineQueryResultCachedVideo
func (t InlineQueryResult) AsInlineQueryResultCachedVideo() (InlineQueryResultCachedVideo, error) {
	var body InlineQueryResultCachedVideo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedVideo overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedVideo
func (t *InlineQueryResult) FromInlineQueryResultCachedVideo(v InlineQueryResultCachedVideo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedVideo performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedVideo
func (t *InlineQueryResult) MergeInlineQueryResultCachedVideo(v InlineQueryResultCachedVideo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultCachedVoice returns the union data inside the InlineQueryResult as a InlineQueryResultCachedVoice
func (t InlineQueryResult) AsInlineQueryResultCachedVoice() (InlineQueryResultCachedVoice, error) {
	var body InlineQueryResultCachedVoice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultCachedVoice overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultCachedVoice
func (t *InlineQueryResult) FromInlineQueryResultCachedVoice(v InlineQueryResultCachedVoice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultCachedVoice performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultCachedVoice
func (t *InlineQueryResult) MergeInlineQueryResultCachedVoice(v InlineQueryResultCachedVoice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultArticle returns the union data inside the InlineQueryResult as a InlineQueryResultArticle
func (t InlineQueryResult) AsInlineQueryResultArticle() (InlineQueryResultArticle, error) {
	var body InlineQueryResultArticle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultArticle overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultArticle
func (t *InlineQueryResult) FromInlineQueryResultArticle(v InlineQueryResultArticle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultArticle performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultArticle
func (t *InlineQueryResult) MergeInlineQueryResultArticle(v InlineQueryResultArticle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultAudio returns the union data inside the InlineQueryResult as a InlineQueryResultAudio
func (t InlineQueryResult) AsInlineQueryResultAudio() (InlineQueryResultAudio, error) {
	var body InlineQueryResultAudio
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultAudio overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultAudio
func (t *InlineQueryResult) FromInlineQueryResultAudio(v InlineQueryResultAudio) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultAudio performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultAudio
func (t *InlineQueryResult) MergeInlineQueryResultAudio(v InlineQueryResultAudio) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultContact returns the union data inside the InlineQueryResult as a InlineQueryResultContact
func (t InlineQueryResult) AsInlineQueryResultContact() (InlineQueryResultContact, error) {
	var body InlineQueryResultContact
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultContact overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultContact
func (t *InlineQueryResult) FromInlineQueryResultContact(v InlineQueryResultContact) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultContact performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultContact
func (t *InlineQueryResult) MergeInlineQueryResultContact(v InlineQueryResultContact) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultGame returns the union data inside the InlineQueryResult as a InlineQueryResultGame
func (t InlineQueryResult) AsInlineQueryResultGame() (InlineQueryResultGame, error) {
	var body InlineQueryResultGame
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultGame overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultGame
func (t *InlineQueryResult) FromInlineQueryResultGame(v InlineQueryResultGame) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultGame performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultGame
func (t *InlineQueryResult) MergeInlineQueryResultGame(v InlineQueryResultGame) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultDocument returns the union data inside the InlineQueryResult as a InlineQueryResultDocument
func (t InlineQueryResult) AsInlineQueryResultDocument() (InlineQueryResultDocument, error) {
	var body InlineQueryResultDocument
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultDocument overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultDocument
func (t *InlineQueryResult) FromInlineQueryResultDocument(v InlineQueryResultDocument) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultDocument performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultDocument
func (t *InlineQueryResult) MergeInlineQueryResultDocument(v InlineQueryResultDocument) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultGif returns the union data inside the InlineQueryResult as a InlineQueryResultGif
func (t InlineQueryResult) AsInlineQueryResultGif() (InlineQueryResultGif, error) {
	var body InlineQueryResultGif
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultGif overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultGif
func (t *InlineQueryResult) FromInlineQueryResultGif(v InlineQueryResultGif) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultGif performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultGif
func (t *InlineQueryResult) MergeInlineQueryResultGif(v InlineQueryResultGif) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultLocation returns the union data inside the InlineQueryResult as a InlineQueryResultLocation
func (t InlineQueryResult) AsInlineQueryResultLocation() (InlineQueryResultLocation, error) {
	var body InlineQueryResultLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultLocation overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultLocation
func (t *InlineQueryResult) FromInlineQueryResultLocation(v InlineQueryResultLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultLocation performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultLocation
func (t *InlineQueryResult) MergeInlineQueryResultLocation(v InlineQueryResultLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultMpeg4Gif returns the union data inside the InlineQueryResult as a InlineQueryResultMpeg4Gif
func (t InlineQueryResult) AsInlineQueryResultMpeg4Gif() (InlineQueryResultMpeg4Gif, error) {
	var body InlineQueryResultMpeg4Gif
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultMpeg4Gif overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultMpeg4Gif
func (t *InlineQueryResult) FromInlineQueryResultMpeg4Gif(v InlineQueryResultMpeg4Gif) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultMpeg4Gif performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultMpeg4Gif
func (t *InlineQueryResult) MergeInlineQueryResultMpeg4Gif(v InlineQueryResultMpeg4Gif) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultPhoto returns the union data inside the InlineQueryResult as a InlineQueryResultPhoto
func (t InlineQueryResult) AsInlineQueryResultPhoto() (InlineQueryResultPhoto, error) {
	var body InlineQueryResultPhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultPhoto overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultPhoto
func (t *InlineQueryResult) FromInlineQueryResultPhoto(v InlineQueryResultPhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultPhoto performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultPhoto
func (t *InlineQueryResult) MergeInlineQueryResultPhoto(v InlineQueryResultPhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultVenue returns the union data inside the InlineQueryResult as a InlineQueryResultVenue
func (t InlineQueryResult) AsInlineQueryResultVenue() (InlineQueryResultVenue, error) {
	var body InlineQueryResultVenue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultVenue overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultVenue
func (t *InlineQueryResult) FromInlineQueryResultVenue(v InlineQueryResultVenue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultVenue performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultVenue
func (t *InlineQueryResult) MergeInlineQueryResultVenue(v InlineQueryResultVenue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultVideo returns the union data inside the InlineQueryResult as a InlineQueryResultVideo
func (t InlineQueryResult) AsInlineQueryResultVideo() (InlineQueryResultVideo, error) {
	var body InlineQueryResultVideo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultVideo overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultVideo
func (t *InlineQueryResult) FromInlineQueryResultVideo(v InlineQueryResultVideo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultVideo performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultVideo
func (t *InlineQueryResult) MergeInlineQueryResultVideo(v InlineQueryResultVideo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineQueryResultVoice returns the union data inside the InlineQueryResult as a InlineQueryResultVoice
func (t InlineQueryResult) AsInlineQueryResultVoice() (InlineQueryResultVoice, error) {
	var body InlineQueryResultVoice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineQueryResultVoice overwrites any union data inside the InlineQueryResult as the provided InlineQueryResultVoice
func (t *InlineQueryResult) FromInlineQueryResultVoice(v InlineQueryResultVoice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineQueryResultVoice performs a merge with any union data inside the InlineQueryResult, using the provided InlineQueryResultVoice
func (t *InlineQueryResult) MergeInlineQueryResultVoice(v InlineQueryResultVoice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InlineQueryResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InlineQueryResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputMediaAnimation returns the union data inside the InputMedia as a InputMediaAnimation
func (t InputMedia) AsInputMediaAnimation() (InputMediaAnimation, error) {
	var body InputMediaAnimation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaAnimation overwrites any union data inside the InputMedia as the provided InputMediaAnimation
func (t *InputMedia) FromInputMediaAnimation(v InputMediaAnimation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaAnimation performs a merge with any union data inside the InputMedia, using the provided InputMediaAnimation
func (t *InputMedia) MergeInputMediaAnimation(v InputMediaAnimation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaDocument returns the union data inside the InputMedia as a InputMediaDocument
func (t InputMedia) AsInputMediaDocument() (InputMediaDocument, error) {
	var body InputMediaDocument
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaDocument overwrites any union data inside the InputMedia as the provided InputMediaDocument
func (t *InputMedia) FromInputMediaDocument(v InputMediaDocument) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaDocument performs a merge with any union data inside the InputMedia, using the provided InputMediaDocument
func (t *InputMedia) MergeInputMediaDocument(v InputMediaDocument) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaAudio returns the union data inside the InputMedia as a InputMediaAudio
func (t InputMedia) AsInputMediaAudio() (InputMediaAudio, error) {
	var body InputMediaAudio
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaAudio overwrites any union data inside the InputMedia as the provided InputMediaAudio
func (t *InputMedia) FromInputMediaAudio(v InputMediaAudio) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaAudio performs a merge with any union data inside the InputMedia, using the provided InputMediaAudio
func (t *InputMedia) MergeInputMediaAudio(v InputMediaAudio) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaPhoto returns the union data inside the InputMedia as a InputMediaPhoto
func (t InputMedia) AsInputMediaPhoto() (InputMediaPhoto, error) {
	var body InputMediaPhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaPhoto overwrites any union data inside the InputMedia as the provided InputMediaPhoto
func (t *InputMedia) FromInputMediaPhoto(v InputMediaPhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaPhoto performs a merge with any union data inside the InputMedia, using the provided InputMediaPhoto
func (t *InputMedia) MergeInputMediaPhoto(v InputMediaPhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaVideo returns the union data inside the InputMedia as a InputMediaVideo
func (t InputMedia) AsInputMediaVideo() (InputMediaVideo, error) {
	var body InputMediaVideo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaVideo overwrites any union data inside the InputMedia as the provided InputMediaVideo
func (t *InputMedia) FromInputMediaVideo(v InputMediaVideo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaVideo performs a merge with any union data inside the InputMedia, using the provided InputMediaVideo
func (t *InputMedia) MergeInputMediaVideo(v InputMediaVideo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMedia) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMedia) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputFile returns the union data inside the InputMediaAnimation_Thumb as a InputFile
func (t InputMediaAnimation_Thumb) AsInputFile() (InputFile, error) {
	var body InputFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputFile overwrites any union data inside the InputMediaAnimation_Thumb as the provided InputFile
func (t *InputMediaAnimation_Thumb) FromInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputFile performs a merge with any union data inside the InputMediaAnimation_Thumb, using the provided InputFile
func (t *InputMediaAnimation_Thumb) MergeInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaAnimationThumb1 returns the union data inside the InputMediaAnimation_Thumb as a InputMediaAnimationThumb1
func (t InputMediaAnimation_Thumb) AsInputMediaAnimationThumb1() (InputMediaAnimationThumb1, error) {
	var body InputMediaAnimationThumb1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaAnimationThumb1 overwrites any union data inside the InputMediaAnimation_Thumb as the provided InputMediaAnimationThumb1
func (t *InputMediaAnimation_Thumb) FromInputMediaAnimationThumb1(v InputMediaAnimationThumb1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaAnimationThumb1 performs a merge with any union data inside the InputMediaAnimation_Thumb, using the provided InputMediaAnimationThumb1
func (t *InputMediaAnimation_Thumb) MergeInputMediaAnimationThumb1(v InputMediaAnimationThumb1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMediaAnimation_Thumb) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMediaAnimation_Thumb) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputFile returns the union data inside the InputMediaAudio_Thumb as a InputFile
func (t InputMediaAudio_Thumb) AsInputFile() (InputFile, error) {
	var body InputFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputFile overwrites any union data inside the InputMediaAudio_Thumb as the provided InputFile
func (t *InputMediaAudio_Thumb) FromInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputFile performs a merge with any union data inside the InputMediaAudio_Thumb, using the provided InputFile
func (t *InputMediaAudio_Thumb) MergeInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaAudioThumb1 returns the union data inside the InputMediaAudio_Thumb as a InputMediaAudioThumb1
func (t InputMediaAudio_Thumb) AsInputMediaAudioThumb1() (InputMediaAudioThumb1, error) {
	var body InputMediaAudioThumb1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaAudioThumb1 overwrites any union data inside the InputMediaAudio_Thumb as the provided InputMediaAudioThumb1
func (t *InputMediaAudio_Thumb) FromInputMediaAudioThumb1(v InputMediaAudioThumb1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaAudioThumb1 performs a merge with any union data inside the InputMediaAudio_Thumb, using the provided InputMediaAudioThumb1
func (t *InputMediaAudio_Thumb) MergeInputMediaAudioThumb1(v InputMediaAudioThumb1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMediaAudio_Thumb) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMediaAudio_Thumb) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputFile returns the union data inside the InputMediaDocument_Thumb as a InputFile
func (t InputMediaDocument_Thumb) AsInputFile() (InputFile, error) {
	var body InputFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputFile overwrites any union data inside the InputMediaDocument_Thumb as the provided InputFile
func (t *InputMediaDocument_Thumb) FromInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputFile performs a merge with any union data inside the InputMediaDocument_Thumb, using the provided InputFile
func (t *InputMediaDocument_Thumb) MergeInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaDocumentThumb1 returns the union data inside the InputMediaDocument_Thumb as a InputMediaDocumentThumb1
func (t InputMediaDocument_Thumb) AsInputMediaDocumentThumb1() (InputMediaDocumentThumb1, error) {
	var body InputMediaDocumentThumb1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaDocumentThumb1 overwrites any union data inside the InputMediaDocument_Thumb as the provided InputMediaDocumentThumb1
func (t *InputMediaDocument_Thumb) FromInputMediaDocumentThumb1(v InputMediaDocumentThumb1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaDocumentThumb1 performs a merge with any union data inside the InputMediaDocument_Thumb, using the provided InputMediaDocumentThumb1
func (t *InputMediaDocument_Thumb) MergeInputMediaDocumentThumb1(v InputMediaDocumentThumb1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMediaDocument_Thumb) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMediaDocument_Thumb) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputFile returns the union data inside the InputMediaVideo_Thumb as a InputFile
func (t InputMediaVideo_Thumb) AsInputFile() (InputFile, error) {
	var body InputFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputFile overwrites any union data inside the InputMediaVideo_Thumb as the provided InputFile
func (t *InputMediaVideo_Thumb) FromInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputFile performs a merge with any union data inside the InputMediaVideo_Thumb, using the provided InputFile
func (t *InputMediaVideo_Thumb) MergeInputFile(v InputFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputMediaVideoThumb1 returns the union data inside the InputMediaVideo_Thumb as a InputMediaVideoThumb1
func (t InputMediaVideo_Thumb) AsInputMediaVideoThumb1() (InputMediaVideoThumb1, error) {
	var body InputMediaVideoThumb1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputMediaVideoThumb1 overwrites any union data inside the InputMediaVideo_Thumb as the provided InputMediaVideoThumb1
func (t *InputMediaVideo_Thumb) FromInputMediaVideoThumb1(v InputMediaVideoThumb1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputMediaVideoThumb1 performs a merge with any union data inside the InputMediaVideo_Thumb, using the provided InputMediaVideoThumb1
func (t *InputMediaVideo_Thumb) MergeInputMediaVideoThumb1(v InputMediaVideoThumb1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMediaVideo_Thumb) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMediaVideo_Thumb) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInputTextMessageContent returns the union data inside the InputMessageContent as a InputTextMessageContent
func (t InputMessageContent) AsInputTextMessageContent() (InputTextMessageContent, error) {
	var body InputTextMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputTextMessageContent overwrites any union data inside the InputMessageContent as the provided InputTextMessageContent
func (t *InputMessageContent) FromInputTextMessageContent(v InputTextMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputTextMessageContent performs a merge with any union data inside the InputMessageContent, using the provided InputTextMessageContent
func (t *InputMessageContent) MergeInputTextMessageContent(v InputTextMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputLocationMessageContent returns the union data inside the InputMessageContent as a InputLocationMessageContent
func (t InputMessageContent) AsInputLocationMessageContent() (InputLocationMessageContent, error) {
	var body InputLocationMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputLocationMessageContent overwrites any union data inside the InputMessageContent as the provided InputLocationMessageContent
func (t *InputMessageContent) FromInputLocationMessageContent(v InputLocationMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputLocationMessageContent performs a merge with any union data inside the InputMessageContent, using the provided InputLocationMessageContent
func (t *InputMessageContent) MergeInputLocationMessageContent(v InputLocationMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputVenueMessageContent returns the union data inside the InputMessageContent as a InputVenueMessageContent
func (t InputMessageContent) AsInputVenueMessageContent() (InputVenueMessageContent, error) {
	var body InputVenueMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputVenueMessageContent overwrites any union data inside the InputMessageContent as the provided InputVenueMessageContent
func (t *InputMessageContent) FromInputVenueMessageContent(v InputVenueMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputVenueMessageContent performs a merge with any union data inside the InputMessageContent, using the provided InputVenueMessageContent
func (t *InputMessageContent) MergeInputVenueMessageContent(v InputVenueMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInputContactMessageContent returns the union data inside the InputMessageContent as a InputContactMessageContent
func (t InputMessageContent) AsInputContactMessageContent() (InputContactMessageContent, error) {
	var body InputContactMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInputContactMessageContent overwrites any union data inside the InputMessageContent as the provided InputContactMessageContent
func (t *InputMessageContent) FromInputContactMessageContent(v InputContactMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInputContactMessageContent performs a merge with any union data inside the InputMessageContent, using the provided InputContactMessageContent
func (t *InputMessageContent) MergeInputContactMessageContent(v InputContactMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InputMessageContent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InputMessageContent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPassportElementErrorDataField returns the union data inside the PassportElementError as a PassportElementErrorDataField
func (t PassportElementError) AsPassportElementErrorDataField() (PassportElementErrorDataField, error) {
	var body PassportElementErrorDataField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorDataField overwrites any union data inside the PassportElementError as the provided PassportElementErrorDataField
func (t *PassportElementError) FromPassportElementErrorDataField(v PassportElementErrorDataField) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorDataField performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorDataField
func (t *PassportElementError) MergePassportElementErrorDataField(v PassportElementErrorDataField) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorFrontSide returns the union data inside the PassportElementError as a PassportElementErrorFrontSide
func (t PassportElementError) AsPassportElementErrorFrontSide() (PassportElementErrorFrontSide, error) {
	var body PassportElementErrorFrontSide
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorFrontSide overwrites any union data inside the PassportElementError as the provided PassportElementErrorFrontSide
func (t *PassportElementError) FromPassportElementErrorFrontSide(v PassportElementErrorFrontSide) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorFrontSide performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorFrontSide
func (t *PassportElementError) MergePassportElementErrorFrontSide(v PassportElementErrorFrontSide) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorReverseSide returns the union data inside the PassportElementError as a PassportElementErrorReverseSide
func (t PassportElementError) AsPassportElementErrorReverseSide() (PassportElementErrorReverseSide, error) {
	var body PassportElementErrorReverseSide
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorReverseSide overwrites any union data inside the PassportElementError as the provided PassportElementErrorReverseSide
func (t *PassportElementError) FromPassportElementErrorReverseSide(v PassportElementErrorReverseSide) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorReverseSide performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorReverseSide
func (t *PassportElementError) MergePassportElementErrorReverseSide(v PassportElementErrorReverseSide) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorSelfie returns the union data inside the PassportElementError as a PassportElementErrorSelfie
func (t PassportElementError) AsPassportElementErrorSelfie() (PassportElementErrorSelfie, error) {
	var body PassportElementErrorSelfie
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorSelfie overwrites any union data inside the PassportElementError as the provided PassportElementErrorSelfie
func (t *PassportElementError) FromPassportElementErrorSelfie(v PassportElementErrorSelfie) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorSelfie performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorSelfie
func (t *PassportElementError) MergePassportElementErrorSelfie(v PassportElementErrorSelfie) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorFile returns the union data inside the PassportElementError as a PassportElementErrorFile
func (t PassportElementError) AsPassportElementErrorFile() (PassportElementErrorFile, error) {
	var body PassportElementErrorFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorFile overwrites any union data inside the PassportElementError as the provided PassportElementErrorFile
func (t *PassportElementError) FromPassportElementErrorFile(v PassportElementErrorFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorFile performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorFile
func (t *PassportElementError) MergePassportElementErrorFile(v PassportElementErrorFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorFiles returns the union data inside the PassportElementError as a PassportElementErrorFiles
func (t PassportElementError) AsPassportElementErrorFiles() (PassportElementErrorFiles, error) {
	var body PassportElementErrorFiles
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorFiles overwrites any union data inside the PassportElementError as the provided PassportElementErrorFiles
func (t *PassportElementError) FromPassportElementErrorFiles(v PassportElementErrorFiles) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorFiles performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorFiles
func (t *PassportElementError) MergePassportElementErrorFiles(v PassportElementErrorFiles) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorTranslationFile returns the union data inside the PassportElementError as a PassportElementErrorTranslationFile
func (t PassportElementError) AsPassportElementErrorTranslationFile() (PassportElementErrorTranslationFile, error) {
	var body PassportElementErrorTranslationFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorTranslationFile overwrites any union data inside the PassportElementError as the provided PassportElementErrorTranslationFile
func (t *PassportElementError) FromPassportElementErrorTranslationFile(v PassportElementErrorTranslationFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorTranslationFile performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorTranslationFile
func (t *PassportElementError) MergePassportElementErrorTranslationFile(v PassportElementErrorTranslationFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorTranslationFiles returns the union data inside the PassportElementError as a PassportElementErrorTranslationFiles
func (t PassportElementError) AsPassportElementErrorTranslationFiles() (PassportElementErrorTranslationFiles, error) {
	var body PassportElementErrorTranslationFiles
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorTranslationFiles overwrites any union data inside the PassportElementError as the provided PassportElementErrorTranslationFiles
func (t *PassportElementError) FromPassportElementErrorTranslationFiles(v PassportElementErrorTranslationFiles) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorTranslationFiles performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorTranslationFiles
func (t *PassportElementError) MergePassportElementErrorTranslationFiles(v PassportElementErrorTranslationFiles) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPassportElementErrorUnspecified returns the union data inside the PassportElementError as a PassportElementErrorUnspecified
func (t PassportElementError) AsPassportElementErrorUnspecified() (PassportElementErrorUnspecified, error) {
	var body PassportElementErrorUnspecified
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPassportElementErrorUnspecified overwrites any union data inside the PassportElementError as the provided PassportElementErrorUnspecified
func (t *PassportElementError) FromPassportElementErrorUnspecified(v PassportElementErrorUnspecified) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePassportElementErrorUnspecified performs a merge with any union data inside the PassportElementError, using the provided PassportElementErrorUnspecified
func (t *PassportElementError) MergePassportElementErrorUnspecified(v PassportElementErrorUnspecified) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PassportElementError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PassportElementError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAddChatMemberWithBody request with any body
	PostAddChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddChatMember(ctx context.Context, body PostAddChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddChatMemberWithFormdataBody(ctx context.Context, body PostAddChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAddProxyWithBody request with any body
	PostAddProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddProxy(ctx context.Context, body PostAddProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddProxyWithFormdataBody(ctx context.Context, body PostAddProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAddStickerToSetWithBody request with any body
	PostAddStickerToSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnswerCallbackQueryWithBody request with any body
	PostAnswerCallbackQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerCallbackQuery(ctx context.Context, body PostAnswerCallbackQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerCallbackQueryWithFormdataBody(ctx context.Context, body PostAnswerCallbackQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnswerInlineQueryWithBody request with any body
	PostAnswerInlineQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerInlineQuery(ctx context.Context, body PostAnswerInlineQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerInlineQueryWithFormdataBody(ctx context.Context, body PostAnswerInlineQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnswerPreCheckoutQueryWithBody request with any body
	PostAnswerPreCheckoutQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerPreCheckoutQuery(ctx context.Context, body PostAnswerPreCheckoutQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerPreCheckoutQueryWithFormdataBody(ctx context.Context, body PostAnswerPreCheckoutQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnswerShippingQueryWithBody request with any body
	PostAnswerShippingQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerShippingQuery(ctx context.Context, body PostAnswerShippingQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnswerShippingQueryWithFormdataBody(ctx context.Context, body PostAnswerShippingQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthCodeWithBody request with any body
	PostAuthCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthCode(ctx context.Context, body PostAuthCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthCodeWithFormdataBody(ctx context.Context, body PostAuthCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthPasswordWithBody request with any body
	PostAuthPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthPassword(ctx context.Context, body PostAuthPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthPasswordWithFormdataBody(ctx context.Context, body PostAuthPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClose request
	PostClose(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCopyMessageWithBody request with any body
	PostCopyMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCopyMessage(ctx context.Context, body PostCopyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCopyMessageWithFormdataBody(ctx context.Context, body PostCopyMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreateChatWithBody request with any body
	PostCreateChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreateChat(ctx context.Context, body PostCreateChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreateChatWithFormdataBody(ctx context.Context, body PostCreateChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreateNewStickerSetWithBody request with any body
	PostCreateNewStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteChatHistoryWithBody request with any body
	PostDeleteChatHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatHistory(ctx context.Context, body PostDeleteChatHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatHistoryWithFormdataBody(ctx context.Context, body PostDeleteChatHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteChatPhotoWithBody request with any body
	PostDeleteChatPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatPhoto(ctx context.Context, body PostDeleteChatPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatPhotoWithFormdataBody(ctx context.Context, body PostDeleteChatPhotoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteChatStickerSetWithBody request with any body
	PostDeleteChatStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatStickerSet(ctx context.Context, body PostDeleteChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteChatStickerSetWithFormdataBody(ctx context.Context, body PostDeleteChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteMessageWithBody request with any body
	PostDeleteMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteMessage(ctx context.Context, body PostDeleteMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteMessageWithFormdataBody(ctx context.Context, body PostDeleteMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteMessagesWithBody request with any body
	PostDeleteMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteMessages(ctx context.Context, body PostDeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteMessagesWithFormdataBody(ctx context.Context, body PostDeleteMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteProxyWithBody request with any body
	PostDeleteProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteProxy(ctx context.Context, body PostDeleteProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteProxyWithFormdataBody(ctx context.Context, body PostDeleteProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteStickerFromSetWithBody request with any body
	PostDeleteStickerFromSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteStickerFromSet(ctx context.Context, body PostDeleteStickerFromSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteStickerFromSetWithFormdataBody(ctx context.Context, body PostDeleteStickerFromSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeleteWebhookWithBody request with any body
	PostDeleteWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteWebhook(ctx context.Context, body PostDeleteWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeleteWebhookWithFormdataBody(ctx context.Context, body PostDeleteWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDisableProxyWithBody request with any body
	PostDisableProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDisableProxy(ctx context.Context, body PostDisableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDisableProxyWithFormdataBody(ctx context.Context, body PostDisableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageCaptionWithBody request with any body
	PostEditMessageCaptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageCaption(ctx context.Context, body PostEditMessageCaptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageCaptionWithFormdataBody(ctx context.Context, body PostEditMessageCaptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageLiveLocationWithBody request with any body
	PostEditMessageLiveLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageLiveLocation(ctx context.Context, body PostEditMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageLiveLocationWithFormdataBody(ctx context.Context, body PostEditMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageMediaWithBody request with any body
	PostEditMessageMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageReplyMarkupWithBody request with any body
	PostEditMessageReplyMarkupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageReplyMarkup(ctx context.Context, body PostEditMessageReplyMarkupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageReplyMarkupWithFormdataBody(ctx context.Context, body PostEditMessageReplyMarkupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageSchedulingWithBody request with any body
	PostEditMessageSchedulingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageScheduling(ctx context.Context, body PostEditMessageSchedulingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageSchedulingWithFormdataBody(ctx context.Context, body PostEditMessageSchedulingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEditMessageTextWithBody request with any body
	PostEditMessageTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageText(ctx context.Context, body PostEditMessageTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEditMessageTextWithFormdataBody(ctx context.Context, body PostEditMessageTextFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnableProxyWithBody request with any body
	PostEnableProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnableProxy(ctx context.Context, body PostEnableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnableProxyWithFormdataBody(ctx context.Context, body PostEnableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExportChatInviteLinkWithBody request with any body
	PostExportChatInviteLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExportChatInviteLink(ctx context.Context, body PostExportChatInviteLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExportChatInviteLinkWithFormdataBody(ctx context.Context, body PostExportChatInviteLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostForwardMessageWithBody request with any body
	PostForwardMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostForwardMessage(ctx context.Context, body PostForwardMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostForwardMessageWithFormdataBody(ctx context.Context, body PostForwardMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetCallbackQueryAnswerWithBody request with any body
	PostGetCallbackQueryAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetCallbackQueryAnswer(ctx context.Context, body PostGetCallbackQueryAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetCallbackQueryAnswerWithFormdataBody(ctx context.Context, body PostGetCallbackQueryAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatWithBody request with any body
	PostGetChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChat(ctx context.Context, body PostGetChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatWithFormdataBody(ctx context.Context, body PostGetChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatAdministratorsWithBody request with any body
	PostGetChatAdministratorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatAdministrators(ctx context.Context, body PostGetChatAdministratorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatAdministratorsWithFormdataBody(ctx context.Context, body PostGetChatAdministratorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatMemberWithBody request with any body
	PostGetChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMember(ctx context.Context, body PostGetChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMemberWithFormdataBody(ctx context.Context, body PostGetChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatMembersWithBody request with any body
	PostGetChatMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMembers(ctx context.Context, body PostGetChatMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMembersWithFormdataBody(ctx context.Context, body PostGetChatMembersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatMembersCountWithBody request with any body
	PostGetChatMembersCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMembersCount(ctx context.Context, body PostGetChatMembersCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatMembersCountWithFormdataBody(ctx context.Context, body PostGetChatMembersCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetChatsWithBody request with any body
	PostGetChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChats(ctx context.Context, body PostGetChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetChatsWithFormdataBody(ctx context.Context, body PostGetChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetCommonChatsWithBody request with any body
	PostGetCommonChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetCommonChats(ctx context.Context, body PostGetCommonChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetCommonChatsWithFormdataBody(ctx context.Context, body PostGetCommonChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetFileWithBody request with any body
	PostGetFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetFile(ctx context.Context, body PostGetFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetFileWithFormdataBody(ctx context.Context, body PostGetFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetGameHighScoresWithBody request with any body
	PostGetGameHighScoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetGameHighScores(ctx context.Context, body PostGetGameHighScoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetGameHighScoresWithFormdataBody(ctx context.Context, body PostGetGameHighScoresFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetInactiveChats request
	PostGetInactiveChats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetMe request
	PostGetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetMemoryStats request
	PostGetMemoryStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetMessageInfoWithBody request with any body
	PostGetMessageInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetMessageInfo(ctx context.Context, body PostGetMessageInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetMessageInfoWithFormdataBody(ctx context.Context, body PostGetMessageInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetMyCommands request
	PostGetMyCommands(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetNearbyChatsWithBody request with any body
	PostGetNearbyChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetNearbyChats(ctx context.Context, body PostGetNearbyChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetNearbyChatsWithFormdataBody(ctx context.Context, body PostGetNearbyChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetProxies request
	PostGetProxies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetScheduledMessagesWithBody request with any body
	PostGetScheduledMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetScheduledMessages(ctx context.Context, body PostGetScheduledMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetScheduledMessagesWithFormdataBody(ctx context.Context, body PostGetScheduledMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetStickerSetWithBody request with any body
	PostGetStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetStickerSet(ctx context.Context, body PostGetStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetStickerSetWithFormdataBody(ctx context.Context, body PostGetStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetUpdatesWithBody request with any body
	PostGetUpdatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetUpdates(ctx context.Context, body PostGetUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetUpdatesWithFormdataBody(ctx context.Context, body PostGetUpdatesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetUserProfilePhotosWithBody request with any body
	PostGetUserProfilePhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetUserProfilePhotos(ctx context.Context, body PostGetUserProfilePhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetUserProfilePhotosWithFormdataBody(ctx context.Context, body PostGetUserProfilePhotosFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetWebhookInfo request
	PostGetWebhookInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJoinChatWithBody request with any body
	PostJoinChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJoinChat(ctx context.Context, body PostJoinChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJoinChatWithFormdataBody(ctx context.Context, body PostJoinChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostKickChatMemberWithBody request with any body
	PostKickChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKickChatMember(ctx context.Context, body PostKickChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostKickChatMemberWithFormdataBody(ctx context.Context, body PostKickChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLeaveChatWithBody request with any body
	PostLeaveChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLeaveChat(ctx context.Context, body PostLeaveChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLeaveChatWithFormdataBody(ctx context.Context, body PostLeaveChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogOut request
	PostLogOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOptimizeMemory request
	PostOptimizeMemory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPinChatMessageWithBody request with any body
	PostPinChatMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPinChatMessage(ctx context.Context, body PostPinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPinChatMessageWithFormdataBody(ctx context.Context, body PostPinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPing request
	PostPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPromoteChatMemberWithBody request with any body
	PostPromoteChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromoteChatMember(ctx context.Context, body PostPromoteChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPromoteChatMemberWithFormdataBody(ctx context.Context, body PostPromoteChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterUserWithBody request with any body
	PostRegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegisterUser(ctx context.Context, body PostRegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegisterUserWithFormdataBody(ctx context.Context, body PostRegisterUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReportChatWithBody request with any body
	PostReportChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReportChat(ctx context.Context, body PostReportChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReportChatWithFormdataBody(ctx context.Context, body PostReportChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRestrictChatMemberWithBody request with any body
	PostRestrictChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRestrictChatMember(ctx context.Context, body PostRestrictChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRestrictChatMemberWithFormdataBody(ctx context.Context, body PostRestrictChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchChatMessagesWithBody request with any body
	PostSearchChatMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchChatMessages(ctx context.Context, body PostSearchChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchChatMessagesWithFormdataBody(ctx context.Context, body PostSearchChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchMessagesWithBody request with any body
	PostSearchMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchMessages(ctx context.Context, body PostSearchMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchMessagesWithFormdataBody(ctx context.Context, body PostSearchMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchPublicChatsWithBody request with any body
	PostSearchPublicChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchPublicChats(ctx context.Context, body PostSearchPublicChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchPublicChatsWithFormdataBody(ctx context.Context, body PostSearchPublicChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendAnimationWithBody request with any body
	PostSendAnimationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendAudioWithBody request with any body
	PostSendAudioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendChatActionWithBody request with any body
	PostSendChatActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendChatAction(ctx context.Context, body PostSendChatActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendChatActionWithFormdataBody(ctx context.Context, body PostSendChatActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendContactWithBody request with any body
	PostSendContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendContact(ctx context.Context, body PostSendContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendContactWithFormdataBody(ctx context.Context, body PostSendContactFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendDiceWithBody request with any body
	PostSendDiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendDice(ctx context.Context, body PostSendDiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendDiceWithFormdataBody(ctx context.Context, body PostSendDiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendDocumentWithBody request with any body
	PostSendDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendGameWithBody request with any body
	PostSendGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendGame(ctx context.Context, body PostSendGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendGameWithFormdataBody(ctx context.Context, body PostSendGameFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendInvoiceWithBody request with any body
	PostSendInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendInvoice(ctx context.Context, body PostSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendInvoiceWithFormdataBody(ctx context.Context, body PostSendInvoiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendLocationWithBody request with any body
	PostSendLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendLocation(ctx context.Context, body PostSendLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendLocationWithFormdataBody(ctx context.Context, body PostSendLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendMediaGroupWithBody request with any body
	PostSendMediaGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendMessageWithBody request with any body
	PostSendMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendMessage(ctx context.Context, body PostSendMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendMessageWithFormdataBody(ctx context.Context, body PostSendMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendPhotoWithBody request with any body
	PostSendPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendPollWithBody request with any body
	PostSendPollWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendPoll(ctx context.Context, body PostSendPollJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendPollWithFormdataBody(ctx context.Context, body PostSendPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendStickerWithBody request with any body
	PostSendStickerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendVenueWithBody request with any body
	PostSendVenueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendVenue(ctx context.Context, body PostSendVenueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendVenueWithFormdataBody(ctx context.Context, body PostSendVenueFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendVideoWithBody request with any body
	PostSendVideoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendVideoNoteWithBody request with any body
	PostSendVideoNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendVoiceWithBody request with any body
	PostSendVoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatAdministratorCustomTitleWithBody request with any body
	PostSetChatAdministratorCustomTitleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatAdministratorCustomTitle(ctx context.Context, body PostSetChatAdministratorCustomTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatAdministratorCustomTitleWithFormdataBody(ctx context.Context, body PostSetChatAdministratorCustomTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatDescriptionWithBody request with any body
	PostSetChatDescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatDescription(ctx context.Context, body PostSetChatDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatDescriptionWithFormdataBody(ctx context.Context, body PostSetChatDescriptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatPermissionsWithBody request with any body
	PostSetChatPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatPermissions(ctx context.Context, body PostSetChatPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatPermissionsWithFormdataBody(ctx context.Context, body PostSetChatPermissionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatPhotoWithBody request with any body
	PostSetChatPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatStickerSetWithBody request with any body
	PostSetChatStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatStickerSet(ctx context.Context, body PostSetChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatStickerSetWithFormdataBody(ctx context.Context, body PostSetChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetChatTitleWithBody request with any body
	PostSetChatTitleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatTitle(ctx context.Context, body PostSetChatTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetChatTitleWithFormdataBody(ctx context.Context, body PostSetChatTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetGameScoreWithBody request with any body
	PostSetGameScoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetGameScore(ctx context.Context, body PostSetGameScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetGameScoreWithFormdataBody(ctx context.Context, body PostSetGameScoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetMyCommandsWithBody request with any body
	PostSetMyCommandsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetMyCommands(ctx context.Context, body PostSetMyCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetMyCommandsWithFormdataBody(ctx context.Context, body PostSetMyCommandsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetPassportDataErrorsWithBody request with any body
	PostSetPassportDataErrorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetPassportDataErrors(ctx context.Context, body PostSetPassportDataErrorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetPassportDataErrorsWithFormdataBody(ctx context.Context, body PostSetPassportDataErrorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetPollAnswerWithBody request with any body
	PostSetPollAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetPollAnswer(ctx context.Context, body PostSetPollAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetPollAnswerWithFormdataBody(ctx context.Context, body PostSetPollAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetStickerPositionInSetWithBody request with any body
	PostSetStickerPositionInSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetStickerPositionInSet(ctx context.Context, body PostSetStickerPositionInSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSetStickerPositionInSetWithFormdataBody(ctx context.Context, body PostSetStickerPositionInSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetStickerSetThumbWithBody request with any body
	PostSetStickerSetThumbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSetWebhookWithBody request with any body
	PostSetWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStopMessageLiveLocationWithBody request with any body
	PostStopMessageLiveLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStopMessageLiveLocation(ctx context.Context, body PostStopMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStopMessageLiveLocationWithFormdataBody(ctx context.Context, body PostStopMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStopPollWithBody request with any body
	PostStopPollWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStopPoll(ctx context.Context, body PostStopPollJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStopPollWithFormdataBody(ctx context.Context, body PostStopPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnbanChatMemberWithBody request with any body
	PostUnbanChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnbanChatMember(ctx context.Context, body PostUnbanChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnbanChatMemberWithFormdataBody(ctx context.Context, body PostUnbanChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnpinAllChatMessagesWithBody request with any body
	PostUnpinAllChatMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnpinAllChatMessages(ctx context.Context, body PostUnpinAllChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnpinAllChatMessagesWithFormdataBody(ctx context.Context, body PostUnpinAllChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnpinChatMessageWithBody request with any body
	PostUnpinChatMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnpinChatMessage(ctx context.Context, body PostUnpinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnpinChatMessageWithFormdataBody(ctx context.Context, body PostUnpinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadStickerFileWithBody request with any body
	PostUploadStickerFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserLoginWithBody request with any body
	PostUserLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserLogin(ctx context.Context, body PostUserLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserLoginWithFormdataBody(ctx context.Context, body PostUserLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAddChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddChatMember(ctx context.Context, body PostAddChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddChatMemberWithFormdataBody(ctx context.Context, body PostAddChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddProxyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddProxy(ctx context.Context, body PostAddProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddProxyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddProxyWithFormdataBody(ctx context.Context, body PostAddProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddProxyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddStickerToSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddStickerToSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerCallbackQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerCallbackQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerCallbackQuery(ctx context.Context, body PostAnswerCallbackQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerCallbackQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerCallbackQueryWithFormdataBody(ctx context.Context, body PostAnswerCallbackQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerCallbackQueryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerInlineQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerInlineQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerInlineQuery(ctx context.Context, body PostAnswerInlineQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerInlineQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerInlineQueryWithFormdataBody(ctx context.Context, body PostAnswerInlineQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerInlineQueryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerPreCheckoutQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerPreCheckoutQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerPreCheckoutQuery(ctx context.Context, body PostAnswerPreCheckoutQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerPreCheckoutQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerPreCheckoutQueryWithFormdataBody(ctx context.Context, body PostAnswerPreCheckoutQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerPreCheckoutQueryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerShippingQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerShippingQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerShippingQuery(ctx context.Context, body PostAnswerShippingQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerShippingQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnswerShippingQueryWithFormdataBody(ctx context.Context, body PostAnswerShippingQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnswerShippingQueryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCode(ctx context.Context, body PostAuthCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCodeWithFormdataBody(ctx context.Context, body PostAuthCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCodeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPassword(ctx context.Context, body PostAuthPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPasswordWithFormdataBody(ctx context.Context, body PostAuthPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPasswordRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClose(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCloseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCopyMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCopyMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCopyMessage(ctx context.Context, body PostCopyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCopyMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCopyMessageWithFormdataBody(ctx context.Context, body PostCopyMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCopyMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateChat(ctx context.Context, body PostCreateChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateChatWithFormdataBody(ctx context.Context, body PostCreateChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateChatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateNewStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateNewStickerSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatHistory(ctx context.Context, body PostDeleteChatHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatHistoryWithFormdataBody(ctx context.Context, body PostDeleteChatHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatHistoryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatPhotoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatPhoto(ctx context.Context, body PostDeleteChatPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatPhotoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatPhotoWithFormdataBody(ctx context.Context, body PostDeleteChatPhotoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatPhotoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatStickerSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatStickerSet(ctx context.Context, body PostDeleteChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatStickerSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteChatStickerSetWithFormdataBody(ctx context.Context, body PostDeleteChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteChatStickerSetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessage(ctx context.Context, body PostDeleteMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessageWithFormdataBody(ctx context.Context, body PostDeleteMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessages(ctx context.Context, body PostDeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteMessagesWithFormdataBody(ctx context.Context, body PostDeleteMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteMessagesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteProxyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteProxy(ctx context.Context, body PostDeleteProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteProxyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteProxyWithFormdataBody(ctx context.Context, body PostDeleteProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteProxyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteStickerFromSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteStickerFromSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteStickerFromSet(ctx context.Context, body PostDeleteStickerFromSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteStickerFromSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteStickerFromSetWithFormdataBody(ctx context.Context, body PostDeleteStickerFromSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteStickerFromSetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteWebhook(ctx context.Context, body PostDeleteWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeleteWebhookWithFormdataBody(ctx context.Context, body PostDeleteWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeleteWebhookRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisableProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisableProxyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisableProxy(ctx context.Context, body PostDisableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisableProxyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisableProxyWithFormdataBody(ctx context.Context, body PostDisableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisableProxyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageCaptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageCaptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageCaption(ctx context.Context, body PostEditMessageCaptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageCaptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageCaptionWithFormdataBody(ctx context.Context, body PostEditMessageCaptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageCaptionRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageLiveLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageLiveLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageLiveLocation(ctx context.Context, body PostEditMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageLiveLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageLiveLocationWithFormdataBody(ctx context.Context, body PostEditMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageLiveLocationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageReplyMarkupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageReplyMarkupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageReplyMarkup(ctx context.Context, body PostEditMessageReplyMarkupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageReplyMarkupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageReplyMarkupWithFormdataBody(ctx context.Context, body PostEditMessageReplyMarkupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageReplyMarkupRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageSchedulingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageSchedulingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageScheduling(ctx context.Context, body PostEditMessageSchedulingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageSchedulingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageSchedulingWithFormdataBody(ctx context.Context, body PostEditMessageSchedulingFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageSchedulingRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageTextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageText(ctx context.Context, body PostEditMessageTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageTextRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEditMessageTextWithFormdataBody(ctx context.Context, body PostEditMessageTextFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEditMessageTextRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnableProxyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnableProxyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnableProxy(ctx context.Context, body PostEnableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnableProxyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnableProxyWithFormdataBody(ctx context.Context, body PostEnableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnableProxyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExportChatInviteLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExportChatInviteLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExportChatInviteLink(ctx context.Context, body PostExportChatInviteLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExportChatInviteLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExportChatInviteLinkWithFormdataBody(ctx context.Context, body PostExportChatInviteLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExportChatInviteLinkRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostForwardMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostForwardMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostForwardMessage(ctx context.Context, body PostForwardMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostForwardMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostForwardMessageWithFormdataBody(ctx context.Context, body PostForwardMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostForwardMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCallbackQueryAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCallbackQueryAnswerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCallbackQueryAnswer(ctx context.Context, body PostGetCallbackQueryAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCallbackQueryAnswerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCallbackQueryAnswerWithFormdataBody(ctx context.Context, body PostGetCallbackQueryAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCallbackQueryAnswerRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChat(ctx context.Context, body PostGetChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatWithFormdataBody(ctx context.Context, body PostGetChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatAdministratorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatAdministratorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatAdministrators(ctx context.Context, body PostGetChatAdministratorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatAdministratorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatAdministratorsWithFormdataBody(ctx context.Context, body PostGetChatAdministratorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatAdministratorsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMember(ctx context.Context, body PostGetChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMemberWithFormdataBody(ctx context.Context, body PostGetChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembers(ctx context.Context, body PostGetChatMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembersWithFormdataBody(ctx context.Context, body PostGetChatMembersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembersCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembersCount(ctx context.Context, body PostGetChatMembersCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersCountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatMembersCountWithFormdataBody(ctx context.Context, body PostGetChatMembersCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatMembersCountRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChats(ctx context.Context, body PostGetChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetChatsWithFormdataBody(ctx context.Context, body PostGetChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetChatsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCommonChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCommonChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCommonChats(ctx context.Context, body PostGetCommonChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCommonChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetCommonChatsWithFormdataBody(ctx context.Context, body PostGetCommonChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetCommonChatsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetFile(ctx context.Context, body PostGetFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetFileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetFileWithFormdataBody(ctx context.Context, body PostGetFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetFileRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetGameHighScoresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetGameHighScoresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetGameHighScores(ctx context.Context, body PostGetGameHighScoresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetGameHighScoresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetGameHighScoresWithFormdataBody(ctx context.Context, body PostGetGameHighScoresFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetGameHighScoresRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetInactiveChats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetInactiveChatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMemoryStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMemoryStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMessageInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMessageInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMessageInfo(ctx context.Context, body PostGetMessageInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMessageInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMessageInfoWithFormdataBody(ctx context.Context, body PostGetMessageInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMessageInfoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetMyCommands(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetMyCommandsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetNearbyChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetNearbyChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetNearbyChats(ctx context.Context, body PostGetNearbyChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetNearbyChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetNearbyChatsWithFormdataBody(ctx context.Context, body PostGetNearbyChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetNearbyChatsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetProxies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetProxiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetScheduledMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetScheduledMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetScheduledMessages(ctx context.Context, body PostGetScheduledMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetScheduledMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetScheduledMessagesWithFormdataBody(ctx context.Context, body PostGetScheduledMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetScheduledMessagesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetStickerSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetStickerSet(ctx context.Context, body PostGetStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetStickerSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetStickerSetWithFormdataBody(ctx context.Context, body PostGetStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetStickerSetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUpdatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUpdatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUpdates(ctx context.Context, body PostGetUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUpdatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUpdatesWithFormdataBody(ctx context.Context, body PostGetUpdatesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUpdatesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUserProfilePhotosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUserProfilePhotosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUserProfilePhotos(ctx context.Context, body PostGetUserProfilePhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUserProfilePhotosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetUserProfilePhotosWithFormdataBody(ctx context.Context, body PostGetUserProfilePhotosFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetUserProfilePhotosRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetWebhookInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetWebhookInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJoinChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJoinChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJoinChat(ctx context.Context, body PostJoinChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJoinChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJoinChatWithFormdataBody(ctx context.Context, body PostJoinChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJoinChatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKickChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKickChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKickChatMember(ctx context.Context, body PostKickChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKickChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostKickChatMemberWithFormdataBody(ctx context.Context, body PostKickChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostKickChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLeaveChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLeaveChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLeaveChat(ctx context.Context, body PostLeaveChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLeaveChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLeaveChatWithFormdataBody(ctx context.Context, body PostLeaveChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLeaveChatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogOut(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogOutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOptimizeMemory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOptimizeMemoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinChatMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinChatMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinChatMessage(ctx context.Context, body PostPinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinChatMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinChatMessageWithFormdataBody(ctx context.Context, body PostPinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinChatMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromoteChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromoteChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromoteChatMember(ctx context.Context, body PostPromoteChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromoteChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPromoteChatMemberWithFormdataBody(ctx context.Context, body PostPromoteChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPromoteChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterUser(ctx context.Context, body PostRegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterUserWithFormdataBody(ctx context.Context, body PostRegisterUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterUserRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportChat(ctx context.Context, body PostReportChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReportChatWithFormdataBody(ctx context.Context, body PostReportChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReportChatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestrictChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestrictChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestrictChatMember(ctx context.Context, body PostRestrictChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestrictChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestrictChatMemberWithFormdataBody(ctx context.Context, body PostRestrictChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestrictChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchChatMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchChatMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchChatMessages(ctx context.Context, body PostSearchChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchChatMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchChatMessagesWithFormdataBody(ctx context.Context, body PostSearchChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchChatMessagesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchMessages(ctx context.Context, body PostSearchMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchMessagesWithFormdataBody(ctx context.Context, body PostSearchMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchMessagesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchPublicChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchPublicChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchPublicChats(ctx context.Context, body PostSearchPublicChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchPublicChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchPublicChatsWithFormdataBody(ctx context.Context, body PostSearchPublicChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchPublicChatsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendAnimationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendAnimationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendAudioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendAudioRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendChatActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendChatActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendChatAction(ctx context.Context, body PostSendChatActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendChatActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendChatActionWithFormdataBody(ctx context.Context, body PostSendChatActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendChatActionRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendContact(ctx context.Context, body PostSendContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendContactWithFormdataBody(ctx context.Context, body PostSendContactFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendContactRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendDiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendDiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendDice(ctx context.Context, body PostSendDiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendDiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendDiceWithFormdataBody(ctx context.Context, body PostSendDiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendDiceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendGameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendGame(ctx context.Context, body PostSendGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendGameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendGameWithFormdataBody(ctx context.Context, body PostSendGameFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendGameRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendInvoice(ctx context.Context, body PostSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendInvoiceWithFormdataBody(ctx context.Context, body PostSendInvoiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendInvoiceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendLocation(ctx context.Context, body PostSendLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendLocationWithFormdataBody(ctx context.Context, body PostSendLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendLocationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMediaGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMediaGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMessage(ctx context.Context, body PostSendMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMessageWithFormdataBody(ctx context.Context, body PostSendMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendPhotoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendPollWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendPollRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendPoll(ctx context.Context, body PostSendPollJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendPollRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendPollWithFormdataBody(ctx context.Context, body PostSendPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendPollRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendStickerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendStickerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVenueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVenueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVenue(ctx context.Context, body PostSendVenueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVenueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVenueWithFormdataBody(ctx context.Context, body PostSendVenueFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVenueRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVideoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVideoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVideoNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVideoNoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendVoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendVoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatAdministratorCustomTitleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatAdministratorCustomTitleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatAdministratorCustomTitle(ctx context.Context, body PostSetChatAdministratorCustomTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatAdministratorCustomTitleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatAdministratorCustomTitleWithFormdataBody(ctx context.Context, body PostSetChatAdministratorCustomTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatAdministratorCustomTitleRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatDescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatDescriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatDescription(ctx context.Context, body PostSetChatDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatDescriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatDescriptionWithFormdataBody(ctx context.Context, body PostSetChatDescriptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatDescriptionRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatPermissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatPermissions(ctx context.Context, body PostSetChatPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatPermissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatPermissionsWithFormdataBody(ctx context.Context, body PostSetChatPermissionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatPermissionsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatPhotoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatStickerSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatStickerSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatStickerSet(ctx context.Context, body PostSetChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatStickerSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatStickerSetWithFormdataBody(ctx context.Context, body PostSetChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatStickerSetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatTitleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatTitleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatTitle(ctx context.Context, body PostSetChatTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatTitleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetChatTitleWithFormdataBody(ctx context.Context, body PostSetChatTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetChatTitleRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetGameScoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetGameScoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetGameScore(ctx context.Context, body PostSetGameScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetGameScoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetGameScoreWithFormdataBody(ctx context.Context, body PostSetGameScoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetGameScoreRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetMyCommandsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetMyCommandsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetMyCommands(ctx context.Context, body PostSetMyCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetMyCommandsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetMyCommandsWithFormdataBody(ctx context.Context, body PostSetMyCommandsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetMyCommandsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPassportDataErrorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPassportDataErrorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPassportDataErrors(ctx context.Context, body PostSetPassportDataErrorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPassportDataErrorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPassportDataErrorsWithFormdataBody(ctx context.Context, body PostSetPassportDataErrorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPassportDataErrorsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPollAnswerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPollAnswerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPollAnswer(ctx context.Context, body PostSetPollAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPollAnswerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetPollAnswerWithFormdataBody(ctx context.Context, body PostSetPollAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetPollAnswerRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetStickerPositionInSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetStickerPositionInSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetStickerPositionInSet(ctx context.Context, body PostSetStickerPositionInSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetStickerPositionInSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetStickerPositionInSetWithFormdataBody(ctx context.Context, body PostSetStickerPositionInSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetStickerPositionInSetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetStickerSetThumbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetStickerSetThumbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSetWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSetWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopMessageLiveLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopMessageLiveLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopMessageLiveLocation(ctx context.Context, body PostStopMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopMessageLiveLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopMessageLiveLocationWithFormdataBody(ctx context.Context, body PostStopMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopMessageLiveLocationRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopPollWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopPollRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopPoll(ctx context.Context, body PostStopPollJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopPollRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStopPollWithFormdataBody(ctx context.Context, body PostStopPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStopPollRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnbanChatMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnbanChatMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnbanChatMember(ctx context.Context, body PostUnbanChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnbanChatMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnbanChatMemberWithFormdataBody(ctx context.Context, body PostUnbanChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnbanChatMemberRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinAllChatMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinAllChatMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinAllChatMessages(ctx context.Context, body PostUnpinAllChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinAllChatMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinAllChatMessagesWithFormdataBody(ctx context.Context, body PostUnpinAllChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinAllChatMessagesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinChatMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinChatMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinChatMessage(ctx context.Context, body PostUnpinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinChatMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnpinChatMessageWithFormdataBody(ctx context.Context, body PostUnpinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnpinChatMessageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadStickerFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadStickerFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserLogin(ctx context.Context, body PostUserLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserLoginWithFormdataBody(ctx context.Context, body PostUserLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserLoginRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAddChatMemberRequest calls the generic PostAddChatMember builder with application/json body
func NewPostAddChatMemberRequest(server string, body PostAddChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAddChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAddChatMemberRequestWithFormdataBody calls the generic PostAddChatMember builder with application/x-www-form-urlencoded body
func NewPostAddChatMemberRequestWithFormdataBody(server string, body PostAddChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAddChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAddChatMemberRequestWithBody generates requests for PostAddChatMember with any type of body
func NewPostAddChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAddProxyRequest calls the generic PostAddProxy builder with application/json body
func NewPostAddProxyRequest(server string, body PostAddProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAddProxyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAddProxyRequestWithFormdataBody calls the generic PostAddProxy builder with application/x-www-form-urlencoded body
func NewPostAddProxyRequestWithFormdataBody(server string, body PostAddProxyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAddProxyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAddProxyRequestWithBody generates requests for PostAddProxy with any type of body
func NewPostAddProxyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAddStickerToSetRequestWithBody generates requests for PostAddStickerToSet with any type of body
func NewPostAddStickerToSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addStickerToSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAnswerCallbackQueryRequest calls the generic PostAnswerCallbackQuery builder with application/json body
func NewPostAnswerCallbackQueryRequest(server string, body PostAnswerCallbackQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnswerCallbackQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnswerCallbackQueryRequestWithFormdataBody calls the generic PostAnswerCallbackQuery builder with application/x-www-form-urlencoded body
func NewPostAnswerCallbackQueryRequestWithFormdataBody(server string, body PostAnswerCallbackQueryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAnswerCallbackQueryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAnswerCallbackQueryRequestWithBody generates requests for PostAnswerCallbackQuery with any type of body
func NewPostAnswerCallbackQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answerCallbackQuery")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAnswerInlineQueryRequest calls the generic PostAnswerInlineQuery builder with application/json body
func NewPostAnswerInlineQueryRequest(server string, body PostAnswerInlineQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnswerInlineQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnswerInlineQueryRequestWithFormdataBody calls the generic PostAnswerInlineQuery builder with application/x-www-form-urlencoded body
func NewPostAnswerInlineQueryRequestWithFormdataBody(server string, body PostAnswerInlineQueryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAnswerInlineQueryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAnswerInlineQueryRequestWithBody generates requests for PostAnswerInlineQuery with any type of body
func NewPostAnswerInlineQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answerInlineQuery")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAnswerPreCheckoutQueryRequest calls the generic PostAnswerPreCheckoutQuery builder with application/json body
func NewPostAnswerPreCheckoutQueryRequest(server string, body PostAnswerPreCheckoutQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnswerPreCheckoutQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnswerPreCheckoutQueryRequestWithFormdataBody calls the generic PostAnswerPreCheckoutQuery builder with application/x-www-form-urlencoded body
func NewPostAnswerPreCheckoutQueryRequestWithFormdataBody(server string, body PostAnswerPreCheckoutQueryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAnswerPreCheckoutQueryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAnswerPreCheckoutQueryRequestWithBody generates requests for PostAnswerPreCheckoutQuery with any type of body
func NewPostAnswerPreCheckoutQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answerPreCheckoutQuery")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAnswerShippingQueryRequest calls the generic PostAnswerShippingQuery builder with application/json body
func NewPostAnswerShippingQueryRequest(server string, body PostAnswerShippingQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnswerShippingQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnswerShippingQueryRequestWithFormdataBody calls the generic PostAnswerShippingQuery builder with application/x-www-form-urlencoded body
func NewPostAnswerShippingQueryRequestWithFormdataBody(server string, body PostAnswerShippingQueryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAnswerShippingQueryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAnswerShippingQueryRequestWithBody generates requests for PostAnswerShippingQuery with any type of body
func NewPostAnswerShippingQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/answerShippingQuery")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthCodeRequest calls the generic PostAuthCode builder with application/json body
func NewPostAuthCodeRequest(server string, body PostAuthCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthCodeRequestWithFormdataBody calls the generic PostAuthCode builder with application/x-www-form-urlencoded body
func NewPostAuthCodeRequestWithFormdataBody(server string, body PostAuthCodeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthCodeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthCodeRequestWithBody generates requests for PostAuthCode with any type of body
func NewPostAuthCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authCode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthPasswordRequest calls the generic PostAuthPassword builder with application/json body
func NewPostAuthPasswordRequest(server string, body PostAuthPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthPasswordRequestWithFormdataBody calls the generic PostAuthPassword builder with application/x-www-form-urlencoded body
func NewPostAuthPasswordRequestWithFormdataBody(server string, body PostAuthPasswordFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthPasswordRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthPasswordRequestWithBody generates requests for PostAuthPassword with any type of body
func NewPostAuthPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authPassword")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCloseRequest generates requests for PostClose
func NewPostCloseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCopyMessageRequest calls the generic PostCopyMessage builder with application/json body
func NewPostCopyMessageRequest(server string, body PostCopyMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCopyMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCopyMessageRequestWithFormdataBody calls the generic PostCopyMessage builder with application/x-www-form-urlencoded body
func NewPostCopyMessageRequestWithFormdataBody(server string, body PostCopyMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostCopyMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostCopyMessageRequestWithBody generates requests for PostCopyMessage with any type of body
func NewPostCopyMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/copyMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCreateChatRequest calls the generic PostCreateChat builder with application/json body
func NewPostCreateChatRequest(server string, body PostCreateChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreateChatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCreateChatRequestWithFormdataBody calls the generic PostCreateChat builder with application/x-www-form-urlencoded body
func NewPostCreateChatRequestWithFormdataBody(server string, body PostCreateChatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostCreateChatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostCreateChatRequestWithBody generates requests for PostCreateChat with any type of body
func NewPostCreateChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/createChat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCreateNewStickerSetRequestWithBody generates requests for PostCreateNewStickerSet with any type of body
func NewPostCreateNewStickerSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/createNewStickerSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteChatHistoryRequest calls the generic PostDeleteChatHistory builder with application/json body
func NewPostDeleteChatHistoryRequest(server string, body PostDeleteChatHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteChatHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteChatHistoryRequestWithFormdataBody calls the generic PostDeleteChatHistory builder with application/x-www-form-urlencoded body
func NewPostDeleteChatHistoryRequestWithFormdataBody(server string, body PostDeleteChatHistoryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteChatHistoryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteChatHistoryRequestWithBody generates requests for PostDeleteChatHistory with any type of body
func NewPostDeleteChatHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteChatHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteChatPhotoRequest calls the generic PostDeleteChatPhoto builder with application/json body
func NewPostDeleteChatPhotoRequest(server string, body PostDeleteChatPhotoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteChatPhotoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteChatPhotoRequestWithFormdataBody calls the generic PostDeleteChatPhoto builder with application/x-www-form-urlencoded body
func NewPostDeleteChatPhotoRequestWithFormdataBody(server string, body PostDeleteChatPhotoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteChatPhotoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteChatPhotoRequestWithBody generates requests for PostDeleteChatPhoto with any type of body
func NewPostDeleteChatPhotoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteChatPhoto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteChatStickerSetRequest calls the generic PostDeleteChatStickerSet builder with application/json body
func NewPostDeleteChatStickerSetRequest(server string, body PostDeleteChatStickerSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteChatStickerSetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteChatStickerSetRequestWithFormdataBody calls the generic PostDeleteChatStickerSet builder with application/x-www-form-urlencoded body
func NewPostDeleteChatStickerSetRequestWithFormdataBody(server string, body PostDeleteChatStickerSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteChatStickerSetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteChatStickerSetRequestWithBody generates requests for PostDeleteChatStickerSet with any type of body
func NewPostDeleteChatStickerSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteChatStickerSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteMessageRequest calls the generic PostDeleteMessage builder with application/json body
func NewPostDeleteMessageRequest(server string, body PostDeleteMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteMessageRequestWithFormdataBody calls the generic PostDeleteMessage builder with application/x-www-form-urlencoded body
func NewPostDeleteMessageRequestWithFormdataBody(server string, body PostDeleteMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteMessageRequestWithBody generates requests for PostDeleteMessage with any type of body
func NewPostDeleteMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteMessagesRequest calls the generic PostDeleteMessages builder with application/json body
func NewPostDeleteMessagesRequest(server string, body PostDeleteMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteMessagesRequestWithFormdataBody calls the generic PostDeleteMessages builder with application/x-www-form-urlencoded body
func NewPostDeleteMessagesRequestWithFormdataBody(server string, body PostDeleteMessagesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteMessagesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteMessagesRequestWithBody generates requests for PostDeleteMessages with any type of body
func NewPostDeleteMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteMessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteProxyRequest calls the generic PostDeleteProxy builder with application/json body
func NewPostDeleteProxyRequest(server string, body PostDeleteProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteProxyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteProxyRequestWithFormdataBody calls the generic PostDeleteProxy builder with application/x-www-form-urlencoded body
func NewPostDeleteProxyRequestWithFormdataBody(server string, body PostDeleteProxyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteProxyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteProxyRequestWithBody generates requests for PostDeleteProxy with any type of body
func NewPostDeleteProxyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteStickerFromSetRequest calls the generic PostDeleteStickerFromSet builder with application/json body
func NewPostDeleteStickerFromSetRequest(server string, body PostDeleteStickerFromSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteStickerFromSetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteStickerFromSetRequestWithFormdataBody calls the generic PostDeleteStickerFromSet builder with application/x-www-form-urlencoded body
func NewPostDeleteStickerFromSetRequestWithFormdataBody(server string, body PostDeleteStickerFromSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteStickerFromSetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteStickerFromSetRequestWithBody generates requests for PostDeleteStickerFromSet with any type of body
func NewPostDeleteStickerFromSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteStickerFromSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeleteWebhookRequest calls the generic PostDeleteWebhook builder with application/json body
func NewPostDeleteWebhookRequest(server string, body PostDeleteWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeleteWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeleteWebhookRequestWithFormdataBody calls the generic PostDeleteWebhook builder with application/x-www-form-urlencoded body
func NewPostDeleteWebhookRequestWithFormdataBody(server string, body PostDeleteWebhookFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDeleteWebhookRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDeleteWebhookRequestWithBody generates requests for PostDeleteWebhook with any type of body
func NewPostDeleteWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteWebhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDisableProxyRequest calls the generic PostDisableProxy builder with application/json body
func NewPostDisableProxyRequest(server string, body PostDisableProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDisableProxyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDisableProxyRequestWithFormdataBody calls the generic PostDisableProxy builder with application/x-www-form-urlencoded body
func NewPostDisableProxyRequestWithFormdataBody(server string, body PostDisableProxyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDisableProxyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDisableProxyRequestWithBody generates requests for PostDisableProxy with any type of body
func NewPostDisableProxyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disableProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageCaptionRequest calls the generic PostEditMessageCaption builder with application/json body
func NewPostEditMessageCaptionRequest(server string, body PostEditMessageCaptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEditMessageCaptionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEditMessageCaptionRequestWithFormdataBody calls the generic PostEditMessageCaption builder with application/x-www-form-urlencoded body
func NewPostEditMessageCaptionRequestWithFormdataBody(server string, body PostEditMessageCaptionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEditMessageCaptionRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEditMessageCaptionRequestWithBody generates requests for PostEditMessageCaption with any type of body
func NewPostEditMessageCaptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageCaption")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageLiveLocationRequest calls the generic PostEditMessageLiveLocation builder with application/json body
func NewPostEditMessageLiveLocationRequest(server string, body PostEditMessageLiveLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEditMessageLiveLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEditMessageLiveLocationRequestWithFormdataBody calls the generic PostEditMessageLiveLocation builder with application/x-www-form-urlencoded body
func NewPostEditMessageLiveLocationRequestWithFormdataBody(server string, body PostEditMessageLiveLocationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEditMessageLiveLocationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEditMessageLiveLocationRequestWithBody generates requests for PostEditMessageLiveLocation with any type of body
func NewPostEditMessageLiveLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageLiveLocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageMediaRequestWithBody generates requests for PostEditMessageMedia with any type of body
func NewPostEditMessageMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageMedia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageReplyMarkupRequest calls the generic PostEditMessageReplyMarkup builder with application/json body
func NewPostEditMessageReplyMarkupRequest(server string, body PostEditMessageReplyMarkupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEditMessageReplyMarkupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEditMessageReplyMarkupRequestWithFormdataBody calls the generic PostEditMessageReplyMarkup builder with application/x-www-form-urlencoded body
func NewPostEditMessageReplyMarkupRequestWithFormdataBody(server string, body PostEditMessageReplyMarkupFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEditMessageReplyMarkupRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEditMessageReplyMarkupRequestWithBody generates requests for PostEditMessageReplyMarkup with any type of body
func NewPostEditMessageReplyMarkupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageReplyMarkup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageSchedulingRequest calls the generic PostEditMessageScheduling builder with application/json body
func NewPostEditMessageSchedulingRequest(server string, body PostEditMessageSchedulingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEditMessageSchedulingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEditMessageSchedulingRequestWithFormdataBody calls the generic PostEditMessageScheduling builder with application/x-www-form-urlencoded body
func NewPostEditMessageSchedulingRequestWithFormdataBody(server string, body PostEditMessageSchedulingFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEditMessageSchedulingRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEditMessageSchedulingRequestWithBody generates requests for PostEditMessageScheduling with any type of body
func NewPostEditMessageSchedulingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageScheduling")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEditMessageTextRequest calls the generic PostEditMessageText builder with application/json body
func NewPostEditMessageTextRequest(server string, body PostEditMessageTextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEditMessageTextRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEditMessageTextRequestWithFormdataBody calls the generic PostEditMessageText builder with application/x-www-form-urlencoded body
func NewPostEditMessageTextRequestWithFormdataBody(server string, body PostEditMessageTextFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEditMessageTextRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEditMessageTextRequestWithBody generates requests for PostEditMessageText with any type of body
func NewPostEditMessageTextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/editMessageText")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEnableProxyRequest calls the generic PostEnableProxy builder with application/json body
func NewPostEnableProxyRequest(server string, body PostEnableProxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnableProxyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnableProxyRequestWithFormdataBody calls the generic PostEnableProxy builder with application/x-www-form-urlencoded body
func NewPostEnableProxyRequestWithFormdataBody(server string, body PostEnableProxyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostEnableProxyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostEnableProxyRequestWithBody generates requests for PostEnableProxy with any type of body
func NewPostEnableProxyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enableProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostExportChatInviteLinkRequest calls the generic PostExportChatInviteLink builder with application/json body
func NewPostExportChatInviteLinkRequest(server string, body PostExportChatInviteLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExportChatInviteLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExportChatInviteLinkRequestWithFormdataBody calls the generic PostExportChatInviteLink builder with application/x-www-form-urlencoded body
func NewPostExportChatInviteLinkRequestWithFormdataBody(server string, body PostExportChatInviteLinkFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostExportChatInviteLinkRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostExportChatInviteLinkRequestWithBody generates requests for PostExportChatInviteLink with any type of body
func NewPostExportChatInviteLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exportChatInviteLink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostForwardMessageRequest calls the generic PostForwardMessage builder with application/json body
func NewPostForwardMessageRequest(server string, body PostForwardMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostForwardMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostForwardMessageRequestWithFormdataBody calls the generic PostForwardMessage builder with application/x-www-form-urlencoded body
func NewPostForwardMessageRequestWithFormdataBody(server string, body PostForwardMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostForwardMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostForwardMessageRequestWithBody generates requests for PostForwardMessage with any type of body
func NewPostForwardMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/forwardMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetCallbackQueryAnswerRequest calls the generic PostGetCallbackQueryAnswer builder with application/json body
func NewPostGetCallbackQueryAnswerRequest(server string, body PostGetCallbackQueryAnswerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetCallbackQueryAnswerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetCallbackQueryAnswerRequestWithFormdataBody calls the generic PostGetCallbackQueryAnswer builder with application/x-www-form-urlencoded body
func NewPostGetCallbackQueryAnswerRequestWithFormdataBody(server string, body PostGetCallbackQueryAnswerFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetCallbackQueryAnswerRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetCallbackQueryAnswerRequestWithBody generates requests for PostGetCallbackQueryAnswer with any type of body
func NewPostGetCallbackQueryAnswerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getCallbackQueryAnswer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatRequest calls the generic PostGetChat builder with application/json body
func NewPostGetChatRequest(server string, body PostGetChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatRequestWithFormdataBody calls the generic PostGetChat builder with application/x-www-form-urlencoded body
func NewPostGetChatRequestWithFormdataBody(server string, body PostGetChatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatRequestWithBody generates requests for PostGetChat with any type of body
func NewPostGetChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatAdministratorsRequest calls the generic PostGetChatAdministrators builder with application/json body
func NewPostGetChatAdministratorsRequest(server string, body PostGetChatAdministratorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatAdministratorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatAdministratorsRequestWithFormdataBody calls the generic PostGetChatAdministrators builder with application/x-www-form-urlencoded body
func NewPostGetChatAdministratorsRequestWithFormdataBody(server string, body PostGetChatAdministratorsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatAdministratorsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatAdministratorsRequestWithBody generates requests for PostGetChatAdministrators with any type of body
func NewPostGetChatAdministratorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChatAdministrators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatMemberRequest calls the generic PostGetChatMember builder with application/json body
func NewPostGetChatMemberRequest(server string, body PostGetChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatMemberRequestWithFormdataBody calls the generic PostGetChatMember builder with application/x-www-form-urlencoded body
func NewPostGetChatMemberRequestWithFormdataBody(server string, body PostGetChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatMemberRequestWithBody generates requests for PostGetChatMember with any type of body
func NewPostGetChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatMembersRequest calls the generic PostGetChatMembers builder with application/json body
func NewPostGetChatMembersRequest(server string, body PostGetChatMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatMembersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatMembersRequestWithFormdataBody calls the generic PostGetChatMembers builder with application/x-www-form-urlencoded body
func NewPostGetChatMembersRequestWithFormdataBody(server string, body PostGetChatMembersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatMembersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatMembersRequestWithBody generates requests for PostGetChatMembers with any type of body
func NewPostGetChatMembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChatMembers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatMembersCountRequest calls the generic PostGetChatMembersCount builder with application/json body
func NewPostGetChatMembersCountRequest(server string, body PostGetChatMembersCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatMembersCountRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatMembersCountRequestWithFormdataBody calls the generic PostGetChatMembersCount builder with application/x-www-form-urlencoded body
func NewPostGetChatMembersCountRequestWithFormdataBody(server string, body PostGetChatMembersCountFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatMembersCountRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatMembersCountRequestWithBody generates requests for PostGetChatMembersCount with any type of body
func NewPostGetChatMembersCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChatMembersCount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetChatsRequest calls the generic PostGetChats builder with application/json body
func NewPostGetChatsRequest(server string, body PostGetChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetChatsRequestWithFormdataBody calls the generic PostGetChats builder with application/x-www-form-urlencoded body
func NewPostGetChatsRequestWithFormdataBody(server string, body PostGetChatsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetChatsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetChatsRequestWithBody generates requests for PostGetChats with any type of body
func NewPostGetChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getChats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetCommonChatsRequest calls the generic PostGetCommonChats builder with application/json body
func NewPostGetCommonChatsRequest(server string, body PostGetCommonChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetCommonChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetCommonChatsRequestWithFormdataBody calls the generic PostGetCommonChats builder with application/x-www-form-urlencoded body
func NewPostGetCommonChatsRequestWithFormdataBody(server string, body PostGetCommonChatsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetCommonChatsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetCommonChatsRequestWithBody generates requests for PostGetCommonChats with any type of body
func NewPostGetCommonChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getCommonChats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetFileRequest calls the generic PostGetFile builder with application/json body
func NewPostGetFileRequest(server string, body PostGetFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetFileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetFileRequestWithFormdataBody calls the generic PostGetFile builder with application/x-www-form-urlencoded body
func NewPostGetFileRequestWithFormdataBody(server string, body PostGetFileFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetFileRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetFileRequestWithBody generates requests for PostGetFile with any type of body
func NewPostGetFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getFile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetGameHighScoresRequest calls the generic PostGetGameHighScores builder with application/json body
func NewPostGetGameHighScoresRequest(server string, body PostGetGameHighScoresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetGameHighScoresRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetGameHighScoresRequestWithFormdataBody calls the generic PostGetGameHighScores builder with application/x-www-form-urlencoded body
func NewPostGetGameHighScoresRequestWithFormdataBody(server string, body PostGetGameHighScoresFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetGameHighScoresRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetGameHighScoresRequestWithBody generates requests for PostGetGameHighScores with any type of body
func NewPostGetGameHighScoresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getGameHighScores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetInactiveChatsRequest generates requests for PostGetInactiveChats
func NewPostGetInactiveChatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getInactiveChats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGetMeRequest generates requests for PostGetMe
func NewPostGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getMe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGetMemoryStatsRequest generates requests for PostGetMemoryStats
func NewPostGetMemoryStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getMemoryStats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGetMessageInfoRequest calls the generic PostGetMessageInfo builder with application/json body
func NewPostGetMessageInfoRequest(server string, body PostGetMessageInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetMessageInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetMessageInfoRequestWithFormdataBody calls the generic PostGetMessageInfo builder with application/x-www-form-urlencoded body
func NewPostGetMessageInfoRequestWithFormdataBody(server string, body PostGetMessageInfoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetMessageInfoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetMessageInfoRequestWithBody generates requests for PostGetMessageInfo with any type of body
func NewPostGetMessageInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getMessageInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetMyCommandsRequest generates requests for PostGetMyCommands
func NewPostGetMyCommandsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getMyCommands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGetNearbyChatsRequest calls the generic PostGetNearbyChats builder with application/json body
func NewPostGetNearbyChatsRequest(server string, body PostGetNearbyChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetNearbyChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetNearbyChatsRequestWithFormdataBody calls the generic PostGetNearbyChats builder with application/x-www-form-urlencoded body
func NewPostGetNearbyChatsRequestWithFormdataBody(server string, body PostGetNearbyChatsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetNearbyChatsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetNearbyChatsRequestWithBody generates requests for PostGetNearbyChats with any type of body
func NewPostGetNearbyChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getNearbyChats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetProxiesRequest generates requests for PostGetProxies
func NewPostGetProxiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getProxies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGetScheduledMessagesRequest calls the generic PostGetScheduledMessages builder with application/json body
func NewPostGetScheduledMessagesRequest(server string, body PostGetScheduledMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetScheduledMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetScheduledMessagesRequestWithFormdataBody calls the generic PostGetScheduledMessages builder with application/x-www-form-urlencoded body
func NewPostGetScheduledMessagesRequestWithFormdataBody(server string, body PostGetScheduledMessagesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetScheduledMessagesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetScheduledMessagesRequestWithBody generates requests for PostGetScheduledMessages with any type of body
func NewPostGetScheduledMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getScheduledMessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetStickerSetRequest calls the generic PostGetStickerSet builder with application/json body
func NewPostGetStickerSetRequest(server string, body PostGetStickerSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetStickerSetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetStickerSetRequestWithFormdataBody calls the generic PostGetStickerSet builder with application/x-www-form-urlencoded body
func NewPostGetStickerSetRequestWithFormdataBody(server string, body PostGetStickerSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetStickerSetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetStickerSetRequestWithBody generates requests for PostGetStickerSet with any type of body
func NewPostGetStickerSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getStickerSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetUpdatesRequest calls the generic PostGetUpdates builder with application/json body
func NewPostGetUpdatesRequest(server string, body PostGetUpdatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetUpdatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetUpdatesRequestWithFormdataBody calls the generic PostGetUpdates builder with application/x-www-form-urlencoded body
func NewPostGetUpdatesRequestWithFormdataBody(server string, body PostGetUpdatesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetUpdatesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetUpdatesRequestWithBody generates requests for PostGetUpdates with any type of body
func NewPostGetUpdatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getUpdates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetUserProfilePhotosRequest calls the generic PostGetUserProfilePhotos builder with application/json body
func NewPostGetUserProfilePhotosRequest(server string, body PostGetUserProfilePhotosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetUserProfilePhotosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetUserProfilePhotosRequestWithFormdataBody calls the generic PostGetUserProfilePhotos builder with application/x-www-form-urlencoded body
func NewPostGetUserProfilePhotosRequestWithFormdataBody(server string, body PostGetUserProfilePhotosFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGetUserProfilePhotosRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGetUserProfilePhotosRequestWithBody generates requests for PostGetUserProfilePhotos with any type of body
func NewPostGetUserProfilePhotosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getUserProfilePhotos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetWebhookInfoRequest generates requests for PostGetWebhookInfo
func NewPostGetWebhookInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getWebhookInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJoinChatRequest calls the generic PostJoinChat builder with application/json body
func NewPostJoinChatRequest(server string, body PostJoinChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJoinChatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJoinChatRequestWithFormdataBody calls the generic PostJoinChat builder with application/x-www-form-urlencoded body
func NewPostJoinChatRequestWithFormdataBody(server string, body PostJoinChatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostJoinChatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostJoinChatRequestWithBody generates requests for PostJoinChat with any type of body
func NewPostJoinChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/joinChat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostKickChatMemberRequest calls the generic PostKickChatMember builder with application/json body
func NewPostKickChatMemberRequest(server string, body PostKickChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostKickChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostKickChatMemberRequestWithFormdataBody calls the generic PostKickChatMember builder with application/x-www-form-urlencoded body
func NewPostKickChatMemberRequestWithFormdataBody(server string, body PostKickChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostKickChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostKickChatMemberRequestWithBody generates requests for PostKickChatMember with any type of body
func NewPostKickChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kickChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLeaveChatRequest calls the generic PostLeaveChat builder with application/json body
func NewPostLeaveChatRequest(server string, body PostLeaveChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLeaveChatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLeaveChatRequestWithFormdataBody calls the generic PostLeaveChat builder with application/x-www-form-urlencoded body
func NewPostLeaveChatRequestWithFormdataBody(server string, body PostLeaveChatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostLeaveChatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostLeaveChatRequestWithBody generates requests for PostLeaveChat with any type of body
func NewPostLeaveChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leaveChat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLogOutRequest generates requests for PostLogOut
func NewPostLogOutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logOut")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOptimizeMemoryRequest generates requests for PostOptimizeMemory
func NewPostOptimizeMemoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/optimizeMemory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPinChatMessageRequest calls the generic PostPinChatMessage builder with application/json body
func NewPostPinChatMessageRequest(server string, body PostPinChatMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPinChatMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPinChatMessageRequestWithFormdataBody calls the generic PostPinChatMessage builder with application/x-www-form-urlencoded body
func NewPostPinChatMessageRequestWithFormdataBody(server string, body PostPinChatMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPinChatMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPinChatMessageRequestWithBody generates requests for PostPinChatMessage with any type of body
func NewPostPinChatMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinChatMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPingRequest generates requests for PostPing
func NewPostPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPromoteChatMemberRequest calls the generic PostPromoteChatMember builder with application/json body
func NewPostPromoteChatMemberRequest(server string, body PostPromoteChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPromoteChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPromoteChatMemberRequestWithFormdataBody calls the generic PostPromoteChatMember builder with application/x-www-form-urlencoded body
func NewPostPromoteChatMemberRequestWithFormdataBody(server string, body PostPromoteChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPromoteChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPromoteChatMemberRequestWithBody generates requests for PostPromoteChatMember with any type of body
func NewPostPromoteChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promoteChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRegisterUserRequest calls the generic PostRegisterUser builder with application/json body
func NewPostRegisterUserRequest(server string, body PostRegisterUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterUserRequestWithFormdataBody calls the generic PostRegisterUser builder with application/x-www-form-urlencoded body
func NewPostRegisterUserRequestWithFormdataBody(server string, body PostRegisterUserFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostRegisterUserRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostRegisterUserRequestWithBody generates requests for PostRegisterUser with any type of body
func NewPostRegisterUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registerUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReportChatRequest calls the generic PostReportChat builder with application/json body
func NewPostReportChatRequest(server string, body PostReportChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReportChatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReportChatRequestWithFormdataBody calls the generic PostReportChat builder with application/x-www-form-urlencoded body
func NewPostReportChatRequestWithFormdataBody(server string, body PostReportChatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostReportChatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostReportChatRequestWithBody generates requests for PostReportChat with any type of body
func NewPostReportChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reportChat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRestrictChatMemberRequest calls the generic PostRestrictChatMember builder with application/json body
func NewPostRestrictChatMemberRequest(server string, body PostRestrictChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRestrictChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRestrictChatMemberRequestWithFormdataBody calls the generic PostRestrictChatMember builder with application/x-www-form-urlencoded body
func NewPostRestrictChatMemberRequestWithFormdataBody(server string, body PostRestrictChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostRestrictChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostRestrictChatMemberRequestWithBody generates requests for PostRestrictChatMember with any type of body
func NewPostRestrictChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restrictChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchChatMessagesRequest calls the generic PostSearchChatMessages builder with application/json body
func NewPostSearchChatMessagesRequest(server string, body PostSearchChatMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchChatMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSearchChatMessagesRequestWithFormdataBody calls the generic PostSearchChatMessages builder with application/x-www-form-urlencoded body
func NewPostSearchChatMessagesRequestWithFormdataBody(server string, body PostSearchChatMessagesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSearchChatMessagesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSearchChatMessagesRequestWithBody generates requests for PostSearchChatMessages with any type of body
func NewPostSearchChatMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchChatMessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchMessagesRequest calls the generic PostSearchMessages builder with application/json body
func NewPostSearchMessagesRequest(server string, body PostSearchMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSearchMessagesRequestWithFormdataBody calls the generic PostSearchMessages builder with application/x-www-form-urlencoded body
func NewPostSearchMessagesRequestWithFormdataBody(server string, body PostSearchMessagesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSearchMessagesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSearchMessagesRequestWithBody generates requests for PostSearchMessages with any type of body
func NewPostSearchMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchMessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchPublicChatsRequest calls the generic PostSearchPublicChats builder with application/json body
func NewPostSearchPublicChatsRequest(server string, body PostSearchPublicChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchPublicChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSearchPublicChatsRequestWithFormdataBody calls the generic PostSearchPublicChats builder with application/x-www-form-urlencoded body
func NewPostSearchPublicChatsRequestWithFormdataBody(server string, body PostSearchPublicChatsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSearchPublicChatsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSearchPublicChatsRequestWithBody generates requests for PostSearchPublicChats with any type of body
func NewPostSearchPublicChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchPublicChats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendAnimationRequestWithBody generates requests for PostSendAnimation with any type of body
func NewPostSendAnimationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendAnimation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendAudioRequestWithBody generates requests for PostSendAudio with any type of body
func NewPostSendAudioRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendAudio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendChatActionRequest calls the generic PostSendChatAction builder with application/json body
func NewPostSendChatActionRequest(server string, body PostSendChatActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendChatActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendChatActionRequestWithFormdataBody calls the generic PostSendChatAction builder with application/x-www-form-urlencoded body
func NewPostSendChatActionRequestWithFormdataBody(server string, body PostSendChatActionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendChatActionRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendChatActionRequestWithBody generates requests for PostSendChatAction with any type of body
func NewPostSendChatActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendChatAction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendContactRequest calls the generic PostSendContact builder with application/json body
func NewPostSendContactRequest(server string, body PostSendContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendContactRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendContactRequestWithFormdataBody calls the generic PostSendContact builder with application/x-www-form-urlencoded body
func NewPostSendContactRequestWithFormdataBody(server string, body PostSendContactFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendContactRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendContactRequestWithBody generates requests for PostSendContact with any type of body
func NewPostSendContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendDiceRequest calls the generic PostSendDice builder with application/json body
func NewPostSendDiceRequest(server string, body PostSendDiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendDiceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendDiceRequestWithFormdataBody calls the generic PostSendDice builder with application/x-www-form-urlencoded body
func NewPostSendDiceRequestWithFormdataBody(server string, body PostSendDiceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendDiceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendDiceRequestWithBody generates requests for PostSendDice with any type of body
func NewPostSendDiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendDice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendDocumentRequestWithBody generates requests for PostSendDocument with any type of body
func NewPostSendDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendDocument")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendGameRequest calls the generic PostSendGame builder with application/json body
func NewPostSendGameRequest(server string, body PostSendGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendGameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendGameRequestWithFormdataBody calls the generic PostSendGame builder with application/x-www-form-urlencoded body
func NewPostSendGameRequestWithFormdataBody(server string, body PostSendGameFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendGameRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendGameRequestWithBody generates requests for PostSendGame with any type of body
func NewPostSendGameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendGame")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendInvoiceRequest calls the generic PostSendInvoice builder with application/json body
func NewPostSendInvoiceRequest(server string, body PostSendInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendInvoiceRequestWithFormdataBody calls the generic PostSendInvoice builder with application/x-www-form-urlencoded body
func NewPostSendInvoiceRequestWithFormdataBody(server string, body PostSendInvoiceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendInvoiceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendInvoiceRequestWithBody generates requests for PostSendInvoice with any type of body
func NewPostSendInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendInvoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendLocationRequest calls the generic PostSendLocation builder with application/json body
func NewPostSendLocationRequest(server string, body PostSendLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendLocationRequestWithFormdataBody calls the generic PostSendLocation builder with application/x-www-form-urlencoded body
func NewPostSendLocationRequestWithFormdataBody(server string, body PostSendLocationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendLocationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendLocationRequestWithBody generates requests for PostSendLocation with any type of body
func NewPostSendLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendLocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendMediaGroupRequestWithBody generates requests for PostSendMediaGroup with any type of body
func NewPostSendMediaGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendMediaGroup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendMessageRequest calls the generic PostSendMessage builder with application/json body
func NewPostSendMessageRequest(server string, body PostSendMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendMessageRequestWithFormdataBody calls the generic PostSendMessage builder with application/x-www-form-urlencoded body
func NewPostSendMessageRequestWithFormdataBody(server string, body PostSendMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendMessageRequestWithBody generates requests for PostSendMessage with any type of body
func NewPostSendMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendPhotoRequestWithBody generates requests for PostSendPhoto with any type of body
func NewPostSendPhotoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendPhoto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendPollRequest calls the generic PostSendPoll builder with application/json body
func NewPostSendPollRequest(server string, body PostSendPollJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendPollRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendPollRequestWithFormdataBody calls the generic PostSendPoll builder with application/x-www-form-urlencoded body
func NewPostSendPollRequestWithFormdataBody(server string, body PostSendPollFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendPollRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendPollRequestWithBody generates requests for PostSendPoll with any type of body
func NewPostSendPollRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendPoll")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendStickerRequestWithBody generates requests for PostSendSticker with any type of body
func NewPostSendStickerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendSticker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendVenueRequest calls the generic PostSendVenue builder with application/json body
func NewPostSendVenueRequest(server string, body PostSendVenueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendVenueRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendVenueRequestWithFormdataBody calls the generic PostSendVenue builder with application/x-www-form-urlencoded body
func NewPostSendVenueRequestWithFormdataBody(server string, body PostSendVenueFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendVenueRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendVenueRequestWithBody generates requests for PostSendVenue with any type of body
func NewPostSendVenueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendVenue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendVideoRequestWithBody generates requests for PostSendVideo with any type of body
func NewPostSendVideoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendVideo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendVideoNoteRequestWithBody generates requests for PostSendVideoNote with any type of body
func NewPostSendVideoNoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendVideoNote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendVoiceRequestWithBody generates requests for PostSendVoice with any type of body
func NewPostSendVoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendVoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatAdministratorCustomTitleRequest calls the generic PostSetChatAdministratorCustomTitle builder with application/json body
func NewPostSetChatAdministratorCustomTitleRequest(server string, body PostSetChatAdministratorCustomTitleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetChatAdministratorCustomTitleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetChatAdministratorCustomTitleRequestWithFormdataBody calls the generic PostSetChatAdministratorCustomTitle builder with application/x-www-form-urlencoded body
func NewPostSetChatAdministratorCustomTitleRequestWithFormdataBody(server string, body PostSetChatAdministratorCustomTitleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetChatAdministratorCustomTitleRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetChatAdministratorCustomTitleRequestWithBody generates requests for PostSetChatAdministratorCustomTitle with any type of body
func NewPostSetChatAdministratorCustomTitleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatAdministratorCustomTitle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatDescriptionRequest calls the generic PostSetChatDescription builder with application/json body
func NewPostSetChatDescriptionRequest(server string, body PostSetChatDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetChatDescriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetChatDescriptionRequestWithFormdataBody calls the generic PostSetChatDescription builder with application/x-www-form-urlencoded body
func NewPostSetChatDescriptionRequestWithFormdataBody(server string, body PostSetChatDescriptionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetChatDescriptionRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetChatDescriptionRequestWithBody generates requests for PostSetChatDescription with any type of body
func NewPostSetChatDescriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatDescription")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatPermissionsRequest calls the generic PostSetChatPermissions builder with application/json body
func NewPostSetChatPermissionsRequest(server string, body PostSetChatPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetChatPermissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetChatPermissionsRequestWithFormdataBody calls the generic PostSetChatPermissions builder with application/x-www-form-urlencoded body
func NewPostSetChatPermissionsRequestWithFormdataBody(server string, body PostSetChatPermissionsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetChatPermissionsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetChatPermissionsRequestWithBody generates requests for PostSetChatPermissions with any type of body
func NewPostSetChatPermissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatPermissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatPhotoRequestWithBody generates requests for PostSetChatPhoto with any type of body
func NewPostSetChatPhotoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatPhoto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatStickerSetRequest calls the generic PostSetChatStickerSet builder with application/json body
func NewPostSetChatStickerSetRequest(server string, body PostSetChatStickerSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetChatStickerSetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetChatStickerSetRequestWithFormdataBody calls the generic PostSetChatStickerSet builder with application/x-www-form-urlencoded body
func NewPostSetChatStickerSetRequestWithFormdataBody(server string, body PostSetChatStickerSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetChatStickerSetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetChatStickerSetRequestWithBody generates requests for PostSetChatStickerSet with any type of body
func NewPostSetChatStickerSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatStickerSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetChatTitleRequest calls the generic PostSetChatTitle builder with application/json body
func NewPostSetChatTitleRequest(server string, body PostSetChatTitleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetChatTitleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetChatTitleRequestWithFormdataBody calls the generic PostSetChatTitle builder with application/x-www-form-urlencoded body
func NewPostSetChatTitleRequestWithFormdataBody(server string, body PostSetChatTitleFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetChatTitleRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetChatTitleRequestWithBody generates requests for PostSetChatTitle with any type of body
func NewPostSetChatTitleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setChatTitle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetGameScoreRequest calls the generic PostSetGameScore builder with application/json body
func NewPostSetGameScoreRequest(server string, body PostSetGameScoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetGameScoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetGameScoreRequestWithFormdataBody calls the generic PostSetGameScore builder with application/x-www-form-urlencoded body
func NewPostSetGameScoreRequestWithFormdataBody(server string, body PostSetGameScoreFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetGameScoreRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetGameScoreRequestWithBody generates requests for PostSetGameScore with any type of body
func NewPostSetGameScoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setGameScore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetMyCommandsRequest calls the generic PostSetMyCommands builder with application/json body
func NewPostSetMyCommandsRequest(server string, body PostSetMyCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetMyCommandsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetMyCommandsRequestWithFormdataBody calls the generic PostSetMyCommands builder with application/x-www-form-urlencoded body
func NewPostSetMyCommandsRequestWithFormdataBody(server string, body PostSetMyCommandsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetMyCommandsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetMyCommandsRequestWithBody generates requests for PostSetMyCommands with any type of body
func NewPostSetMyCommandsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setMyCommands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetPassportDataErrorsRequest calls the generic PostSetPassportDataErrors builder with application/json body
func NewPostSetPassportDataErrorsRequest(server string, body PostSetPassportDataErrorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetPassportDataErrorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetPassportDataErrorsRequestWithFormdataBody calls the generic PostSetPassportDataErrors builder with application/x-www-form-urlencoded body
func NewPostSetPassportDataErrorsRequestWithFormdataBody(server string, body PostSetPassportDataErrorsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetPassportDataErrorsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetPassportDataErrorsRequestWithBody generates requests for PostSetPassportDataErrors with any type of body
func NewPostSetPassportDataErrorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setPassportDataErrors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetPollAnswerRequest calls the generic PostSetPollAnswer builder with application/json body
func NewPostSetPollAnswerRequest(server string, body PostSetPollAnswerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetPollAnswerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetPollAnswerRequestWithFormdataBody calls the generic PostSetPollAnswer builder with application/x-www-form-urlencoded body
func NewPostSetPollAnswerRequestWithFormdataBody(server string, body PostSetPollAnswerFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetPollAnswerRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetPollAnswerRequestWithBody generates requests for PostSetPollAnswer with any type of body
func NewPostSetPollAnswerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setPollAnswer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetStickerPositionInSetRequest calls the generic PostSetStickerPositionInSet builder with application/json body
func NewPostSetStickerPositionInSetRequest(server string, body PostSetStickerPositionInSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSetStickerPositionInSetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSetStickerPositionInSetRequestWithFormdataBody calls the generic PostSetStickerPositionInSet builder with application/x-www-form-urlencoded body
func NewPostSetStickerPositionInSetRequestWithFormdataBody(server string, body PostSetStickerPositionInSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSetStickerPositionInSetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSetStickerPositionInSetRequestWithBody generates requests for PostSetStickerPositionInSet with any type of body
func NewPostSetStickerPositionInSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setStickerPositionInSet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetStickerSetThumbRequestWithBody generates requests for PostSetStickerSetThumb with any type of body
func NewPostSetStickerSetThumbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setStickerSetThumb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSetWebhookRequestWithBody generates requests for PostSetWebhook with any type of body
func NewPostSetWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setWebhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStopMessageLiveLocationRequest calls the generic PostStopMessageLiveLocation builder with application/json body
func NewPostStopMessageLiveLocationRequest(server string, body PostStopMessageLiveLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStopMessageLiveLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStopMessageLiveLocationRequestWithFormdataBody calls the generic PostStopMessageLiveLocation builder with application/x-www-form-urlencoded body
func NewPostStopMessageLiveLocationRequestWithFormdataBody(server string, body PostStopMessageLiveLocationFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostStopMessageLiveLocationRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostStopMessageLiveLocationRequestWithBody generates requests for PostStopMessageLiveLocation with any type of body
func NewPostStopMessageLiveLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stopMessageLiveLocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStopPollRequest calls the generic PostStopPoll builder with application/json body
func NewPostStopPollRequest(server string, body PostStopPollJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStopPollRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStopPollRequestWithFormdataBody calls the generic PostStopPoll builder with application/x-www-form-urlencoded body
func NewPostStopPollRequestWithFormdataBody(server string, body PostStopPollFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostStopPollRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostStopPollRequestWithBody generates requests for PostStopPoll with any type of body
func NewPostStopPollRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stopPoll")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUnbanChatMemberRequest calls the generic PostUnbanChatMember builder with application/json body
func NewPostUnbanChatMemberRequest(server string, body PostUnbanChatMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnbanChatMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnbanChatMemberRequestWithFormdataBody calls the generic PostUnbanChatMember builder with application/x-www-form-urlencoded body
func NewPostUnbanChatMemberRequestWithFormdataBody(server string, body PostUnbanChatMemberFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostUnbanChatMemberRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostUnbanChatMemberRequestWithBody generates requests for PostUnbanChatMember with any type of body
func NewPostUnbanChatMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unbanChatMember")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUnpinAllChatMessagesRequest calls the generic PostUnpinAllChatMessages builder with application/json body
func NewPostUnpinAllChatMessagesRequest(server string, body PostUnpinAllChatMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnpinAllChatMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnpinAllChatMessagesRequestWithFormdataBody calls the generic PostUnpinAllChatMessages builder with application/x-www-form-urlencoded body
func NewPostUnpinAllChatMessagesRequestWithFormdataBody(server string, body PostUnpinAllChatMessagesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostUnpinAllChatMessagesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostUnpinAllChatMessagesRequestWithBody generates requests for PostUnpinAllChatMessages with any type of body
func NewPostUnpinAllChatMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unpinAllChatMessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUnpinChatMessageRequest calls the generic PostUnpinChatMessage builder with application/json body
func NewPostUnpinChatMessageRequest(server string, body PostUnpinChatMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnpinChatMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnpinChatMessageRequestWithFormdataBody calls the generic PostUnpinChatMessage builder with application/x-www-form-urlencoded body
func NewPostUnpinChatMessageRequestWithFormdataBody(server string, body PostUnpinChatMessageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostUnpinChatMessageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostUnpinChatMessageRequestWithBody generates requests for PostUnpinChatMessage with any type of body
func NewPostUnpinChatMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unpinChatMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUploadStickerFileRequestWithBody generates requests for PostUploadStickerFile with any type of body
func NewPostUploadStickerFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/uploadStickerFile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserLoginRequest calls the generic PostUserLogin builder with application/json body
func NewPostUserLoginRequest(server string, body PostUserLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserLoginRequestWithFormdataBody calls the generic PostUserLogin builder with application/x-www-form-urlencoded body
func NewPostUserLoginRequestWithFormdataBody(server string, body PostUserLoginFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostUserLoginRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostUserLoginRequestWithBody generates requests for PostUserLogin with any type of body
func NewPostUserLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userLogin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAddChatMemberWithBodyWithResponse request with any body
	PostAddChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error)

	PostAddChatMemberWithResponse(ctx context.Context, body PostAddChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error)

	PostAddChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostAddChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error)

	// PostAddProxyWithBodyWithResponse request with any body
	PostAddProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error)

	PostAddProxyWithResponse(ctx context.Context, body PostAddProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error)

	PostAddProxyWithFormdataBodyWithResponse(ctx context.Context, body PostAddProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error)

	// PostAddStickerToSetWithBodyWithResponse request with any body
	PostAddStickerToSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddStickerToSetResponse, error)

	// PostAnswerCallbackQueryWithBodyWithResponse request with any body
	PostAnswerCallbackQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error)

	PostAnswerCallbackQueryWithResponse(ctx context.Context, body PostAnswerCallbackQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error)

	PostAnswerCallbackQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerCallbackQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error)

	// PostAnswerInlineQueryWithBodyWithResponse request with any body
	PostAnswerInlineQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error)

	PostAnswerInlineQueryWithResponse(ctx context.Context, body PostAnswerInlineQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error)

	PostAnswerInlineQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerInlineQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error)

	// PostAnswerPreCheckoutQueryWithBodyWithResponse request with any body
	PostAnswerPreCheckoutQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error)

	PostAnswerPreCheckoutQueryWithResponse(ctx context.Context, body PostAnswerPreCheckoutQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error)

	PostAnswerPreCheckoutQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerPreCheckoutQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error)

	// PostAnswerShippingQueryWithBodyWithResponse request with any body
	PostAnswerShippingQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error)

	PostAnswerShippingQueryWithResponse(ctx context.Context, body PostAnswerShippingQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error)

	PostAnswerShippingQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerShippingQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error)

	// PostAuthCodeWithBodyWithResponse request with any body
	PostAuthCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error)

	PostAuthCodeWithResponse(ctx context.Context, body PostAuthCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error)

	PostAuthCodeWithFormdataBodyWithResponse(ctx context.Context, body PostAuthCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error)

	// PostAuthPasswordWithBodyWithResponse request with any body
	PostAuthPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error)

	PostAuthPasswordWithResponse(ctx context.Context, body PostAuthPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error)

	PostAuthPasswordWithFormdataBodyWithResponse(ctx context.Context, body PostAuthPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error)

	// PostCloseWithResponse request
	PostCloseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCloseResponse, error)

	// PostCopyMessageWithBodyWithResponse request with any body
	PostCopyMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error)

	PostCopyMessageWithResponse(ctx context.Context, body PostCopyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error)

	PostCopyMessageWithFormdataBodyWithResponse(ctx context.Context, body PostCopyMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error)

	// PostCreateChatWithBodyWithResponse request with any body
	PostCreateChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error)

	PostCreateChatWithResponse(ctx context.Context, body PostCreateChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error)

	PostCreateChatWithFormdataBodyWithResponse(ctx context.Context, body PostCreateChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error)

	// PostCreateNewStickerSetWithBodyWithResponse request with any body
	PostCreateNewStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateNewStickerSetResponse, error)

	// PostDeleteChatHistoryWithBodyWithResponse request with any body
	PostDeleteChatHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error)

	PostDeleteChatHistoryWithResponse(ctx context.Context, body PostDeleteChatHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error)

	PostDeleteChatHistoryWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error)

	// PostDeleteChatPhotoWithBodyWithResponse request with any body
	PostDeleteChatPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error)

	PostDeleteChatPhotoWithResponse(ctx context.Context, body PostDeleteChatPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error)

	PostDeleteChatPhotoWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatPhotoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error)

	// PostDeleteChatStickerSetWithBodyWithResponse request with any body
	PostDeleteChatStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error)

	PostDeleteChatStickerSetWithResponse(ctx context.Context, body PostDeleteChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error)

	PostDeleteChatStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error)

	// PostDeleteMessageWithBodyWithResponse request with any body
	PostDeleteMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error)

	PostDeleteMessageWithResponse(ctx context.Context, body PostDeleteMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error)

	PostDeleteMessageWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error)

	// PostDeleteMessagesWithBodyWithResponse request with any body
	PostDeleteMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error)

	PostDeleteMessagesWithResponse(ctx context.Context, body PostDeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error)

	PostDeleteMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error)

	// PostDeleteProxyWithBodyWithResponse request with any body
	PostDeleteProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error)

	PostDeleteProxyWithResponse(ctx context.Context, body PostDeleteProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error)

	PostDeleteProxyWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error)

	// PostDeleteStickerFromSetWithBodyWithResponse request with any body
	PostDeleteStickerFromSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error)

	PostDeleteStickerFromSetWithResponse(ctx context.Context, body PostDeleteStickerFromSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error)

	PostDeleteStickerFromSetWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteStickerFromSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error)

	// PostDeleteWebhookWithBodyWithResponse request with any body
	PostDeleteWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error)

	PostDeleteWebhookWithResponse(ctx context.Context, body PostDeleteWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error)

	PostDeleteWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error)

	// PostDisableProxyWithBodyWithResponse request with any body
	PostDisableProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error)

	PostDisableProxyWithResponse(ctx context.Context, body PostDisableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error)

	PostDisableProxyWithFormdataBodyWithResponse(ctx context.Context, body PostDisableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error)

	// PostEditMessageCaptionWithBodyWithResponse request with any body
	PostEditMessageCaptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error)

	PostEditMessageCaptionWithResponse(ctx context.Context, body PostEditMessageCaptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error)

	PostEditMessageCaptionWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageCaptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error)

	// PostEditMessageLiveLocationWithBodyWithResponse request with any body
	PostEditMessageLiveLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error)

	PostEditMessageLiveLocationWithResponse(ctx context.Context, body PostEditMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error)

	PostEditMessageLiveLocationWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error)

	// PostEditMessageMediaWithBodyWithResponse request with any body
	PostEditMessageMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageMediaResponse, error)

	// PostEditMessageReplyMarkupWithBodyWithResponse request with any body
	PostEditMessageReplyMarkupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error)

	PostEditMessageReplyMarkupWithResponse(ctx context.Context, body PostEditMessageReplyMarkupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error)

	PostEditMessageReplyMarkupWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageReplyMarkupFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error)

	// PostEditMessageSchedulingWithBodyWithResponse request with any body
	PostEditMessageSchedulingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error)

	PostEditMessageSchedulingWithResponse(ctx context.Context, body PostEditMessageSchedulingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error)

	PostEditMessageSchedulingWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageSchedulingFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error)

	// PostEditMessageTextWithBodyWithResponse request with any body
	PostEditMessageTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error)

	PostEditMessageTextWithResponse(ctx context.Context, body PostEditMessageTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error)

	PostEditMessageTextWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageTextFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error)

	// PostEnableProxyWithBodyWithResponse request with any body
	PostEnableProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error)

	PostEnableProxyWithResponse(ctx context.Context, body PostEnableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error)

	PostEnableProxyWithFormdataBodyWithResponse(ctx context.Context, body PostEnableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error)

	// PostExportChatInviteLinkWithBodyWithResponse request with any body
	PostExportChatInviteLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error)

	PostExportChatInviteLinkWithResponse(ctx context.Context, body PostExportChatInviteLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error)

	PostExportChatInviteLinkWithFormdataBodyWithResponse(ctx context.Context, body PostExportChatInviteLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error)

	// PostForwardMessageWithBodyWithResponse request with any body
	PostForwardMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error)

	PostForwardMessageWithResponse(ctx context.Context, body PostForwardMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error)

	PostForwardMessageWithFormdataBodyWithResponse(ctx context.Context, body PostForwardMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error)

	// PostGetCallbackQueryAnswerWithBodyWithResponse request with any body
	PostGetCallbackQueryAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error)

	PostGetCallbackQueryAnswerWithResponse(ctx context.Context, body PostGetCallbackQueryAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error)

	PostGetCallbackQueryAnswerWithFormdataBodyWithResponse(ctx context.Context, body PostGetCallbackQueryAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error)

	// PostGetChatWithBodyWithResponse request with any body
	PostGetChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error)

	PostGetChatWithResponse(ctx context.Context, body PostGetChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error)

	PostGetChatWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error)

	// PostGetChatAdministratorsWithBodyWithResponse request with any body
	PostGetChatAdministratorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error)

	PostGetChatAdministratorsWithResponse(ctx context.Context, body PostGetChatAdministratorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error)

	PostGetChatAdministratorsWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatAdministratorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error)

	// PostGetChatMemberWithBodyWithResponse request with any body
	PostGetChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error)

	PostGetChatMemberWithResponse(ctx context.Context, body PostGetChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error)

	PostGetChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error)

	// PostGetChatMembersWithBodyWithResponse request with any body
	PostGetChatMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error)

	PostGetChatMembersWithResponse(ctx context.Context, body PostGetChatMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error)

	PostGetChatMembersWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMembersFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error)

	// PostGetChatMembersCountWithBodyWithResponse request with any body
	PostGetChatMembersCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error)

	PostGetChatMembersCountWithResponse(ctx context.Context, body PostGetChatMembersCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error)

	PostGetChatMembersCountWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMembersCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error)

	// PostGetChatsWithBodyWithResponse request with any body
	PostGetChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error)

	PostGetChatsWithResponse(ctx context.Context, body PostGetChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error)

	PostGetChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error)

	// PostGetCommonChatsWithBodyWithResponse request with any body
	PostGetCommonChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error)

	PostGetCommonChatsWithResponse(ctx context.Context, body PostGetCommonChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error)

	PostGetCommonChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetCommonChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error)

	// PostGetFileWithBodyWithResponse request with any body
	PostGetFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error)

	PostGetFileWithResponse(ctx context.Context, body PostGetFileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error)

	PostGetFileWithFormdataBodyWithResponse(ctx context.Context, body PostGetFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error)

	// PostGetGameHighScoresWithBodyWithResponse request with any body
	PostGetGameHighScoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error)

	PostGetGameHighScoresWithResponse(ctx context.Context, body PostGetGameHighScoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error)

	PostGetGameHighScoresWithFormdataBodyWithResponse(ctx context.Context, body PostGetGameHighScoresFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error)

	// PostGetInactiveChatsWithResponse request
	PostGetInactiveChatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetInactiveChatsResponse, error)

	// PostGetMeWithResponse request
	PostGetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMeResponse, error)

	// PostGetMemoryStatsWithResponse request
	PostGetMemoryStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMemoryStatsResponse, error)

	// PostGetMessageInfoWithBodyWithResponse request with any body
	PostGetMessageInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error)

	PostGetMessageInfoWithResponse(ctx context.Context, body PostGetMessageInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error)

	PostGetMessageInfoWithFormdataBodyWithResponse(ctx context.Context, body PostGetMessageInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error)

	// PostGetMyCommandsWithResponse request
	PostGetMyCommandsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMyCommandsResponse, error)

	// PostGetNearbyChatsWithBodyWithResponse request with any body
	PostGetNearbyChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error)

	PostGetNearbyChatsWithResponse(ctx context.Context, body PostGetNearbyChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error)

	PostGetNearbyChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetNearbyChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error)

	// PostGetProxiesWithResponse request
	PostGetProxiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetProxiesResponse, error)

	// PostGetScheduledMessagesWithBodyWithResponse request with any body
	PostGetScheduledMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error)

	PostGetScheduledMessagesWithResponse(ctx context.Context, body PostGetScheduledMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error)

	PostGetScheduledMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostGetScheduledMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error)

	// PostGetStickerSetWithBodyWithResponse request with any body
	PostGetStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error)

	PostGetStickerSetWithResponse(ctx context.Context, body PostGetStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error)

	PostGetStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostGetStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error)

	// PostGetUpdatesWithBodyWithResponse request with any body
	PostGetUpdatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error)

	PostGetUpdatesWithResponse(ctx context.Context, body PostGetUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error)

	PostGetUpdatesWithFormdataBodyWithResponse(ctx context.Context, body PostGetUpdatesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error)

	// PostGetUserProfilePhotosWithBodyWithResponse request with any body
	PostGetUserProfilePhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error)

	PostGetUserProfilePhotosWithResponse(ctx context.Context, body PostGetUserProfilePhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error)

	PostGetUserProfilePhotosWithFormdataBodyWithResponse(ctx context.Context, body PostGetUserProfilePhotosFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error)

	// PostGetWebhookInfoWithResponse request
	PostGetWebhookInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetWebhookInfoResponse, error)

	// PostJoinChatWithBodyWithResponse request with any body
	PostJoinChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error)

	PostJoinChatWithResponse(ctx context.Context, body PostJoinChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error)

	PostJoinChatWithFormdataBodyWithResponse(ctx context.Context, body PostJoinChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error)

	// PostKickChatMemberWithBodyWithResponse request with any body
	PostKickChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error)

	PostKickChatMemberWithResponse(ctx context.Context, body PostKickChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error)

	PostKickChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostKickChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error)

	// PostLeaveChatWithBodyWithResponse request with any body
	PostLeaveChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error)

	PostLeaveChatWithResponse(ctx context.Context, body PostLeaveChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error)

	PostLeaveChatWithFormdataBodyWithResponse(ctx context.Context, body PostLeaveChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error)

	// PostLogOutWithResponse request
	PostLogOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLogOutResponse, error)

	// PostOptimizeMemoryWithResponse request
	PostOptimizeMemoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOptimizeMemoryResponse, error)

	// PostPinChatMessageWithBodyWithResponse request with any body
	PostPinChatMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error)

	PostPinChatMessageWithResponse(ctx context.Context, body PostPinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error)

	PostPinChatMessageWithFormdataBodyWithResponse(ctx context.Context, body PostPinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error)

	// PostPingWithResponse request
	PostPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPingResponse, error)

	// PostPromoteChatMemberWithBodyWithResponse request with any body
	PostPromoteChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error)

	PostPromoteChatMemberWithResponse(ctx context.Context, body PostPromoteChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error)

	PostPromoteChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostPromoteChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error)

	// PostRegisterUserWithBodyWithResponse request with any body
	PostRegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error)

	PostRegisterUserWithResponse(ctx context.Context, body PostRegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error)

	PostRegisterUserWithFormdataBodyWithResponse(ctx context.Context, body PostRegisterUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error)

	// PostReportChatWithBodyWithResponse request with any body
	PostReportChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error)

	PostReportChatWithResponse(ctx context.Context, body PostReportChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error)

	PostReportChatWithFormdataBodyWithResponse(ctx context.Context, body PostReportChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error)

	// PostRestrictChatMemberWithBodyWithResponse request with any body
	PostRestrictChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error)

	PostRestrictChatMemberWithResponse(ctx context.Context, body PostRestrictChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error)

	PostRestrictChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostRestrictChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error)

	// PostSearchChatMessagesWithBodyWithResponse request with any body
	PostSearchChatMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error)

	PostSearchChatMessagesWithResponse(ctx context.Context, body PostSearchChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error)

	PostSearchChatMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostSearchChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error)

	// PostSearchMessagesWithBodyWithResponse request with any body
	PostSearchMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error)

	PostSearchMessagesWithResponse(ctx context.Context, body PostSearchMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error)

	PostSearchMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostSearchMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error)

	// PostSearchPublicChatsWithBodyWithResponse request with any body
	PostSearchPublicChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error)

	PostSearchPublicChatsWithResponse(ctx context.Context, body PostSearchPublicChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error)

	PostSearchPublicChatsWithFormdataBodyWithResponse(ctx context.Context, body PostSearchPublicChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error)

	// PostSendAnimationWithBodyWithResponse request with any body
	PostSendAnimationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendAnimationResponse, error)

	// PostSendAudioWithBodyWithResponse request with any body
	PostSendAudioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendAudioResponse, error)

	// PostSendChatActionWithBodyWithResponse request with any body
	PostSendChatActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error)

	PostSendChatActionWithResponse(ctx context.Context, body PostSendChatActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error)

	PostSendChatActionWithFormdataBodyWithResponse(ctx context.Context, body PostSendChatActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error)

	// PostSendContactWithBodyWithResponse request with any body
	PostSendContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error)

	PostSendContactWithResponse(ctx context.Context, body PostSendContactJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error)

	PostSendContactWithFormdataBodyWithResponse(ctx context.Context, body PostSendContactFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error)

	// PostSendDiceWithBodyWithResponse request with any body
	PostSendDiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error)

	PostSendDiceWithResponse(ctx context.Context, body PostSendDiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error)

	PostSendDiceWithFormdataBodyWithResponse(ctx context.Context, body PostSendDiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error)

	// PostSendDocumentWithBodyWithResponse request with any body
	PostSendDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendDocumentResponse, error)

	// PostSendGameWithBodyWithResponse request with any body
	PostSendGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error)

	PostSendGameWithResponse(ctx context.Context, body PostSendGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error)

	PostSendGameWithFormdataBodyWithResponse(ctx context.Context, body PostSendGameFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error)

	// PostSendInvoiceWithBodyWithResponse request with any body
	PostSendInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error)

	PostSendInvoiceWithResponse(ctx context.Context, body PostSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error)

	PostSendInvoiceWithFormdataBodyWithResponse(ctx context.Context, body PostSendInvoiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error)

	// PostSendLocationWithBodyWithResponse request with any body
	PostSendLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error)

	PostSendLocationWithResponse(ctx context.Context, body PostSendLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error)

	PostSendLocationWithFormdataBodyWithResponse(ctx context.Context, body PostSendLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error)

	// PostSendMediaGroupWithBodyWithResponse request with any body
	PostSendMediaGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMediaGroupResponse, error)

	// PostSendMessageWithBodyWithResponse request with any body
	PostSendMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error)

	PostSendMessageWithResponse(ctx context.Context, body PostSendMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error)

	PostSendMessageWithFormdataBodyWithResponse(ctx context.Context, body PostSendMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error)

	// PostSendPhotoWithBodyWithResponse request with any body
	PostSendPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendPhotoResponse, error)

	// PostSendPollWithBodyWithResponse request with any body
	PostSendPollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error)

	PostSendPollWithResponse(ctx context.Context, body PostSendPollJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error)

	PostSendPollWithFormdataBodyWithResponse(ctx context.Context, body PostSendPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error)

	// PostSendStickerWithBodyWithResponse request with any body
	PostSendStickerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendStickerResponse, error)

	// PostSendVenueWithBodyWithResponse request with any body
	PostSendVenueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error)

	PostSendVenueWithResponse(ctx context.Context, body PostSendVenueJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error)

	PostSendVenueWithFormdataBodyWithResponse(ctx context.Context, body PostSendVenueFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error)

	// PostSendVideoWithBodyWithResponse request with any body
	PostSendVideoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVideoResponse, error)

	// PostSendVideoNoteWithBodyWithResponse request with any body
	PostSendVideoNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVideoNoteResponse, error)

	// PostSendVoiceWithBodyWithResponse request with any body
	PostSendVoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVoiceResponse, error)

	// PostSetChatAdministratorCustomTitleWithBodyWithResponse request with any body
	PostSetChatAdministratorCustomTitleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error)

	PostSetChatAdministratorCustomTitleWithResponse(ctx context.Context, body PostSetChatAdministratorCustomTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error)

	PostSetChatAdministratorCustomTitleWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatAdministratorCustomTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error)

	// PostSetChatDescriptionWithBodyWithResponse request with any body
	PostSetChatDescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error)

	PostSetChatDescriptionWithResponse(ctx context.Context, body PostSetChatDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error)

	PostSetChatDescriptionWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatDescriptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error)

	// PostSetChatPermissionsWithBodyWithResponse request with any body
	PostSetChatPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error)

	PostSetChatPermissionsWithResponse(ctx context.Context, body PostSetChatPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error)

	PostSetChatPermissionsWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatPermissionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error)

	// PostSetChatPhotoWithBodyWithResponse request with any body
	PostSetChatPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatPhotoResponse, error)

	// PostSetChatStickerSetWithBodyWithResponse request with any body
	PostSetChatStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error)

	PostSetChatStickerSetWithResponse(ctx context.Context, body PostSetChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error)

	PostSetChatStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error)

	// PostSetChatTitleWithBodyWithResponse request with any body
	PostSetChatTitleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error)

	PostSetChatTitleWithResponse(ctx context.Context, body PostSetChatTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error)

	PostSetChatTitleWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error)

	// PostSetGameScoreWithBodyWithResponse request with any body
	PostSetGameScoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error)

	PostSetGameScoreWithResponse(ctx context.Context, body PostSetGameScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error)

	PostSetGameScoreWithFormdataBodyWithResponse(ctx context.Context, body PostSetGameScoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error)

	// PostSetMyCommandsWithBodyWithResponse request with any body
	PostSetMyCommandsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error)

	PostSetMyCommandsWithResponse(ctx context.Context, body PostSetMyCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error)

	PostSetMyCommandsWithFormdataBodyWithResponse(ctx context.Context, body PostSetMyCommandsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error)

	// PostSetPassportDataErrorsWithBodyWithResponse request with any body
	PostSetPassportDataErrorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error)

	PostSetPassportDataErrorsWithResponse(ctx context.Context, body PostSetPassportDataErrorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error)

	PostSetPassportDataErrorsWithFormdataBodyWithResponse(ctx context.Context, body PostSetPassportDataErrorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error)

	// PostSetPollAnswerWithBodyWithResponse request with any body
	PostSetPollAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error)

	PostSetPollAnswerWithResponse(ctx context.Context, body PostSetPollAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error)

	PostSetPollAnswerWithFormdataBodyWithResponse(ctx context.Context, body PostSetPollAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error)

	// PostSetStickerPositionInSetWithBodyWithResponse request with any body
	PostSetStickerPositionInSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error)

	PostSetStickerPositionInSetWithResponse(ctx context.Context, body PostSetStickerPositionInSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error)

	PostSetStickerPositionInSetWithFormdataBodyWithResponse(ctx context.Context, body PostSetStickerPositionInSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error)

	// PostSetStickerSetThumbWithBodyWithResponse request with any body
	PostSetStickerSetThumbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetStickerSetThumbResponse, error)

	// PostSetWebhookWithBodyWithResponse request with any body
	PostSetWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetWebhookResponse, error)

	// PostStopMessageLiveLocationWithBodyWithResponse request with any body
	PostStopMessageLiveLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error)

	PostStopMessageLiveLocationWithResponse(ctx context.Context, body PostStopMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error)

	PostStopMessageLiveLocationWithFormdataBodyWithResponse(ctx context.Context, body PostStopMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error)

	// PostStopPollWithBodyWithResponse request with any body
	PostStopPollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error)

	PostStopPollWithResponse(ctx context.Context, body PostStopPollJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error)

	PostStopPollWithFormdataBodyWithResponse(ctx context.Context, body PostStopPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error)

	// PostUnbanChatMemberWithBodyWithResponse request with any body
	PostUnbanChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error)

	PostUnbanChatMemberWithResponse(ctx context.Context, body PostUnbanChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error)

	PostUnbanChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostUnbanChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error)

	// PostUnpinAllChatMessagesWithBodyWithResponse request with any body
	PostUnpinAllChatMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error)

	PostUnpinAllChatMessagesWithResponse(ctx context.Context, body PostUnpinAllChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error)

	PostUnpinAllChatMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostUnpinAllChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error)

	// PostUnpinChatMessageWithBodyWithResponse request with any body
	PostUnpinChatMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error)

	PostUnpinChatMessageWithResponse(ctx context.Context, body PostUnpinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error)

	PostUnpinChatMessageWithFormdataBodyWithResponse(ctx context.Context, body PostUnpinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error)

	// PostUploadStickerFileWithBodyWithResponse request with any body
	PostUploadStickerFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadStickerFileResponse, error)

	// PostUserLoginWithBodyWithResponse request with any body
	PostUserLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error)

	PostUserLoginWithResponse(ctx context.Context, body PostUserLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error)

	PostUserLoginWithFormdataBodyWithResponse(ctx context.Context, body PostUserLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error)
}

type PostAddChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAddChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAddProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Contains a proxy definition.
		Result Proxy `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAddProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAddStickerToSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAddStickerToSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddStickerToSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnswerCallbackQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAnswerCallbackQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnswerCallbackQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnswerInlineQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAnswerInlineQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnswerInlineQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnswerPreCheckoutQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAnswerPreCheckoutQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnswerPreCheckoutQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnswerShippingQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAnswerShippingQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnswerShippingQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
		Result AuthorizationState `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAuthCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
		Result AuthorizationState `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostAuthPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCloseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostCloseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCloseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCopyMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a unique message identifier.
		Result MessageId `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostCopyMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCopyMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a chat.
		Result Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostCreateChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateNewStickerSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostCreateNewStickerSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateNewStickerSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteChatHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteChatHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteChatHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteChatPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteChatPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteChatPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteChatStickerSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteChatStickerSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteChatStickerSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteStickerFromSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteStickerFromSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteStickerFromSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDisableProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostDisableProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDisableProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageCaptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                              `json:"ok"`
		Result PostEditMessageCaption_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostEditMessageCaption200Result1 = bool
type PostEditMessageCaption_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostEditMessageCaptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageCaptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageLiveLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                                   `json:"ok"`
		Result PostEditMessageLiveLocation_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostEditMessageLiveLocation200Result1 = bool
type PostEditMessageLiveLocation_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostEditMessageLiveLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageLiveLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                            `json:"ok"`
		Result PostEditMessageMedia_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostEditMessageMedia200Result1 = bool
type PostEditMessageMedia_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostEditMessageMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageReplyMarkupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                                  `json:"ok"`
		Result PostEditMessageReplyMarkup_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostEditMessageReplyMarkup200Result1 = bool
type PostEditMessageReplyMarkup_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostEditMessageReplyMarkupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageReplyMarkupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageSchedulingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostEditMessageSchedulingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageSchedulingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEditMessageTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                           `json:"ok"`
		Result PostEditMessageText_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostEditMessageText200Result1 = bool
type PostEditMessageText_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostEditMessageTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEditMessageTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnableProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostEnableProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnableProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExportChatInviteLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result string `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostExportChatInviteLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExportChatInviteLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostForwardMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostForwardMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostForwardMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetCallbackQueryAnswerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Contains a bot's answer to a callback query.
		Result CallbackQueryAnswer `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetCallbackQueryAnswerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetCallbackQueryAnswerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a chat.
		Result Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatAdministratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool         `json:"ok"`
		Result []ChatMember `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatAdministratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatAdministratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object contains information about one member of a chat.
		Result ChatMember `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool         `json:"ok"`
		Result []ChatMember `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatMembersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result int  `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatMembersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatMembersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result []Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetCommonChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result []Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetCommonChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetCommonChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
		//
		// Maximum file size to download is 20 MB
		Result File `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetGameHighScoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool            `json:"ok"`
		Result []GameHighScore `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetGameHighScoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetGameHighScoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetInactiveChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result []Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetInactiveChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetInactiveChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a Telegram user or bot.
		Result User `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetMemoryStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGetMemoryStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetMemoryStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetMessageInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetMessageInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetMessageInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetMyCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool         `json:"ok"`
		Result []BotCommand `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetMyCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetMyCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetNearbyChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result []Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetNearbyChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetNearbyChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetProxiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool    `json:"ok"`
		Result []Proxy `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetProxiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetProxiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetScheduledMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool      `json:"ok"`
		Result []Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetScheduledMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetScheduledMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetStickerSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a sticker set.
		Result StickerSet `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetStickerSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetStickerSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool     `json:"ok"`
		Result []Update `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetUserProfilePhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represent a user's profile pictures.
		Result UserProfilePhotos `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetUserProfilePhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetUserProfilePhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetWebhookInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Contains information about the current status of a webhook.
		Result WebhookInfo `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostGetWebhookInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetWebhookInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJoinChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostJoinChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJoinChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostKickChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostKickChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostKickChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLeaveChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostLeaveChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLeaveChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLogOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostLogOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLogOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOptimizeMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostOptimizeMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOptimizeMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPinChatMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostPinChatMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPinChatMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool    `json:"ok"`
		Result float32 `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPromoteChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostPromoteChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPromoteChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
		Result AuthorizationState `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostRegisterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReportChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostReportChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReportChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRestrictChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostRestrictChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRestrictChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchChatMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool      `json:"ok"`
		Result []Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSearchChatMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchChatMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool      `json:"ok"`
		Result []Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSearchMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchPublicChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool   `json:"ok"`
		Result []Chat `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSearchPublicChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchPublicChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendAnimationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendAnimationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendAnimationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendAudioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendAudioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendAudioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendChatActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendChatActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendChatActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendDiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendDiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendDiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendMediaGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool      `json:"ok"`
		Result []Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendMediaGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendMediaGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendPollResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendPollResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendPollResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendStickerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendStickerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendStickerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendVenueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendVenueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendVenueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendVideoNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendVideoNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendVideoNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendVoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a message.
		Result Message `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSendVoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendVoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatAdministratorCustomTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatAdministratorCustomTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatAdministratorCustomTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatStickerSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatStickerSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatStickerSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetChatTitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetChatTitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetChatTitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetGameScoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                        `json:"ok"`
		Result PostSetGameScore_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostSetGameScore200Result1 = bool
type PostSetGameScore_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostSetGameScoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetGameScoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetMyCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetMyCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetMyCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetPassportDataErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetPassportDataErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetPassportDataErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetPollAnswerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetPollAnswerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetPollAnswerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetStickerPositionInSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetStickerPositionInSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetStickerPositionInSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetStickerSetThumbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetStickerSetThumbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetStickerSetThumbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostSetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStopMessageLiveLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool                                   `json:"ok"`
		Result PostStopMessageLiveLocation_200_Result `json:"result"`
	}
	JSONDefault *Error
}
type PostStopMessageLiveLocation200Result1 = bool
type PostStopMessageLiveLocation_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostStopMessageLiveLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStopMessageLiveLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStopPollResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object contains information about a poll.
		Result Poll `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostStopPollResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStopPollResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnbanChatMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostUnbanChatMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnbanChatMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnpinAllChatMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostUnpinAllChatMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnpinAllChatMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnpinChatMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok     bool `json:"ok"`
		Result bool `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostUnpinChatMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnpinChatMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadStickerFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
		//
		// Maximum file size to download is 20 MB
		Result File `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostUploadStickerFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadStickerFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ok bool `json:"ok"`

		// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
		Result AuthorizationState `json:"result"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r PostUserLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAddChatMemberWithBodyWithResponse request with arbitrary body returning *PostAddChatMemberResponse
func (c *ClientWithResponses) PostAddChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error) {
	rsp, err := c.PostAddChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostAddChatMemberWithResponse(ctx context.Context, body PostAddChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error) {
	rsp, err := c.PostAddChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostAddChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostAddChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAddChatMemberResponse, error) {
	rsp, err := c.PostAddChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddChatMemberResponse(rsp)
}

// PostAddProxyWithBodyWithResponse request with arbitrary body returning *PostAddProxyResponse
func (c *ClientWithResponses) PostAddProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error) {
	rsp, err := c.PostAddProxyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddProxyResponse(rsp)
}

func (c *ClientWithResponses) PostAddProxyWithResponse(ctx context.Context, body PostAddProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error) {
	rsp, err := c.PostAddProxy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddProxyResponse(rsp)
}

func (c *ClientWithResponses) PostAddProxyWithFormdataBodyWithResponse(ctx context.Context, body PostAddProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAddProxyResponse, error) {
	rsp, err := c.PostAddProxyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddProxyResponse(rsp)
}

// PostAddStickerToSetWithBodyWithResponse request with arbitrary body returning *PostAddStickerToSetResponse
func (c *ClientWithResponses) PostAddStickerToSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddStickerToSetResponse, error) {
	rsp, err := c.PostAddStickerToSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddStickerToSetResponse(rsp)
}

// PostAnswerCallbackQueryWithBodyWithResponse request with arbitrary body returning *PostAnswerCallbackQueryResponse
func (c *ClientWithResponses) PostAnswerCallbackQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error) {
	rsp, err := c.PostAnswerCallbackQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerCallbackQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerCallbackQueryWithResponse(ctx context.Context, body PostAnswerCallbackQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error) {
	rsp, err := c.PostAnswerCallbackQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerCallbackQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerCallbackQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerCallbackQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerCallbackQueryResponse, error) {
	rsp, err := c.PostAnswerCallbackQueryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerCallbackQueryResponse(rsp)
}

// PostAnswerInlineQueryWithBodyWithResponse request with arbitrary body returning *PostAnswerInlineQueryResponse
func (c *ClientWithResponses) PostAnswerInlineQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error) {
	rsp, err := c.PostAnswerInlineQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerInlineQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerInlineQueryWithResponse(ctx context.Context, body PostAnswerInlineQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error) {
	rsp, err := c.PostAnswerInlineQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerInlineQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerInlineQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerInlineQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerInlineQueryResponse, error) {
	rsp, err := c.PostAnswerInlineQueryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerInlineQueryResponse(rsp)
}

// PostAnswerPreCheckoutQueryWithBodyWithResponse request with arbitrary body returning *PostAnswerPreCheckoutQueryResponse
func (c *ClientWithResponses) PostAnswerPreCheckoutQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error) {
	rsp, err := c.PostAnswerPreCheckoutQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerPreCheckoutQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerPreCheckoutQueryWithResponse(ctx context.Context, body PostAnswerPreCheckoutQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error) {
	rsp, err := c.PostAnswerPreCheckoutQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerPreCheckoutQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerPreCheckoutQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerPreCheckoutQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerPreCheckoutQueryResponse, error) {
	rsp, err := c.PostAnswerPreCheckoutQueryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerPreCheckoutQueryResponse(rsp)
}

// PostAnswerShippingQueryWithBodyWithResponse request with arbitrary body returning *PostAnswerShippingQueryResponse
func (c *ClientWithResponses) PostAnswerShippingQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error) {
	rsp, err := c.PostAnswerShippingQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerShippingQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerShippingQueryWithResponse(ctx context.Context, body PostAnswerShippingQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error) {
	rsp, err := c.PostAnswerShippingQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerShippingQueryResponse(rsp)
}

func (c *ClientWithResponses) PostAnswerShippingQueryWithFormdataBodyWithResponse(ctx context.Context, body PostAnswerShippingQueryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAnswerShippingQueryResponse, error) {
	rsp, err := c.PostAnswerShippingQueryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnswerShippingQueryResponse(rsp)
}

// PostAuthCodeWithBodyWithResponse request with arbitrary body returning *PostAuthCodeResponse
func (c *ClientWithResponses) PostAuthCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error) {
	rsp, err := c.PostAuthCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCodeResponse(rsp)
}

func (c *ClientWithResponses) PostAuthCodeWithResponse(ctx context.Context, body PostAuthCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error) {
	rsp, err := c.PostAuthCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCodeResponse(rsp)
}

func (c *ClientWithResponses) PostAuthCodeWithFormdataBodyWithResponse(ctx context.Context, body PostAuthCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthCodeResponse, error) {
	rsp, err := c.PostAuthCodeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCodeResponse(rsp)
}

// PostAuthPasswordWithBodyWithResponse request with arbitrary body returning *PostAuthPasswordResponse
func (c *ClientWithResponses) PostAuthPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error) {
	rsp, err := c.PostAuthPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAuthPasswordWithResponse(ctx context.Context, body PostAuthPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error) {
	rsp, err := c.PostAuthPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAuthPasswordWithFormdataBodyWithResponse(ctx context.Context, body PostAuthPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResponse, error) {
	rsp, err := c.PostAuthPasswordWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPasswordResponse(rsp)
}

// PostCloseWithResponse request returning *PostCloseResponse
func (c *ClientWithResponses) PostCloseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCloseResponse, error) {
	rsp, err := c.PostClose(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCloseResponse(rsp)
}

// PostCopyMessageWithBodyWithResponse request with arbitrary body returning *PostCopyMessageResponse
func (c *ClientWithResponses) PostCopyMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error) {
	rsp, err := c.PostCopyMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCopyMessageResponse(rsp)
}

func (c *ClientWithResponses) PostCopyMessageWithResponse(ctx context.Context, body PostCopyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error) {
	rsp, err := c.PostCopyMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCopyMessageResponse(rsp)
}

func (c *ClientWithResponses) PostCopyMessageWithFormdataBodyWithResponse(ctx context.Context, body PostCopyMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostCopyMessageResponse, error) {
	rsp, err := c.PostCopyMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCopyMessageResponse(rsp)
}

// PostCreateChatWithBodyWithResponse request with arbitrary body returning *PostCreateChatResponse
func (c *ClientWithResponses) PostCreateChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error) {
	rsp, err := c.PostCreateChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateChatResponse(rsp)
}

func (c *ClientWithResponses) PostCreateChatWithResponse(ctx context.Context, body PostCreateChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error) {
	rsp, err := c.PostCreateChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateChatResponse(rsp)
}

func (c *ClientWithResponses) PostCreateChatWithFormdataBodyWithResponse(ctx context.Context, body PostCreateChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostCreateChatResponse, error) {
	rsp, err := c.PostCreateChatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateChatResponse(rsp)
}

// PostCreateNewStickerSetWithBodyWithResponse request with arbitrary body returning *PostCreateNewStickerSetResponse
func (c *ClientWithResponses) PostCreateNewStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateNewStickerSetResponse, error) {
	rsp, err := c.PostCreateNewStickerSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateNewStickerSetResponse(rsp)
}

// PostDeleteChatHistoryWithBodyWithResponse request with arbitrary body returning *PostDeleteChatHistoryResponse
func (c *ClientWithResponses) PostDeleteChatHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error) {
	rsp, err := c.PostDeleteChatHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatHistoryWithResponse(ctx context.Context, body PostDeleteChatHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error) {
	rsp, err := c.PostDeleteChatHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatHistoryWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatHistoryFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatHistoryResponse, error) {
	rsp, err := c.PostDeleteChatHistoryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatHistoryResponse(rsp)
}

// PostDeleteChatPhotoWithBodyWithResponse request with arbitrary body returning *PostDeleteChatPhotoResponse
func (c *ClientWithResponses) PostDeleteChatPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error) {
	rsp, err := c.PostDeleteChatPhotoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatPhotoResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatPhotoWithResponse(ctx context.Context, body PostDeleteChatPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error) {
	rsp, err := c.PostDeleteChatPhoto(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatPhotoResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatPhotoWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatPhotoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatPhotoResponse, error) {
	rsp, err := c.PostDeleteChatPhotoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatPhotoResponse(rsp)
}

// PostDeleteChatStickerSetWithBodyWithResponse request with arbitrary body returning *PostDeleteChatStickerSetResponse
func (c *ClientWithResponses) PostDeleteChatStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error) {
	rsp, err := c.PostDeleteChatStickerSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatStickerSetWithResponse(ctx context.Context, body PostDeleteChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error) {
	rsp, err := c.PostDeleteChatStickerSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteChatStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteChatStickerSetResponse, error) {
	rsp, err := c.PostDeleteChatStickerSetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteChatStickerSetResponse(rsp)
}

// PostDeleteMessageWithBodyWithResponse request with arbitrary body returning *PostDeleteMessageResponse
func (c *ClientWithResponses) PostDeleteMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error) {
	rsp, err := c.PostDeleteMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessageResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteMessageWithResponse(ctx context.Context, body PostDeleteMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error) {
	rsp, err := c.PostDeleteMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessageResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteMessageWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessageResponse, error) {
	rsp, err := c.PostDeleteMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessageResponse(rsp)
}

// PostDeleteMessagesWithBodyWithResponse request with arbitrary body returning *PostDeleteMessagesResponse
func (c *ClientWithResponses) PostDeleteMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error) {
	rsp, err := c.PostDeleteMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteMessagesWithResponse(ctx context.Context, body PostDeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error) {
	rsp, err := c.PostDeleteMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteMessagesResponse, error) {
	rsp, err := c.PostDeleteMessagesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteMessagesResponse(rsp)
}

// PostDeleteProxyWithBodyWithResponse request with arbitrary body returning *PostDeleteProxyResponse
func (c *ClientWithResponses) PostDeleteProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error) {
	rsp, err := c.PostDeleteProxyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteProxyResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteProxyWithResponse(ctx context.Context, body PostDeleteProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error) {
	rsp, err := c.PostDeleteProxy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteProxyResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteProxyWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteProxyResponse, error) {
	rsp, err := c.PostDeleteProxyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteProxyResponse(rsp)
}

// PostDeleteStickerFromSetWithBodyWithResponse request with arbitrary body returning *PostDeleteStickerFromSetResponse
func (c *ClientWithResponses) PostDeleteStickerFromSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error) {
	rsp, err := c.PostDeleteStickerFromSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteStickerFromSetResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteStickerFromSetWithResponse(ctx context.Context, body PostDeleteStickerFromSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error) {
	rsp, err := c.PostDeleteStickerFromSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteStickerFromSetResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteStickerFromSetWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteStickerFromSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteStickerFromSetResponse, error) {
	rsp, err := c.PostDeleteStickerFromSetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteStickerFromSetResponse(rsp)
}

// PostDeleteWebhookWithBodyWithResponse request with arbitrary body returning *PostDeleteWebhookResponse
func (c *ClientWithResponses) PostDeleteWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error) {
	rsp, err := c.PostDeleteWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteWebhookWithResponse(ctx context.Context, body PostDeleteWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error) {
	rsp, err := c.PostDeleteWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostDeleteWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostDeleteWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDeleteWebhookResponse, error) {
	rsp, err := c.PostDeleteWebhookWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeleteWebhookResponse(rsp)
}

// PostDisableProxyWithBodyWithResponse request with arbitrary body returning *PostDisableProxyResponse
func (c *ClientWithResponses) PostDisableProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error) {
	rsp, err := c.PostDisableProxyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisableProxyResponse(rsp)
}

func (c *ClientWithResponses) PostDisableProxyWithResponse(ctx context.Context, body PostDisableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error) {
	rsp, err := c.PostDisableProxy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisableProxyResponse(rsp)
}

func (c *ClientWithResponses) PostDisableProxyWithFormdataBodyWithResponse(ctx context.Context, body PostDisableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProxyResponse, error) {
	rsp, err := c.PostDisableProxyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisableProxyResponse(rsp)
}

// PostEditMessageCaptionWithBodyWithResponse request with arbitrary body returning *PostEditMessageCaptionResponse
func (c *ClientWithResponses) PostEditMessageCaptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error) {
	rsp, err := c.PostEditMessageCaptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageCaptionResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageCaptionWithResponse(ctx context.Context, body PostEditMessageCaptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error) {
	rsp, err := c.PostEditMessageCaption(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageCaptionResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageCaptionWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageCaptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageCaptionResponse, error) {
	rsp, err := c.PostEditMessageCaptionWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageCaptionResponse(rsp)
}

// PostEditMessageLiveLocationWithBodyWithResponse request with arbitrary body returning *PostEditMessageLiveLocationResponse
func (c *ClientWithResponses) PostEditMessageLiveLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error) {
	rsp, err := c.PostEditMessageLiveLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageLiveLocationResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageLiveLocationWithResponse(ctx context.Context, body PostEditMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error) {
	rsp, err := c.PostEditMessageLiveLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageLiveLocationResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageLiveLocationWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageLiveLocationResponse, error) {
	rsp, err := c.PostEditMessageLiveLocationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageLiveLocationResponse(rsp)
}

// PostEditMessageMediaWithBodyWithResponse request with arbitrary body returning *PostEditMessageMediaResponse
func (c *ClientWithResponses) PostEditMessageMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageMediaResponse, error) {
	rsp, err := c.PostEditMessageMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageMediaResponse(rsp)
}

// PostEditMessageReplyMarkupWithBodyWithResponse request with arbitrary body returning *PostEditMessageReplyMarkupResponse
func (c *ClientWithResponses) PostEditMessageReplyMarkupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error) {
	rsp, err := c.PostEditMessageReplyMarkupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageReplyMarkupResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageReplyMarkupWithResponse(ctx context.Context, body PostEditMessageReplyMarkupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error) {
	rsp, err := c.PostEditMessageReplyMarkup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageReplyMarkupResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageReplyMarkupWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageReplyMarkupFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageReplyMarkupResponse, error) {
	rsp, err := c.PostEditMessageReplyMarkupWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageReplyMarkupResponse(rsp)
}

// PostEditMessageSchedulingWithBodyWithResponse request with arbitrary body returning *PostEditMessageSchedulingResponse
func (c *ClientWithResponses) PostEditMessageSchedulingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error) {
	rsp, err := c.PostEditMessageSchedulingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageSchedulingResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageSchedulingWithResponse(ctx context.Context, body PostEditMessageSchedulingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error) {
	rsp, err := c.PostEditMessageScheduling(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageSchedulingResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageSchedulingWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageSchedulingFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageSchedulingResponse, error) {
	rsp, err := c.PostEditMessageSchedulingWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageSchedulingResponse(rsp)
}

// PostEditMessageTextWithBodyWithResponse request with arbitrary body returning *PostEditMessageTextResponse
func (c *ClientWithResponses) PostEditMessageTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error) {
	rsp, err := c.PostEditMessageTextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageTextResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageTextWithResponse(ctx context.Context, body PostEditMessageTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error) {
	rsp, err := c.PostEditMessageText(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageTextResponse(rsp)
}

func (c *ClientWithResponses) PostEditMessageTextWithFormdataBodyWithResponse(ctx context.Context, body PostEditMessageTextFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEditMessageTextResponse, error) {
	rsp, err := c.PostEditMessageTextWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEditMessageTextResponse(rsp)
}

// PostEnableProxyWithBodyWithResponse request with arbitrary body returning *PostEnableProxyResponse
func (c *ClientWithResponses) PostEnableProxyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error) {
	rsp, err := c.PostEnableProxyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnableProxyResponse(rsp)
}

func (c *ClientWithResponses) PostEnableProxyWithResponse(ctx context.Context, body PostEnableProxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error) {
	rsp, err := c.PostEnableProxy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnableProxyResponse(rsp)
}

func (c *ClientWithResponses) PostEnableProxyWithFormdataBodyWithResponse(ctx context.Context, body PostEnableProxyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProxyResponse, error) {
	rsp, err := c.PostEnableProxyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnableProxyResponse(rsp)
}

// PostExportChatInviteLinkWithBodyWithResponse request with arbitrary body returning *PostExportChatInviteLinkResponse
func (c *ClientWithResponses) PostExportChatInviteLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error) {
	rsp, err := c.PostExportChatInviteLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExportChatInviteLinkResponse(rsp)
}

func (c *ClientWithResponses) PostExportChatInviteLinkWithResponse(ctx context.Context, body PostExportChatInviteLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error) {
	rsp, err := c.PostExportChatInviteLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExportChatInviteLinkResponse(rsp)
}

func (c *ClientWithResponses) PostExportChatInviteLinkWithFormdataBodyWithResponse(ctx context.Context, body PostExportChatInviteLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostExportChatInviteLinkResponse, error) {
	rsp, err := c.PostExportChatInviteLinkWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExportChatInviteLinkResponse(rsp)
}

// PostForwardMessageWithBodyWithResponse request with arbitrary body returning *PostForwardMessageResponse
func (c *ClientWithResponses) PostForwardMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error) {
	rsp, err := c.PostForwardMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostForwardMessageResponse(rsp)
}

func (c *ClientWithResponses) PostForwardMessageWithResponse(ctx context.Context, body PostForwardMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error) {
	rsp, err := c.PostForwardMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostForwardMessageResponse(rsp)
}

func (c *ClientWithResponses) PostForwardMessageWithFormdataBodyWithResponse(ctx context.Context, body PostForwardMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostForwardMessageResponse, error) {
	rsp, err := c.PostForwardMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostForwardMessageResponse(rsp)
}

// PostGetCallbackQueryAnswerWithBodyWithResponse request with arbitrary body returning *PostGetCallbackQueryAnswerResponse
func (c *ClientWithResponses) PostGetCallbackQueryAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error) {
	rsp, err := c.PostGetCallbackQueryAnswerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCallbackQueryAnswerResponse(rsp)
}

func (c *ClientWithResponses) PostGetCallbackQueryAnswerWithResponse(ctx context.Context, body PostGetCallbackQueryAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error) {
	rsp, err := c.PostGetCallbackQueryAnswer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCallbackQueryAnswerResponse(rsp)
}

func (c *ClientWithResponses) PostGetCallbackQueryAnswerWithFormdataBodyWithResponse(ctx context.Context, body PostGetCallbackQueryAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetCallbackQueryAnswerResponse, error) {
	rsp, err := c.PostGetCallbackQueryAnswerWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCallbackQueryAnswerResponse(rsp)
}

// PostGetChatWithBodyWithResponse request with arbitrary body returning *PostGetChatResponse
func (c *ClientWithResponses) PostGetChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error) {
	rsp, err := c.PostGetChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatWithResponse(ctx context.Context, body PostGetChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error) {
	rsp, err := c.PostGetChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatResponse, error) {
	rsp, err := c.PostGetChatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatResponse(rsp)
}

// PostGetChatAdministratorsWithBodyWithResponse request with arbitrary body returning *PostGetChatAdministratorsResponse
func (c *ClientWithResponses) PostGetChatAdministratorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error) {
	rsp, err := c.PostGetChatAdministratorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatAdministratorsResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatAdministratorsWithResponse(ctx context.Context, body PostGetChatAdministratorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error) {
	rsp, err := c.PostGetChatAdministrators(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatAdministratorsResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatAdministratorsWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatAdministratorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatAdministratorsResponse, error) {
	rsp, err := c.PostGetChatAdministratorsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatAdministratorsResponse(rsp)
}

// PostGetChatMemberWithBodyWithResponse request with arbitrary body returning *PostGetChatMemberResponse
func (c *ClientWithResponses) PostGetChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error) {
	rsp, err := c.PostGetChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMemberWithResponse(ctx context.Context, body PostGetChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error) {
	rsp, err := c.PostGetChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMemberResponse, error) {
	rsp, err := c.PostGetChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMemberResponse(rsp)
}

// PostGetChatMembersWithBodyWithResponse request with arbitrary body returning *PostGetChatMembersResponse
func (c *ClientWithResponses) PostGetChatMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error) {
	rsp, err := c.PostGetChatMembersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMembersWithResponse(ctx context.Context, body PostGetChatMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error) {
	rsp, err := c.PostGetChatMembers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMembersWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMembersFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersResponse, error) {
	rsp, err := c.PostGetChatMembersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersResponse(rsp)
}

// PostGetChatMembersCountWithBodyWithResponse request with arbitrary body returning *PostGetChatMembersCountResponse
func (c *ClientWithResponses) PostGetChatMembersCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error) {
	rsp, err := c.PostGetChatMembersCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersCountResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMembersCountWithResponse(ctx context.Context, body PostGetChatMembersCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error) {
	rsp, err := c.PostGetChatMembersCount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersCountResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatMembersCountWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatMembersCountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatMembersCountResponse, error) {
	rsp, err := c.PostGetChatMembersCountWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatMembersCountResponse(rsp)
}

// PostGetChatsWithBodyWithResponse request with arbitrary body returning *PostGetChatsResponse
func (c *ClientWithResponses) PostGetChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error) {
	rsp, err := c.PostGetChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatsWithResponse(ctx context.Context, body PostGetChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error) {
	rsp, err := c.PostGetChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetChatsResponse, error) {
	rsp, err := c.PostGetChatsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetChatsResponse(rsp)
}

// PostGetCommonChatsWithBodyWithResponse request with arbitrary body returning *PostGetCommonChatsResponse
func (c *ClientWithResponses) PostGetCommonChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error) {
	rsp, err := c.PostGetCommonChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCommonChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetCommonChatsWithResponse(ctx context.Context, body PostGetCommonChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error) {
	rsp, err := c.PostGetCommonChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCommonChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetCommonChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetCommonChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetCommonChatsResponse, error) {
	rsp, err := c.PostGetCommonChatsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetCommonChatsResponse(rsp)
}

// PostGetFileWithBodyWithResponse request with arbitrary body returning *PostGetFileResponse
func (c *ClientWithResponses) PostGetFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error) {
	rsp, err := c.PostGetFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetFileResponse(rsp)
}

func (c *ClientWithResponses) PostGetFileWithResponse(ctx context.Context, body PostGetFileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error) {
	rsp, err := c.PostGetFile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetFileResponse(rsp)
}

func (c *ClientWithResponses) PostGetFileWithFormdataBodyWithResponse(ctx context.Context, body PostGetFileFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetFileResponse, error) {
	rsp, err := c.PostGetFileWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetFileResponse(rsp)
}

// PostGetGameHighScoresWithBodyWithResponse request with arbitrary body returning *PostGetGameHighScoresResponse
func (c *ClientWithResponses) PostGetGameHighScoresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error) {
	rsp, err := c.PostGetGameHighScoresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetGameHighScoresResponse(rsp)
}

func (c *ClientWithResponses) PostGetGameHighScoresWithResponse(ctx context.Context, body PostGetGameHighScoresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error) {
	rsp, err := c.PostGetGameHighScores(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetGameHighScoresResponse(rsp)
}

func (c *ClientWithResponses) PostGetGameHighScoresWithFormdataBodyWithResponse(ctx context.Context, body PostGetGameHighScoresFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetGameHighScoresResponse, error) {
	rsp, err := c.PostGetGameHighScoresWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetGameHighScoresResponse(rsp)
}

// PostGetInactiveChatsWithResponse request returning *PostGetInactiveChatsResponse
func (c *ClientWithResponses) PostGetInactiveChatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetInactiveChatsResponse, error) {
	rsp, err := c.PostGetInactiveChats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetInactiveChatsResponse(rsp)
}

// PostGetMeWithResponse request returning *PostGetMeResponse
func (c *ClientWithResponses) PostGetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMeResponse, error) {
	rsp, err := c.PostGetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMeResponse(rsp)
}

// PostGetMemoryStatsWithResponse request returning *PostGetMemoryStatsResponse
func (c *ClientWithResponses) PostGetMemoryStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMemoryStatsResponse, error) {
	rsp, err := c.PostGetMemoryStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMemoryStatsResponse(rsp)
}

// PostGetMessageInfoWithBodyWithResponse request with arbitrary body returning *PostGetMessageInfoResponse
func (c *ClientWithResponses) PostGetMessageInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error) {
	rsp, err := c.PostGetMessageInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMessageInfoResponse(rsp)
}

func (c *ClientWithResponses) PostGetMessageInfoWithResponse(ctx context.Context, body PostGetMessageInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error) {
	rsp, err := c.PostGetMessageInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMessageInfoResponse(rsp)
}

func (c *ClientWithResponses) PostGetMessageInfoWithFormdataBodyWithResponse(ctx context.Context, body PostGetMessageInfoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetMessageInfoResponse, error) {
	rsp, err := c.PostGetMessageInfoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMessageInfoResponse(rsp)
}

// PostGetMyCommandsWithResponse request returning *PostGetMyCommandsResponse
func (c *ClientWithResponses) PostGetMyCommandsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetMyCommandsResponse, error) {
	rsp, err := c.PostGetMyCommands(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetMyCommandsResponse(rsp)
}

// PostGetNearbyChatsWithBodyWithResponse request with arbitrary body returning *PostGetNearbyChatsResponse
func (c *ClientWithResponses) PostGetNearbyChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error) {
	rsp, err := c.PostGetNearbyChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetNearbyChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetNearbyChatsWithResponse(ctx context.Context, body PostGetNearbyChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error) {
	rsp, err := c.PostGetNearbyChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetNearbyChatsResponse(rsp)
}

func (c *ClientWithResponses) PostGetNearbyChatsWithFormdataBodyWithResponse(ctx context.Context, body PostGetNearbyChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetNearbyChatsResponse, error) {
	rsp, err := c.PostGetNearbyChatsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetNearbyChatsResponse(rsp)
}

// PostGetProxiesWithResponse request returning *PostGetProxiesResponse
func (c *ClientWithResponses) PostGetProxiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetProxiesResponse, error) {
	rsp, err := c.PostGetProxies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetProxiesResponse(rsp)
}

// PostGetScheduledMessagesWithBodyWithResponse request with arbitrary body returning *PostGetScheduledMessagesResponse
func (c *ClientWithResponses) PostGetScheduledMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error) {
	rsp, err := c.PostGetScheduledMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetScheduledMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostGetScheduledMessagesWithResponse(ctx context.Context, body PostGetScheduledMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error) {
	rsp, err := c.PostGetScheduledMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetScheduledMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostGetScheduledMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostGetScheduledMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetScheduledMessagesResponse, error) {
	rsp, err := c.PostGetScheduledMessagesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetScheduledMessagesResponse(rsp)
}

// PostGetStickerSetWithBodyWithResponse request with arbitrary body returning *PostGetStickerSetResponse
func (c *ClientWithResponses) PostGetStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error) {
	rsp, err := c.PostGetStickerSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostGetStickerSetWithResponse(ctx context.Context, body PostGetStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error) {
	rsp, err := c.PostGetStickerSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostGetStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostGetStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetStickerSetResponse, error) {
	rsp, err := c.PostGetStickerSetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetStickerSetResponse(rsp)
}

// PostGetUpdatesWithBodyWithResponse request with arbitrary body returning *PostGetUpdatesResponse
func (c *ClientWithResponses) PostGetUpdatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error) {
	rsp, err := c.PostGetUpdatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUpdatesResponse(rsp)
}

func (c *ClientWithResponses) PostGetUpdatesWithResponse(ctx context.Context, body PostGetUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error) {
	rsp, err := c.PostGetUpdates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUpdatesResponse(rsp)
}

func (c *ClientWithResponses) PostGetUpdatesWithFormdataBodyWithResponse(ctx context.Context, body PostGetUpdatesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetUpdatesResponse, error) {
	rsp, err := c.PostGetUpdatesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUpdatesResponse(rsp)
}

// PostGetUserProfilePhotosWithBodyWithResponse request with arbitrary body returning *PostGetUserProfilePhotosResponse
func (c *ClientWithResponses) PostGetUserProfilePhotosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error) {
	rsp, err := c.PostGetUserProfilePhotosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUserProfilePhotosResponse(rsp)
}

func (c *ClientWithResponses) PostGetUserProfilePhotosWithResponse(ctx context.Context, body PostGetUserProfilePhotosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error) {
	rsp, err := c.PostGetUserProfilePhotos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUserProfilePhotosResponse(rsp)
}

func (c *ClientWithResponses) PostGetUserProfilePhotosWithFormdataBodyWithResponse(ctx context.Context, body PostGetUserProfilePhotosFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGetUserProfilePhotosResponse, error) {
	rsp, err := c.PostGetUserProfilePhotosWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetUserProfilePhotosResponse(rsp)
}

// PostGetWebhookInfoWithResponse request returning *PostGetWebhookInfoResponse
func (c *ClientWithResponses) PostGetWebhookInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGetWebhookInfoResponse, error) {
	rsp, err := c.PostGetWebhookInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetWebhookInfoResponse(rsp)
}

// PostJoinChatWithBodyWithResponse request with arbitrary body returning *PostJoinChatResponse
func (c *ClientWithResponses) PostJoinChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error) {
	rsp, err := c.PostJoinChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJoinChatResponse(rsp)
}

func (c *ClientWithResponses) PostJoinChatWithResponse(ctx context.Context, body PostJoinChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error) {
	rsp, err := c.PostJoinChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJoinChatResponse(rsp)
}

func (c *ClientWithResponses) PostJoinChatWithFormdataBodyWithResponse(ctx context.Context, body PostJoinChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostJoinChatResponse, error) {
	rsp, err := c.PostJoinChatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJoinChatResponse(rsp)
}

// PostKickChatMemberWithBodyWithResponse request with arbitrary body returning *PostKickChatMemberResponse
func (c *ClientWithResponses) PostKickChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error) {
	rsp, err := c.PostKickChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKickChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostKickChatMemberWithResponse(ctx context.Context, body PostKickChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error) {
	rsp, err := c.PostKickChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKickChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostKickChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostKickChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostKickChatMemberResponse, error) {
	rsp, err := c.PostKickChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostKickChatMemberResponse(rsp)
}

// PostLeaveChatWithBodyWithResponse request with arbitrary body returning *PostLeaveChatResponse
func (c *ClientWithResponses) PostLeaveChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error) {
	rsp, err := c.PostLeaveChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLeaveChatResponse(rsp)
}

func (c *ClientWithResponses) PostLeaveChatWithResponse(ctx context.Context, body PostLeaveChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error) {
	rsp, err := c.PostLeaveChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLeaveChatResponse(rsp)
}

func (c *ClientWithResponses) PostLeaveChatWithFormdataBodyWithResponse(ctx context.Context, body PostLeaveChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveChatResponse, error) {
	rsp, err := c.PostLeaveChatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLeaveChatResponse(rsp)
}

// PostLogOutWithResponse request returning *PostLogOutResponse
func (c *ClientWithResponses) PostLogOutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLogOutResponse, error) {
	rsp, err := c.PostLogOut(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogOutResponse(rsp)
}

// PostOptimizeMemoryWithResponse request returning *PostOptimizeMemoryResponse
func (c *ClientWithResponses) PostOptimizeMemoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOptimizeMemoryResponse, error) {
	rsp, err := c.PostOptimizeMemory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOptimizeMemoryResponse(rsp)
}

// PostPinChatMessageWithBodyWithResponse request with arbitrary body returning *PostPinChatMessageResponse
func (c *ClientWithResponses) PostPinChatMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error) {
	rsp, err := c.PostPinChatMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinChatMessageResponse(rsp)
}

func (c *ClientWithResponses) PostPinChatMessageWithResponse(ctx context.Context, body PostPinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error) {
	rsp, err := c.PostPinChatMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinChatMessageResponse(rsp)
}

func (c *ClientWithResponses) PostPinChatMessageWithFormdataBodyWithResponse(ctx context.Context, body PostPinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPinChatMessageResponse, error) {
	rsp, err := c.PostPinChatMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinChatMessageResponse(rsp)
}

// PostPingWithResponse request returning *PostPingResponse
func (c *ClientWithResponses) PostPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPingResponse, error) {
	rsp, err := c.PostPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPingResponse(rsp)
}

// PostPromoteChatMemberWithBodyWithResponse request with arbitrary body returning *PostPromoteChatMemberResponse
func (c *ClientWithResponses) PostPromoteChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error) {
	rsp, err := c.PostPromoteChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromoteChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostPromoteChatMemberWithResponse(ctx context.Context, body PostPromoteChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error) {
	rsp, err := c.PostPromoteChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromoteChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostPromoteChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostPromoteChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPromoteChatMemberResponse, error) {
	rsp, err := c.PostPromoteChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPromoteChatMemberResponse(rsp)
}

// PostRegisterUserWithBodyWithResponse request with arbitrary body returning *PostRegisterUserResponse
func (c *ClientWithResponses) PostRegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error) {
	rsp, err := c.PostRegisterUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterUserResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterUserWithResponse(ctx context.Context, body PostRegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error) {
	rsp, err := c.PostRegisterUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterUserResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterUserWithFormdataBodyWithResponse(ctx context.Context, body PostRegisterUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterUserResponse, error) {
	rsp, err := c.PostRegisterUserWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterUserResponse(rsp)
}

// PostReportChatWithBodyWithResponse request with arbitrary body returning *PostReportChatResponse
func (c *ClientWithResponses) PostReportChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error) {
	rsp, err := c.PostReportChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportChatResponse(rsp)
}

func (c *ClientWithResponses) PostReportChatWithResponse(ctx context.Context, body PostReportChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error) {
	rsp, err := c.PostReportChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportChatResponse(rsp)
}

func (c *ClientWithResponses) PostReportChatWithFormdataBodyWithResponse(ctx context.Context, body PostReportChatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostReportChatResponse, error) {
	rsp, err := c.PostReportChatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReportChatResponse(rsp)
}

// PostRestrictChatMemberWithBodyWithResponse request with arbitrary body returning *PostRestrictChatMemberResponse
func (c *ClientWithResponses) PostRestrictChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error) {
	rsp, err := c.PostRestrictChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestrictChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostRestrictChatMemberWithResponse(ctx context.Context, body PostRestrictChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error) {
	rsp, err := c.PostRestrictChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestrictChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostRestrictChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostRestrictChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostRestrictChatMemberResponse, error) {
	rsp, err := c.PostRestrictChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestrictChatMemberResponse(rsp)
}

// PostSearchChatMessagesWithBodyWithResponse request with arbitrary body returning *PostSearchChatMessagesResponse
func (c *ClientWithResponses) PostSearchChatMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error) {
	rsp, err := c.PostSearchChatMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchChatMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostSearchChatMessagesWithResponse(ctx context.Context, body PostSearchChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error) {
	rsp, err := c.PostSearchChatMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchChatMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostSearchChatMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostSearchChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchChatMessagesResponse, error) {
	rsp, err := c.PostSearchChatMessagesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchChatMessagesResponse(rsp)
}

// PostSearchMessagesWithBodyWithResponse request with arbitrary body returning *PostSearchMessagesResponse
func (c *ClientWithResponses) PostSearchMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error) {
	rsp, err := c.PostSearchMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostSearchMessagesWithResponse(ctx context.Context, body PostSearchMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error) {
	rsp, err := c.PostSearchMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostSearchMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostSearchMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchMessagesResponse, error) {
	rsp, err := c.PostSearchMessagesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchMessagesResponse(rsp)
}

// PostSearchPublicChatsWithBodyWithResponse request with arbitrary body returning *PostSearchPublicChatsResponse
func (c *ClientWithResponses) PostSearchPublicChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error) {
	rsp, err := c.PostSearchPublicChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchPublicChatsResponse(rsp)
}

func (c *ClientWithResponses) PostSearchPublicChatsWithResponse(ctx context.Context, body PostSearchPublicChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error) {
	rsp, err := c.PostSearchPublicChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchPublicChatsResponse(rsp)
}

func (c *ClientWithResponses) PostSearchPublicChatsWithFormdataBodyWithResponse(ctx context.Context, body PostSearchPublicChatsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSearchPublicChatsResponse, error) {
	rsp, err := c.PostSearchPublicChatsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchPublicChatsResponse(rsp)
}

// PostSendAnimationWithBodyWithResponse request with arbitrary body returning *PostSendAnimationResponse
func (c *ClientWithResponses) PostSendAnimationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendAnimationResponse, error) {
	rsp, err := c.PostSendAnimationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendAnimationResponse(rsp)
}

// PostSendAudioWithBodyWithResponse request with arbitrary body returning *PostSendAudioResponse
func (c *ClientWithResponses) PostSendAudioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendAudioResponse, error) {
	rsp, err := c.PostSendAudioWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendAudioResponse(rsp)
}

// PostSendChatActionWithBodyWithResponse request with arbitrary body returning *PostSendChatActionResponse
func (c *ClientWithResponses) PostSendChatActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error) {
	rsp, err := c.PostSendChatActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendChatActionResponse(rsp)
}

func (c *ClientWithResponses) PostSendChatActionWithResponse(ctx context.Context, body PostSendChatActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error) {
	rsp, err := c.PostSendChatAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendChatActionResponse(rsp)
}

func (c *ClientWithResponses) PostSendChatActionWithFormdataBodyWithResponse(ctx context.Context, body PostSendChatActionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendChatActionResponse, error) {
	rsp, err := c.PostSendChatActionWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendChatActionResponse(rsp)
}

// PostSendContactWithBodyWithResponse request with arbitrary body returning *PostSendContactResponse
func (c *ClientWithResponses) PostSendContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error) {
	rsp, err := c.PostSendContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendContactResponse(rsp)
}

func (c *ClientWithResponses) PostSendContactWithResponse(ctx context.Context, body PostSendContactJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error) {
	rsp, err := c.PostSendContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendContactResponse(rsp)
}

func (c *ClientWithResponses) PostSendContactWithFormdataBodyWithResponse(ctx context.Context, body PostSendContactFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendContactResponse, error) {
	rsp, err := c.PostSendContactWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendContactResponse(rsp)
}

// PostSendDiceWithBodyWithResponse request with arbitrary body returning *PostSendDiceResponse
func (c *ClientWithResponses) PostSendDiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error) {
	rsp, err := c.PostSendDiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendDiceResponse(rsp)
}

func (c *ClientWithResponses) PostSendDiceWithResponse(ctx context.Context, body PostSendDiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error) {
	rsp, err := c.PostSendDice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendDiceResponse(rsp)
}

func (c *ClientWithResponses) PostSendDiceWithFormdataBodyWithResponse(ctx context.Context, body PostSendDiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendDiceResponse, error) {
	rsp, err := c.PostSendDiceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendDiceResponse(rsp)
}

// PostSendDocumentWithBodyWithResponse request with arbitrary body returning *PostSendDocumentResponse
func (c *ClientWithResponses) PostSendDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendDocumentResponse, error) {
	rsp, err := c.PostSendDocumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendDocumentResponse(rsp)
}

// PostSendGameWithBodyWithResponse request with arbitrary body returning *PostSendGameResponse
func (c *ClientWithResponses) PostSendGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error) {
	rsp, err := c.PostSendGameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendGameResponse(rsp)
}

func (c *ClientWithResponses) PostSendGameWithResponse(ctx context.Context, body PostSendGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error) {
	rsp, err := c.PostSendGame(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendGameResponse(rsp)
}

func (c *ClientWithResponses) PostSendGameWithFormdataBodyWithResponse(ctx context.Context, body PostSendGameFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendGameResponse, error) {
	rsp, err := c.PostSendGameWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendGameResponse(rsp)
}

// PostSendInvoiceWithBodyWithResponse request with arbitrary body returning *PostSendInvoiceResponse
func (c *ClientWithResponses) PostSendInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error) {
	rsp, err := c.PostSendInvoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PostSendInvoiceWithResponse(ctx context.Context, body PostSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error) {
	rsp, err := c.PostSendInvoice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PostSendInvoiceWithFormdataBodyWithResponse(ctx context.Context, body PostSendInvoiceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendInvoiceResponse, error) {
	rsp, err := c.PostSendInvoiceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendInvoiceResponse(rsp)
}

// PostSendLocationWithBodyWithResponse request with arbitrary body returning *PostSendLocationResponse
func (c *ClientWithResponses) PostSendLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error) {
	rsp, err := c.PostSendLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendLocationResponse(rsp)
}

func (c *ClientWithResponses) PostSendLocationWithResponse(ctx context.Context, body PostSendLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error) {
	rsp, err := c.PostSendLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendLocationResponse(rsp)
}

func (c *ClientWithResponses) PostSendLocationWithFormdataBodyWithResponse(ctx context.Context, body PostSendLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendLocationResponse, error) {
	rsp, err := c.PostSendLocationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendLocationResponse(rsp)
}

// PostSendMediaGroupWithBodyWithResponse request with arbitrary body returning *PostSendMediaGroupResponse
func (c *ClientWithResponses) PostSendMediaGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMediaGroupResponse, error) {
	rsp, err := c.PostSendMediaGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMediaGroupResponse(rsp)
}

// PostSendMessageWithBodyWithResponse request with arbitrary body returning *PostSendMessageResponse
func (c *ClientWithResponses) PostSendMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error) {
	rsp, err := c.PostSendMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMessageResponse(rsp)
}

func (c *ClientWithResponses) PostSendMessageWithResponse(ctx context.Context, body PostSendMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error) {
	rsp, err := c.PostSendMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMessageResponse(rsp)
}

func (c *ClientWithResponses) PostSendMessageWithFormdataBodyWithResponse(ctx context.Context, body PostSendMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendMessageResponse, error) {
	rsp, err := c.PostSendMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMessageResponse(rsp)
}

// PostSendPhotoWithBodyWithResponse request with arbitrary body returning *PostSendPhotoResponse
func (c *ClientWithResponses) PostSendPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendPhotoResponse, error) {
	rsp, err := c.PostSendPhotoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendPhotoResponse(rsp)
}

// PostSendPollWithBodyWithResponse request with arbitrary body returning *PostSendPollResponse
func (c *ClientWithResponses) PostSendPollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error) {
	rsp, err := c.PostSendPollWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendPollResponse(rsp)
}

func (c *ClientWithResponses) PostSendPollWithResponse(ctx context.Context, body PostSendPollJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error) {
	rsp, err := c.PostSendPoll(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendPollResponse(rsp)
}

func (c *ClientWithResponses) PostSendPollWithFormdataBodyWithResponse(ctx context.Context, body PostSendPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendPollResponse, error) {
	rsp, err := c.PostSendPollWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendPollResponse(rsp)
}

// PostSendStickerWithBodyWithResponse request with arbitrary body returning *PostSendStickerResponse
func (c *ClientWithResponses) PostSendStickerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendStickerResponse, error) {
	rsp, err := c.PostSendStickerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendStickerResponse(rsp)
}

// PostSendVenueWithBodyWithResponse request with arbitrary body returning *PostSendVenueResponse
func (c *ClientWithResponses) PostSendVenueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error) {
	rsp, err := c.PostSendVenueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVenueResponse(rsp)
}

func (c *ClientWithResponses) PostSendVenueWithResponse(ctx context.Context, body PostSendVenueJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error) {
	rsp, err := c.PostSendVenue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVenueResponse(rsp)
}

func (c *ClientWithResponses) PostSendVenueWithFormdataBodyWithResponse(ctx context.Context, body PostSendVenueFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendVenueResponse, error) {
	rsp, err := c.PostSendVenueWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVenueResponse(rsp)
}

// PostSendVideoWithBodyWithResponse request with arbitrary body returning *PostSendVideoResponse
func (c *ClientWithResponses) PostSendVideoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVideoResponse, error) {
	rsp, err := c.PostSendVideoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVideoResponse(rsp)
}

// PostSendVideoNoteWithBodyWithResponse request with arbitrary body returning *PostSendVideoNoteResponse
func (c *ClientWithResponses) PostSendVideoNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVideoNoteResponse, error) {
	rsp, err := c.PostSendVideoNoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVideoNoteResponse(rsp)
}

// PostSendVoiceWithBodyWithResponse request with arbitrary body returning *PostSendVoiceResponse
func (c *ClientWithResponses) PostSendVoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendVoiceResponse, error) {
	rsp, err := c.PostSendVoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendVoiceResponse(rsp)
}

// PostSetChatAdministratorCustomTitleWithBodyWithResponse request with arbitrary body returning *PostSetChatAdministratorCustomTitleResponse
func (c *ClientWithResponses) PostSetChatAdministratorCustomTitleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error) {
	rsp, err := c.PostSetChatAdministratorCustomTitleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatAdministratorCustomTitleResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatAdministratorCustomTitleWithResponse(ctx context.Context, body PostSetChatAdministratorCustomTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error) {
	rsp, err := c.PostSetChatAdministratorCustomTitle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatAdministratorCustomTitleResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatAdministratorCustomTitleWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatAdministratorCustomTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatAdministratorCustomTitleResponse, error) {
	rsp, err := c.PostSetChatAdministratorCustomTitleWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatAdministratorCustomTitleResponse(rsp)
}

// PostSetChatDescriptionWithBodyWithResponse request with arbitrary body returning *PostSetChatDescriptionResponse
func (c *ClientWithResponses) PostSetChatDescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error) {
	rsp, err := c.PostSetChatDescriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatDescriptionResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatDescriptionWithResponse(ctx context.Context, body PostSetChatDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error) {
	rsp, err := c.PostSetChatDescription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatDescriptionResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatDescriptionWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatDescriptionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatDescriptionResponse, error) {
	rsp, err := c.PostSetChatDescriptionWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatDescriptionResponse(rsp)
}

// PostSetChatPermissionsWithBodyWithResponse request with arbitrary body returning *PostSetChatPermissionsResponse
func (c *ClientWithResponses) PostSetChatPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error) {
	rsp, err := c.PostSetChatPermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatPermissionsWithResponse(ctx context.Context, body PostSetChatPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error) {
	rsp, err := c.PostSetChatPermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatPermissionsWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatPermissionsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatPermissionsResponse, error) {
	rsp, err := c.PostSetChatPermissionsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatPermissionsResponse(rsp)
}

// PostSetChatPhotoWithBodyWithResponse request with arbitrary body returning *PostSetChatPhotoResponse
func (c *ClientWithResponses) PostSetChatPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatPhotoResponse, error) {
	rsp, err := c.PostSetChatPhotoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatPhotoResponse(rsp)
}

// PostSetChatStickerSetWithBodyWithResponse request with arbitrary body returning *PostSetChatStickerSetResponse
func (c *ClientWithResponses) PostSetChatStickerSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error) {
	rsp, err := c.PostSetChatStickerSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatStickerSetWithResponse(ctx context.Context, body PostSetChatStickerSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error) {
	rsp, err := c.PostSetChatStickerSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatStickerSetResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatStickerSetWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatStickerSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatStickerSetResponse, error) {
	rsp, err := c.PostSetChatStickerSetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatStickerSetResponse(rsp)
}

// PostSetChatTitleWithBodyWithResponse request with arbitrary body returning *PostSetChatTitleResponse
func (c *ClientWithResponses) PostSetChatTitleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error) {
	rsp, err := c.PostSetChatTitleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatTitleResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatTitleWithResponse(ctx context.Context, body PostSetChatTitleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error) {
	rsp, err := c.PostSetChatTitle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatTitleResponse(rsp)
}

func (c *ClientWithResponses) PostSetChatTitleWithFormdataBodyWithResponse(ctx context.Context, body PostSetChatTitleFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetChatTitleResponse, error) {
	rsp, err := c.PostSetChatTitleWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetChatTitleResponse(rsp)
}

// PostSetGameScoreWithBodyWithResponse request with arbitrary body returning *PostSetGameScoreResponse
func (c *ClientWithResponses) PostSetGameScoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error) {
	rsp, err := c.PostSetGameScoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetGameScoreResponse(rsp)
}

func (c *ClientWithResponses) PostSetGameScoreWithResponse(ctx context.Context, body PostSetGameScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error) {
	rsp, err := c.PostSetGameScore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetGameScoreResponse(rsp)
}

func (c *ClientWithResponses) PostSetGameScoreWithFormdataBodyWithResponse(ctx context.Context, body PostSetGameScoreFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetGameScoreResponse, error) {
	rsp, err := c.PostSetGameScoreWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetGameScoreResponse(rsp)
}

// PostSetMyCommandsWithBodyWithResponse request with arbitrary body returning *PostSetMyCommandsResponse
func (c *ClientWithResponses) PostSetMyCommandsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error) {
	rsp, err := c.PostSetMyCommandsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetMyCommandsResponse(rsp)
}

func (c *ClientWithResponses) PostSetMyCommandsWithResponse(ctx context.Context, body PostSetMyCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error) {
	rsp, err := c.PostSetMyCommands(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetMyCommandsResponse(rsp)
}

func (c *ClientWithResponses) PostSetMyCommandsWithFormdataBodyWithResponse(ctx context.Context, body PostSetMyCommandsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetMyCommandsResponse, error) {
	rsp, err := c.PostSetMyCommandsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetMyCommandsResponse(rsp)
}

// PostSetPassportDataErrorsWithBodyWithResponse request with arbitrary body returning *PostSetPassportDataErrorsResponse
func (c *ClientWithResponses) PostSetPassportDataErrorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error) {
	rsp, err := c.PostSetPassportDataErrorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPassportDataErrorsResponse(rsp)
}

func (c *ClientWithResponses) PostSetPassportDataErrorsWithResponse(ctx context.Context, body PostSetPassportDataErrorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error) {
	rsp, err := c.PostSetPassportDataErrors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPassportDataErrorsResponse(rsp)
}

func (c *ClientWithResponses) PostSetPassportDataErrorsWithFormdataBodyWithResponse(ctx context.Context, body PostSetPassportDataErrorsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetPassportDataErrorsResponse, error) {
	rsp, err := c.PostSetPassportDataErrorsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPassportDataErrorsResponse(rsp)
}

// PostSetPollAnswerWithBodyWithResponse request with arbitrary body returning *PostSetPollAnswerResponse
func (c *ClientWithResponses) PostSetPollAnswerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error) {
	rsp, err := c.PostSetPollAnswerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPollAnswerResponse(rsp)
}

func (c *ClientWithResponses) PostSetPollAnswerWithResponse(ctx context.Context, body PostSetPollAnswerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error) {
	rsp, err := c.PostSetPollAnswer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPollAnswerResponse(rsp)
}

func (c *ClientWithResponses) PostSetPollAnswerWithFormdataBodyWithResponse(ctx context.Context, body PostSetPollAnswerFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetPollAnswerResponse, error) {
	rsp, err := c.PostSetPollAnswerWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetPollAnswerResponse(rsp)
}

// PostSetStickerPositionInSetWithBodyWithResponse request with arbitrary body returning *PostSetStickerPositionInSetResponse
func (c *ClientWithResponses) PostSetStickerPositionInSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error) {
	rsp, err := c.PostSetStickerPositionInSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetStickerPositionInSetResponse(rsp)
}

func (c *ClientWithResponses) PostSetStickerPositionInSetWithResponse(ctx context.Context, body PostSetStickerPositionInSetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error) {
	rsp, err := c.PostSetStickerPositionInSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetStickerPositionInSetResponse(rsp)
}

func (c *ClientWithResponses) PostSetStickerPositionInSetWithFormdataBodyWithResponse(ctx context.Context, body PostSetStickerPositionInSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSetStickerPositionInSetResponse, error) {
	rsp, err := c.PostSetStickerPositionInSetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetStickerPositionInSetResponse(rsp)
}

// PostSetStickerSetThumbWithBodyWithResponse request with arbitrary body returning *PostSetStickerSetThumbResponse
func (c *ClientWithResponses) PostSetStickerSetThumbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetStickerSetThumbResponse, error) {
	rsp, err := c.PostSetStickerSetThumbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetStickerSetThumbResponse(rsp)
}

// PostSetWebhookWithBodyWithResponse request with arbitrary body returning *PostSetWebhookResponse
func (c *ClientWithResponses) PostSetWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSetWebhookResponse, error) {
	rsp, err := c.PostSetWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSetWebhookResponse(rsp)
}

// PostStopMessageLiveLocationWithBodyWithResponse request with arbitrary body returning *PostStopMessageLiveLocationResponse
func (c *ClientWithResponses) PostStopMessageLiveLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error) {
	rsp, err := c.PostStopMessageLiveLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopMessageLiveLocationResponse(rsp)
}

func (c *ClientWithResponses) PostStopMessageLiveLocationWithResponse(ctx context.Context, body PostStopMessageLiveLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error) {
	rsp, err := c.PostStopMessageLiveLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopMessageLiveLocationResponse(rsp)
}

func (c *ClientWithResponses) PostStopMessageLiveLocationWithFormdataBodyWithResponse(ctx context.Context, body PostStopMessageLiveLocationFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStopMessageLiveLocationResponse, error) {
	rsp, err := c.PostStopMessageLiveLocationWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopMessageLiveLocationResponse(rsp)
}

// PostStopPollWithBodyWithResponse request with arbitrary body returning *PostStopPollResponse
func (c *ClientWithResponses) PostStopPollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error) {
	rsp, err := c.PostStopPollWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopPollResponse(rsp)
}

func (c *ClientWithResponses) PostStopPollWithResponse(ctx context.Context, body PostStopPollJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error) {
	rsp, err := c.PostStopPoll(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopPollResponse(rsp)
}

func (c *ClientWithResponses) PostStopPollWithFormdataBodyWithResponse(ctx context.Context, body PostStopPollFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStopPollResponse, error) {
	rsp, err := c.PostStopPollWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStopPollResponse(rsp)
}

// PostUnbanChatMemberWithBodyWithResponse request with arbitrary body returning *PostUnbanChatMemberResponse
func (c *ClientWithResponses) PostUnbanChatMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error) {
	rsp, err := c.PostUnbanChatMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnbanChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostUnbanChatMemberWithResponse(ctx context.Context, body PostUnbanChatMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error) {
	rsp, err := c.PostUnbanChatMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnbanChatMemberResponse(rsp)
}

func (c *ClientWithResponses) PostUnbanChatMemberWithFormdataBodyWithResponse(ctx context.Context, body PostUnbanChatMemberFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnbanChatMemberResponse, error) {
	rsp, err := c.PostUnbanChatMemberWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnbanChatMemberResponse(rsp)
}

// PostUnpinAllChatMessagesWithBodyWithResponse request with arbitrary body returning *PostUnpinAllChatMessagesResponse
func (c *ClientWithResponses) PostUnpinAllChatMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error) {
	rsp, err := c.PostUnpinAllChatMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinAllChatMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostUnpinAllChatMessagesWithResponse(ctx context.Context, body PostUnpinAllChatMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error) {
	rsp, err := c.PostUnpinAllChatMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinAllChatMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostUnpinAllChatMessagesWithFormdataBodyWithResponse(ctx context.Context, body PostUnpinAllChatMessagesFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinAllChatMessagesResponse, error) {
	rsp, err := c.PostUnpinAllChatMessagesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinAllChatMessagesResponse(rsp)
}

// PostUnpinChatMessageWithBodyWithResponse request with arbitrary body returning *PostUnpinChatMessageResponse
func (c *ClientWithResponses) PostUnpinChatMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error) {
	rsp, err := c.PostUnpinChatMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinChatMessageResponse(rsp)
}

func (c *ClientWithResponses) PostUnpinChatMessageWithResponse(ctx context.Context, body PostUnpinChatMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error) {
	rsp, err := c.PostUnpinChatMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinChatMessageResponse(rsp)
}

func (c *ClientWithResponses) PostUnpinChatMessageWithFormdataBodyWithResponse(ctx context.Context, body PostUnpinChatMessageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUnpinChatMessageResponse, error) {
	rsp, err := c.PostUnpinChatMessageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnpinChatMessageResponse(rsp)
}

// PostUploadStickerFileWithBodyWithResponse request with arbitrary body returning *PostUploadStickerFileResponse
func (c *ClientWithResponses) PostUploadStickerFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadStickerFileResponse, error) {
	rsp, err := c.PostUploadStickerFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadStickerFileResponse(rsp)
}

// PostUserLoginWithBodyWithResponse request with arbitrary body returning *PostUserLoginResponse
func (c *ClientWithResponses) PostUserLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error) {
	rsp, err := c.PostUserLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserLoginResponse(rsp)
}

func (c *ClientWithResponses) PostUserLoginWithResponse(ctx context.Context, body PostUserLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error) {
	rsp, err := c.PostUserLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserLoginResponse(rsp)
}

func (c *ClientWithResponses) PostUserLoginWithFormdataBodyWithResponse(ctx context.Context, body PostUserLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUserLoginResponse, error) {
	rsp, err := c.PostUserLoginWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserLoginResponse(rsp)
}

// ParsePostAddChatMemberResponse parses an HTTP response from a PostAddChatMemberWithResponse call
func ParsePostAddChatMemberResponse(rsp *http.Response) (*PostAddChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAddProxyResponse parses an HTTP response from a PostAddProxyWithResponse call
func ParsePostAddProxyResponse(rsp *http.Response) (*PostAddProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Contains a proxy definition.
			Result Proxy `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAddStickerToSetResponse parses an HTTP response from a PostAddStickerToSetWithResponse call
func ParsePostAddStickerToSetResponse(rsp *http.Response) (*PostAddStickerToSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddStickerToSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAnswerCallbackQueryResponse parses an HTTP response from a PostAnswerCallbackQueryWithResponse call
func ParsePostAnswerCallbackQueryResponse(rsp *http.Response) (*PostAnswerCallbackQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnswerCallbackQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAnswerInlineQueryResponse parses an HTTP response from a PostAnswerInlineQueryWithResponse call
func ParsePostAnswerInlineQueryResponse(rsp *http.Response) (*PostAnswerInlineQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnswerInlineQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAnswerPreCheckoutQueryResponse parses an HTTP response from a PostAnswerPreCheckoutQueryWithResponse call
func ParsePostAnswerPreCheckoutQueryResponse(rsp *http.Response) (*PostAnswerPreCheckoutQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnswerPreCheckoutQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAnswerShippingQueryResponse parses an HTTP response from a PostAnswerShippingQueryWithResponse call
func ParsePostAnswerShippingQueryResponse(rsp *http.Response) (*PostAnswerShippingQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnswerShippingQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAuthCodeResponse parses an HTTP response from a PostAuthCodeWithResponse call
func ParsePostAuthCodeResponse(rsp *http.Response) (*PostAuthCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
			Result AuthorizationState `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAuthPasswordResponse parses an HTTP response from a PostAuthPasswordWithResponse call
func ParsePostAuthPasswordResponse(rsp *http.Response) (*PostAuthPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
			Result AuthorizationState `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCloseResponse parses an HTTP response from a PostCloseWithResponse call
func ParsePostCloseResponse(rsp *http.Response) (*PostCloseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCloseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCopyMessageResponse parses an HTTP response from a PostCopyMessageWithResponse call
func ParsePostCopyMessageResponse(rsp *http.Response) (*PostCopyMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCopyMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a unique message identifier.
			Result MessageId `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCreateChatResponse parses an HTTP response from a PostCreateChatWithResponse call
func ParsePostCreateChatResponse(rsp *http.Response) (*PostCreateChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a chat.
			Result Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCreateNewStickerSetResponse parses an HTTP response from a PostCreateNewStickerSetWithResponse call
func ParsePostCreateNewStickerSetResponse(rsp *http.Response) (*PostCreateNewStickerSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateNewStickerSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteChatHistoryResponse parses an HTTP response from a PostDeleteChatHistoryWithResponse call
func ParsePostDeleteChatHistoryResponse(rsp *http.Response) (*PostDeleteChatHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteChatHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteChatPhotoResponse parses an HTTP response from a PostDeleteChatPhotoWithResponse call
func ParsePostDeleteChatPhotoResponse(rsp *http.Response) (*PostDeleteChatPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteChatPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteChatStickerSetResponse parses an HTTP response from a PostDeleteChatStickerSetWithResponse call
func ParsePostDeleteChatStickerSetResponse(rsp *http.Response) (*PostDeleteChatStickerSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteChatStickerSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteMessageResponse parses an HTTP response from a PostDeleteMessageWithResponse call
func ParsePostDeleteMessageResponse(rsp *http.Response) (*PostDeleteMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteMessagesResponse parses an HTTP response from a PostDeleteMessagesWithResponse call
func ParsePostDeleteMessagesResponse(rsp *http.Response) (*PostDeleteMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteProxyResponse parses an HTTP response from a PostDeleteProxyWithResponse call
func ParsePostDeleteProxyResponse(rsp *http.Response) (*PostDeleteProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteStickerFromSetResponse parses an HTTP response from a PostDeleteStickerFromSetWithResponse call
func ParsePostDeleteStickerFromSetResponse(rsp *http.Response) (*PostDeleteStickerFromSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteStickerFromSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDeleteWebhookResponse parses an HTTP response from a PostDeleteWebhookWithResponse call
func ParsePostDeleteWebhookResponse(rsp *http.Response) (*PostDeleteWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostDisableProxyResponse parses an HTTP response from a PostDisableProxyWithResponse call
func ParsePostDisableProxyResponse(rsp *http.Response) (*PostDisableProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDisableProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageCaptionResponse parses an HTTP response from a PostEditMessageCaptionWithResponse call
func ParsePostEditMessageCaptionResponse(rsp *http.Response) (*PostEditMessageCaptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageCaptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                              `json:"ok"`
			Result PostEditMessageCaption_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageLiveLocationResponse parses an HTTP response from a PostEditMessageLiveLocationWithResponse call
func ParsePostEditMessageLiveLocationResponse(rsp *http.Response) (*PostEditMessageLiveLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageLiveLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                                   `json:"ok"`
			Result PostEditMessageLiveLocation_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageMediaResponse parses an HTTP response from a PostEditMessageMediaWithResponse call
func ParsePostEditMessageMediaResponse(rsp *http.Response) (*PostEditMessageMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                            `json:"ok"`
			Result PostEditMessageMedia_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageReplyMarkupResponse parses an HTTP response from a PostEditMessageReplyMarkupWithResponse call
func ParsePostEditMessageReplyMarkupResponse(rsp *http.Response) (*PostEditMessageReplyMarkupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageReplyMarkupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                                  `json:"ok"`
			Result PostEditMessageReplyMarkup_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageSchedulingResponse parses an HTTP response from a PostEditMessageSchedulingWithResponse call
func ParsePostEditMessageSchedulingResponse(rsp *http.Response) (*PostEditMessageSchedulingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageSchedulingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEditMessageTextResponse parses an HTTP response from a PostEditMessageTextWithResponse call
func ParsePostEditMessageTextResponse(rsp *http.Response) (*PostEditMessageTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEditMessageTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                           `json:"ok"`
			Result PostEditMessageText_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEnableProxyResponse parses an HTTP response from a PostEnableProxyWithResponse call
func ParsePostEnableProxyResponse(rsp *http.Response) (*PostEnableProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnableProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostExportChatInviteLinkResponse parses an HTTP response from a PostExportChatInviteLinkWithResponse call
func ParsePostExportChatInviteLinkResponse(rsp *http.Response) (*PostExportChatInviteLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExportChatInviteLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result string `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostForwardMessageResponse parses an HTTP response from a PostForwardMessageWithResponse call
func ParsePostForwardMessageResponse(rsp *http.Response) (*PostForwardMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostForwardMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetCallbackQueryAnswerResponse parses an HTTP response from a PostGetCallbackQueryAnswerWithResponse call
func ParsePostGetCallbackQueryAnswerResponse(rsp *http.Response) (*PostGetCallbackQueryAnswerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetCallbackQueryAnswerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Contains a bot's answer to a callback query.
			Result CallbackQueryAnswer `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatResponse parses an HTTP response from a PostGetChatWithResponse call
func ParsePostGetChatResponse(rsp *http.Response) (*PostGetChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a chat.
			Result Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatAdministratorsResponse parses an HTTP response from a PostGetChatAdministratorsWithResponse call
func ParsePostGetChatAdministratorsResponse(rsp *http.Response) (*PostGetChatAdministratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatAdministratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool         `json:"ok"`
			Result []ChatMember `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatMemberResponse parses an HTTP response from a PostGetChatMemberWithResponse call
func ParsePostGetChatMemberResponse(rsp *http.Response) (*PostGetChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object contains information about one member of a chat.
			Result ChatMember `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatMembersResponse parses an HTTP response from a PostGetChatMembersWithResponse call
func ParsePostGetChatMembersResponse(rsp *http.Response) (*PostGetChatMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool         `json:"ok"`
			Result []ChatMember `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatMembersCountResponse parses an HTTP response from a PostGetChatMembersCountWithResponse call
func ParsePostGetChatMembersCountResponse(rsp *http.Response) (*PostGetChatMembersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatMembersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result int  `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetChatsResponse parses an HTTP response from a PostGetChatsWithResponse call
func ParsePostGetChatsResponse(rsp *http.Response) (*PostGetChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result []Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetCommonChatsResponse parses an HTTP response from a PostGetCommonChatsWithResponse call
func ParsePostGetCommonChatsResponse(rsp *http.Response) (*PostGetCommonChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetCommonChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result []Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetFileResponse parses an HTTP response from a PostGetFileWithResponse call
func ParsePostGetFileResponse(rsp *http.Response) (*PostGetFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
			//
			// Maximum file size to download is 20 MB
			Result File `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetGameHighScoresResponse parses an HTTP response from a PostGetGameHighScoresWithResponse call
func ParsePostGetGameHighScoresResponse(rsp *http.Response) (*PostGetGameHighScoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetGameHighScoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool            `json:"ok"`
			Result []GameHighScore `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetInactiveChatsResponse parses an HTTP response from a PostGetInactiveChatsWithResponse call
func ParsePostGetInactiveChatsResponse(rsp *http.Response) (*PostGetInactiveChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetInactiveChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result []Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetMeResponse parses an HTTP response from a PostGetMeWithResponse call
func ParsePostGetMeResponse(rsp *http.Response) (*PostGetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a Telegram user or bot.
			Result User `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetMemoryStatsResponse parses an HTTP response from a PostGetMemoryStatsWithResponse call
func ParsePostGetMemoryStatsResponse(rsp *http.Response) (*PostGetMemoryStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetMemoryStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGetMessageInfoResponse parses an HTTP response from a PostGetMessageInfoWithResponse call
func ParsePostGetMessageInfoResponse(rsp *http.Response) (*PostGetMessageInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetMessageInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetMyCommandsResponse parses an HTTP response from a PostGetMyCommandsWithResponse call
func ParsePostGetMyCommandsResponse(rsp *http.Response) (*PostGetMyCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetMyCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool         `json:"ok"`
			Result []BotCommand `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetNearbyChatsResponse parses an HTTP response from a PostGetNearbyChatsWithResponse call
func ParsePostGetNearbyChatsResponse(rsp *http.Response) (*PostGetNearbyChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetNearbyChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result []Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetProxiesResponse parses an HTTP response from a PostGetProxiesWithResponse call
func ParsePostGetProxiesResponse(rsp *http.Response) (*PostGetProxiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetProxiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool    `json:"ok"`
			Result []Proxy `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetScheduledMessagesResponse parses an HTTP response from a PostGetScheduledMessagesWithResponse call
func ParsePostGetScheduledMessagesResponse(rsp *http.Response) (*PostGetScheduledMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetScheduledMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool      `json:"ok"`
			Result []Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetStickerSetResponse parses an HTTP response from a PostGetStickerSetWithResponse call
func ParsePostGetStickerSetResponse(rsp *http.Response) (*PostGetStickerSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetStickerSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a sticker set.
			Result StickerSet `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetUpdatesResponse parses an HTTP response from a PostGetUpdatesWithResponse call
func ParsePostGetUpdatesResponse(rsp *http.Response) (*PostGetUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool     `json:"ok"`
			Result []Update `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetUserProfilePhotosResponse parses an HTTP response from a PostGetUserProfilePhotosWithResponse call
func ParsePostGetUserProfilePhotosResponse(rsp *http.Response) (*PostGetUserProfilePhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetUserProfilePhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represent a user's profile pictures.
			Result UserProfilePhotos `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGetWebhookInfoResponse parses an HTTP response from a PostGetWebhookInfoWithResponse call
func ParsePostGetWebhookInfoResponse(rsp *http.Response) (*PostGetWebhookInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetWebhookInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Contains information about the current status of a webhook.
			Result WebhookInfo `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostJoinChatResponse parses an HTTP response from a PostJoinChatWithResponse call
func ParsePostJoinChatResponse(rsp *http.Response) (*PostJoinChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJoinChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostKickChatMemberResponse parses an HTTP response from a PostKickChatMemberWithResponse call
func ParsePostKickChatMemberResponse(rsp *http.Response) (*PostKickChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostKickChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLeaveChatResponse parses an HTTP response from a PostLeaveChatWithResponse call
func ParsePostLeaveChatResponse(rsp *http.Response) (*PostLeaveChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLeaveChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLogOutResponse parses an HTTP response from a PostLogOutWithResponse call
func ParsePostLogOutResponse(rsp *http.Response) (*PostLogOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLogOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOptimizeMemoryResponse parses an HTTP response from a PostOptimizeMemoryWithResponse call
func ParsePostOptimizeMemoryResponse(rsp *http.Response) (*PostOptimizeMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOptimizeMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPinChatMessageResponse parses an HTTP response from a PostPinChatMessageWithResponse call
func ParsePostPinChatMessageResponse(rsp *http.Response) (*PostPinChatMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPinChatMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPingResponse parses an HTTP response from a PostPingWithResponse call
func ParsePostPingResponse(rsp *http.Response) (*PostPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool    `json:"ok"`
			Result float32 `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPromoteChatMemberResponse parses an HTTP response from a PostPromoteChatMemberWithResponse call
func ParsePostPromoteChatMemberResponse(rsp *http.Response) (*PostPromoteChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPromoteChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostRegisterUserResponse parses an HTTP response from a PostRegisterUserWithResponse call
func ParsePostRegisterUserResponse(rsp *http.Response) (*PostRegisterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
			Result AuthorizationState `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostReportChatResponse parses an HTTP response from a PostReportChatWithResponse call
func ParsePostReportChatResponse(rsp *http.Response) (*PostReportChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReportChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostRestrictChatMemberResponse parses an HTTP response from a PostRestrictChatMemberWithResponse call
func ParsePostRestrictChatMemberResponse(rsp *http.Response) (*PostRestrictChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRestrictChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSearchChatMessagesResponse parses an HTTP response from a PostSearchChatMessagesWithResponse call
func ParsePostSearchChatMessagesResponse(rsp *http.Response) (*PostSearchChatMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchChatMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool      `json:"ok"`
			Result []Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSearchMessagesResponse parses an HTTP response from a PostSearchMessagesWithResponse call
func ParsePostSearchMessagesResponse(rsp *http.Response) (*PostSearchMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool      `json:"ok"`
			Result []Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSearchPublicChatsResponse parses an HTTP response from a PostSearchPublicChatsWithResponse call
func ParsePostSearchPublicChatsResponse(rsp *http.Response) (*PostSearchPublicChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchPublicChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool   `json:"ok"`
			Result []Chat `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendAnimationResponse parses an HTTP response from a PostSendAnimationWithResponse call
func ParsePostSendAnimationResponse(rsp *http.Response) (*PostSendAnimationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendAnimationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendAudioResponse parses an HTTP response from a PostSendAudioWithResponse call
func ParsePostSendAudioResponse(rsp *http.Response) (*PostSendAudioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendAudioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendChatActionResponse parses an HTTP response from a PostSendChatActionWithResponse call
func ParsePostSendChatActionResponse(rsp *http.Response) (*PostSendChatActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendChatActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendContactResponse parses an HTTP response from a PostSendContactWithResponse call
func ParsePostSendContactResponse(rsp *http.Response) (*PostSendContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendDiceResponse parses an HTTP response from a PostSendDiceWithResponse call
func ParsePostSendDiceResponse(rsp *http.Response) (*PostSendDiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendDiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendDocumentResponse parses an HTTP response from a PostSendDocumentWithResponse call
func ParsePostSendDocumentResponse(rsp *http.Response) (*PostSendDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendGameResponse parses an HTTP response from a PostSendGameWithResponse call
func ParsePostSendGameResponse(rsp *http.Response) (*PostSendGameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendInvoiceResponse parses an HTTP response from a PostSendInvoiceWithResponse call
func ParsePostSendInvoiceResponse(rsp *http.Response) (*PostSendInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendLocationResponse parses an HTTP response from a PostSendLocationWithResponse call
func ParsePostSendLocationResponse(rsp *http.Response) (*PostSendLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendMediaGroupResponse parses an HTTP response from a PostSendMediaGroupWithResponse call
func ParsePostSendMediaGroupResponse(rsp *http.Response) (*PostSendMediaGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendMediaGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool      `json:"ok"`
			Result []Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendMessageResponse parses an HTTP response from a PostSendMessageWithResponse call
func ParsePostSendMessageResponse(rsp *http.Response) (*PostSendMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendPhotoResponse parses an HTTP response from a PostSendPhotoWithResponse call
func ParsePostSendPhotoResponse(rsp *http.Response) (*PostSendPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendPollResponse parses an HTTP response from a PostSendPollWithResponse call
func ParsePostSendPollResponse(rsp *http.Response) (*PostSendPollResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendPollResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendStickerResponse parses an HTTP response from a PostSendStickerWithResponse call
func ParsePostSendStickerResponse(rsp *http.Response) (*PostSendStickerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendStickerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendVenueResponse parses an HTTP response from a PostSendVenueWithResponse call
func ParsePostSendVenueResponse(rsp *http.Response) (*PostSendVenueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendVenueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendVideoResponse parses an HTTP response from a PostSendVideoWithResponse call
func ParsePostSendVideoResponse(rsp *http.Response) (*PostSendVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendVideoNoteResponse parses an HTTP response from a PostSendVideoNoteWithResponse call
func ParsePostSendVideoNoteResponse(rsp *http.Response) (*PostSendVideoNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendVideoNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSendVoiceResponse parses an HTTP response from a PostSendVoiceWithResponse call
func ParsePostSendVoiceResponse(rsp *http.Response) (*PostSendVoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendVoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a message.
			Result Message `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatAdministratorCustomTitleResponse parses an HTTP response from a PostSetChatAdministratorCustomTitleWithResponse call
func ParsePostSetChatAdministratorCustomTitleResponse(rsp *http.Response) (*PostSetChatAdministratorCustomTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatAdministratorCustomTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatDescriptionResponse parses an HTTP response from a PostSetChatDescriptionWithResponse call
func ParsePostSetChatDescriptionResponse(rsp *http.Response) (*PostSetChatDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatPermissionsResponse parses an HTTP response from a PostSetChatPermissionsWithResponse call
func ParsePostSetChatPermissionsResponse(rsp *http.Response) (*PostSetChatPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatPhotoResponse parses an HTTP response from a PostSetChatPhotoWithResponse call
func ParsePostSetChatPhotoResponse(rsp *http.Response) (*PostSetChatPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatStickerSetResponse parses an HTTP response from a PostSetChatStickerSetWithResponse call
func ParsePostSetChatStickerSetResponse(rsp *http.Response) (*PostSetChatStickerSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatStickerSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetChatTitleResponse parses an HTTP response from a PostSetChatTitleWithResponse call
func ParsePostSetChatTitleResponse(rsp *http.Response) (*PostSetChatTitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetChatTitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetGameScoreResponse parses an HTTP response from a PostSetGameScoreWithResponse call
func ParsePostSetGameScoreResponse(rsp *http.Response) (*PostSetGameScoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetGameScoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                        `json:"ok"`
			Result PostSetGameScore_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetMyCommandsResponse parses an HTTP response from a PostSetMyCommandsWithResponse call
func ParsePostSetMyCommandsResponse(rsp *http.Response) (*PostSetMyCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetMyCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetPassportDataErrorsResponse parses an HTTP response from a PostSetPassportDataErrorsWithResponse call
func ParsePostSetPassportDataErrorsResponse(rsp *http.Response) (*PostSetPassportDataErrorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetPassportDataErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetPollAnswerResponse parses an HTTP response from a PostSetPollAnswerWithResponse call
func ParsePostSetPollAnswerResponse(rsp *http.Response) (*PostSetPollAnswerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetPollAnswerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetStickerPositionInSetResponse parses an HTTP response from a PostSetStickerPositionInSetWithResponse call
func ParsePostSetStickerPositionInSetResponse(rsp *http.Response) (*PostSetStickerPositionInSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetStickerPositionInSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetStickerSetThumbResponse parses an HTTP response from a PostSetStickerSetThumbWithResponse call
func ParsePostSetStickerSetThumbResponse(rsp *http.Response) (*PostSetStickerSetThumbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetStickerSetThumbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSetWebhookResponse parses an HTTP response from a PostSetWebhookWithResponse call
func ParsePostSetWebhookResponse(rsp *http.Response) (*PostSetWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostStopMessageLiveLocationResponse parses an HTTP response from a PostStopMessageLiveLocationWithResponse call
func ParsePostStopMessageLiveLocationResponse(rsp *http.Response) (*PostStopMessageLiveLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStopMessageLiveLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool                                   `json:"ok"`
			Result PostStopMessageLiveLocation_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostStopPollResponse parses an HTTP response from a PostStopPollWithResponse call
func ParsePostStopPollResponse(rsp *http.Response) (*PostStopPollResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStopPollResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object contains information about a poll.
			Result Poll `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUnbanChatMemberResponse parses an HTTP response from a PostUnbanChatMemberWithResponse call
func ParsePostUnbanChatMemberResponse(rsp *http.Response) (*PostUnbanChatMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnbanChatMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUnpinAllChatMessagesResponse parses an HTTP response from a PostUnpinAllChatMessagesWithResponse call
func ParsePostUnpinAllChatMessagesResponse(rsp *http.Response) (*PostUnpinAllChatMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnpinAllChatMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUnpinChatMessageResponse parses an HTTP response from a PostUnpinChatMessageWithResponse call
func ParsePostUnpinChatMessageResponse(rsp *http.Response) (*PostUnpinChatMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnpinChatMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok     bool `json:"ok"`
			Result bool `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUploadStickerFileResponse parses an HTTP response from a PostUploadStickerFileWithResponse call
func ParsePostUploadStickerFileResponse(rsp *http.Response) (*PostUploadStickerFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadStickerFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
			//
			// Maximum file size to download is 20 MB
			Result File `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserLoginResponse parses an HTTP response from a PostUserLoginWithResponse call
func ParsePostUserLoginResponse(rsp *http.Response) (*PostUserLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ok bool `json:"ok"`

			// Result Used in the User Authorization process, used to return the current state of the authorization and the token.
			Result AuthorizationState `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
